<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Adam Pritchard's blog and miscellany on adam-p</title><link>https://adam-p.ca/</link><description>Recent content in Adam Pritchard's blog and miscellany on adam-p</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 15 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://adam-p.ca/index.xml" rel="self" type="application/rss+xml"/><item><title>Diving into Go's HTTP server</title><link>https://adam-p.ca/blog/2022/01/golang-http-server-timeouts/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2022/01/golang-http-server-timeouts/</guid><description>Recently, I was adding timeouts to a Go HTTP server and ended up exploring how the different settings and approaches act and interact. I&amp;rsquo;m going to publish my notes here, along with the code I used for testing. Hopefully this will help someone else (or myself) in the future.
The timeout testing client can be found here: github.com/adam-p/httptimeout. There is a server in the examples directory that you can make requests to.</description></item><item><title>The Ethics of Driving Speed in Travel Time Estimation</title><link>https://adam-p.ca/blog/2021/11/ethics-travel-time/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2021/11/ethics-travel-time/</guid><description>How should travel time be estimated? What are the ethical implications of the approach taken?
You enter your destination into your maps app. It finds a few likely routes. It determines the distance of each pretty easily. It checks traffic conditions along the routes. But we don&amp;rsquo;t yet have a travel time estimate. Time equals distance divided by speed, adjusted for traffic.
What travel speed (traffic notwithstanding) does the app use?</description></item><item><title>Instructions on the ceiling</title><link>https://adam-p.ca/inco/2021-11-27-ftnu/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate><guid>https://adam-p.ca/inco/2021-11-27-ftnu/</guid><description>From the Neck Up does neck-up massage, including intra-oral. When the RMT has their fingers in your mouth it&amp;rsquo;s pretty hard to give directions. So there are hand signs for communicating with the RMT. And, since you&amp;rsquo;re laying on your back during the procedure, the guide to the signs are posted on the ceiling.</description></item><item><title>Timing attack mitigation must exclude network</title><link>https://adam-p.ca/blog/2021/11/constant-time-network/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2021/11/constant-time-network/</guid><description>TL;DR: When trying to prevent timing attacks (e.g., against login username enumeration) by making a request take constant time, make sure you exclude the network read and write time. If you don&amp;rsquo;t, an attacker can slow down their request to bypass it.
I&amp;rsquo;ll be covering some background and contextual information here. If you don&amp;rsquo;t need it, skip to &amp;ldquo;Exclude network time from constant-time limiting&amp;rdquo;.
What is a &amp;ldquo;timing attack&amp;rdquo;? Briefly, a timing attack (in this context) is when an attacker observes the time it takes for a server to handle a request to glean some information about the validity of the input they tried.</description></item><item><title>Make sure you have a backup Yubikey</title><link>https://adam-p.ca/blog/2021/06/backup-yubikey/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2021/06/backup-yubikey/</guid><description>For four years I carried a Yubikey NEO (USB Type-A) in my pocket, on my keychain. And then it died (would no longer be recognized by any computer).
Yubikey&amp;rsquo;s durability claim was:
Crush-resistant and waterproof, YubiKey NEO is practically indestructible during normal use, weighs only 3g, and attaches to your keychain alongside your house and car keys
So, they didn&amp;rsquo;t explicitly say &amp;ldquo;carrying it on your keychain won&amp;rsquo;t kill it&amp;rdquo;, but they sure did imply it.</description></item><item><title>Dev Story: Unicode URL length limit blues</title><link>https://adam-p.ca/blog/2021/06/unicode-url-length/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2021/06/unicode-url-length/</guid><description>I have enjoyed reading other people&amp;rsquo;s design and debugging train-of-thought posts, so after I spent two days wrestling with a code problem, I thought I&amp;rsquo;d write it up. It&amp;rsquo;s not technically exciting, but I think that describing it might be useful to someone &amp;ndash; or my future self &amp;ndash; someday. Or, at the very least, a little amusing.
(Bonus: While writing this I discovered an error I made while doing the actual work.</description></item><item><title>The short happy life of the Breached extension</title><link>https://adam-p.ca/blog/2019/05/breached/</link><pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2019/05/breached/</guid><description>In October 2017, Troy Hunt of Have I Been Pwned held a contest inviting people to do something cool with the HIBP API. I decided a) that I would kind of like the special edition ThinkPad he was giving away, and b) that I could probably whip something up pretty quickly.
I decided to create a browser extension that would simply pull HIBP breach information and show a browser notification &amp;ndash; with the ability to view extra info &amp;ndash; when the user visited a site that had been breached.</description></item><item><title>First Post: someone's last post</title><link>https://adam-p.ca/inco/2017-01-05-first-post/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://adam-p.ca/inco/2017-01-05-first-post/</guid><description>I often come across digital and physical interface designs that are either great (coherent) or terrible (incoherent). For some mysterious reason I&amp;rsquo;ve been wanting to capture such interfaces and share them.
To start, a curious headstone.
The goal of the design of a headstone is to be read by the living. For a few decades some of the people who read it will have known the deceased, but many won&amp;rsquo;t, and after a while no one will have personally known them.</description></item><item><title>Markdown Here: Splitting the Firefox and Thunderbird Extension</title><link>https://adam-p.ca/blog/2016/07/mdh-dividing-firefox-and-thunderbird/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2016/07/mdh-dividing-firefox-and-thunderbird/</guid><description>[This started as notes to myself to help clarify the problem and solution. It&amp;rsquo;s probably more suited to a Github issue than a blog post, and it may get copied into one.]
The story so far The Firefox and Thunderbird versions of Markdown Here both used nearly the same code &amp;ndash; an old-style XUL extension. Tb is only capable of using a XUL extension, while Fx supports at least three extension types: XUL-based, Add-on SDK (aka Jetpack, aka jpm), and WebExtensions.</description></item><item><title>Android Non-Vulnerability: Steal a Device and Keep it Unlocked</title><link>https://adam-p.ca/blog/2016/05/smart-lock-mock-location/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2016/05/smart-lock-mock-location/</guid><description>While poking around in my Android phone&amp;rsquo;s developer options, I realized that if you steal a phone that&amp;rsquo;s currently unlocked because it&amp;rsquo;s in a &amp;ldquo;trusted place&amp;rdquo;, then you can force it to remain unlocked forever. (And then I got schooled about that not being a problem.)
Security Feature: Smart Lock with Trusted Places Android&amp;rsquo;s Smart Lock allows users to configure conditions under which to keep the phone unlocked. One of the conditions is location &amp;ndash; you can set trusted locations where your phone shouldn&amp;rsquo;t prompt for a PIN/pattern/password when unlocking.</description></item><item><title>Why and How to Use a Contributor License Agreement</title><link>https://adam-p.ca/blog/2015/02/contributor-license-agreement/</link><pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2015/02/contributor-license-agreement/</guid><description>Background and Motivation I received a pull request for Markdown Here that was great: it found a bug, fixed it, and included tests for the fix. However, the PR submitter didn&amp;rsquo;t write the tests using the existing framework, so I figured I&amp;rsquo;d massage his test code into the proper form.
And then I noticed that he included a copyright line in the test file. It says &amp;ldquo;MIT License&amp;rdquo;, which is the license used for the rest of the project, but that got me thinking about what that might mean&amp;hellip;</description></item><item><title>Test post: Markdown Here in Disqus</title><link>https://adam-p.ca/blog/2013/10/mdh-disqus-test/</link><pubDate>Fri, 18 Oct 2013 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2013/10/mdh-disqus-test/</guid><description>This is just a stub test post to allow me to try out Markdown Here in Disqus comments.
Right now MDH won&amp;rsquo;t work with Disqus in Chrome because of cross-origin restrictions. See: https://github.com/adam-p/markdown-here/issues/124
Update: The Disqus edit box is contenteditable, and MDH will render in it, but all formatting seems to get stripped out when you actually post the comment. Seems like the rich-edit-ness is probably just to support Disqus&amp;rsquo;s add-an-image feature.</description></item><item><title>Safari Extensions Gallery: half-baked</title><link>https://adam-p.ca/blog/2013/06/safari-extensions-gallery-half-baked/</link><pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2013/06/safari-extensions-gallery-half-baked/</guid><description>Trying to get Markdown Here listed in the Safari Extensions Gallery is by far the worst browser extension &amp;ldquo;store&amp;rdquo; experience I&amp;rsquo;ve had so far. Shockingly bad.
No hosting First of all, but least of all: There&amp;rsquo;s no hosting. Unlike the Chrome and Mozilla stores, the Safari store doesn&amp;rsquo;t host the extension for you &amp;ndash; it&amp;rsquo;s really more of a listing of links to wherever you host your extension files. That&amp;rsquo;s not terrible, but:</description></item><item><title>No One Knows to Click on a Page Action</title><link>https://adam-p.ca/blog/2013/03/pageaction-interaction/</link><pubDate>Sun, 24 Mar 2013 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2013/03/pageaction-interaction/</guid><description>Page actions &amp;ndash; the buttons in a browser&amp;rsquo;s address bar &amp;ndash; are a surprising UI failure.
When adding a button for a browser extension, a choice must be made whether to make it a &amp;ldquo;page action&amp;rdquo; or a &amp;ldquo;browser action&amp;rdquo; (button on the toolbar). But browsers have failed to communicate the interactiveness of page actions, and almost no one &amp;ndash; techy or layman &amp;ndash; realizes that they&amp;rsquo;re clickable.
To complement the context menu item and hotkey, and to fulfil a user feature request, I decided to add a button to the Markdown Here browser extension.</description></item></channel></rss>