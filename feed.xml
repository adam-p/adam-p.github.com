<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Adam Pritchard's blog and miscellany on adam-p</title><link>https://adam-p.ca/</link><description>Recent content in Adam Pritchard's blog and miscellany on adam-p</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://adam-p.ca/feed.xml" rel="self" type="application/rss+xml"/><item><title>The perils of the “real” client IP</title><link>https://adam-p.ca/blog/2022/03/x-forwarded-for/</link><pubDate>Fri, 04 Mar 2022 13:20:10 -0500</pubDate><guid>https://adam-p.ca/blog/2022/03/x-forwarded-for/</guid><description>&lt;h2 id="summary">
&lt;a class="heading-anchor" href="#summary">
##
&lt;/a>
Summary
&lt;/h2>
&lt;p>This post ended up being incredibly &lt;del>long&lt;/del> comprehensive. I&amp;rsquo;m afraid that many people won&amp;rsquo;t read enough to get everything that&amp;rsquo;s important, so here are the key points:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>When deriving the &amp;ldquo;real client IP address&amp;rdquo; from the &lt;code>X-Forwarded-For&lt;/code> header, use the rightmost IP in the list.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The leftmost IP in the XFF header is commonly considered to be &amp;ldquo;closest to the client&amp;rdquo; and &amp;ldquo;most real&amp;rdquo;, but it&amp;rsquo;s trivially spoofable. Don&amp;rsquo;t use it for anything even close to security-related.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When choosing the rightmost XFF IP, make sure to use the &lt;em>last&lt;/em> instance of that header.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using special &amp;ldquo;true client IPs&amp;rdquo; set by reverse proxies (like &lt;code>X-Real-IP&lt;/code>, &lt;code>True-Client-IP&lt;/code>, etc.) &lt;em>can&lt;/em> be good, but it depends on the a) how the reverse proxy actually sets it, b) whether the reverse proxy sets it if it&amp;rsquo;s already present/spoofed, and c) how you&amp;rsquo;ve configured the reverse proxy (sometimes).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Any header not specifically set by your reverse proxy cannot be trusted. For example, you &lt;em>must not&lt;/em> check the &lt;code>X-Real-IP&lt;/code> header if you&amp;rsquo;re not behind Nginx or something else that always sets it, because you&amp;rsquo;ll be reading a spoofed value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A lot of rate limiter implementations are using spoofable IPs and are vulnerable to rate limiter escape and memory exhaustion attacks.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>If you use the &amp;ldquo;real client IP&amp;rdquo; anywhere in your code or infrastructure, you need to go check right now how you&amp;rsquo;re deriving it.&lt;/em>&lt;/p>
&lt;p>This is all explained in detail below, so keep reading. It&amp;rsquo;s a weird, scary, bumpy ride.&lt;/p>
&lt;h2 id="introduction">
&lt;a class="heading-anchor" href="#introduction">
##
&lt;/a>
Introduction
&lt;/h2>
&lt;p>The state of getting the &amp;ldquo;real client IP&amp;rdquo; using &lt;code>X-Forwarded-For&lt;/code> and other HTTP headers is terrible. It&amp;rsquo;s done incorrectly, inconsistently, and the result is used inappropriately. This leads to security vulnerabilities in a variety of projects, and will certainly lead to more in the future.&lt;/p>
&lt;p>After thinking about rate limiters for a while, I started worrying about their IPv6 handling. I &lt;a href="./blog/2022/02/ipv6-rate-limiting/">wrote a post&lt;/a> detailing how bad IPv6 rate limiting can and does lead to rate limiter escape and memory exhaustion. Then I moved on to worrying about how rate limiters determine what IP to rate-limit when they&amp;rsquo;re behind a load balancer (or any reverse proxy). As you&amp;rsquo;ll see, the situation is bad.&lt;/p>
&lt;p>But this isn&amp;rsquo;t just about rate limiters. If you ever touch code that looks at the &lt;code>X-Forwarded-For&lt;/code> header, or if you use someone else&amp;rsquo;s code that uses or gives you the &amp;ldquo;real client IP&amp;rdquo;, then you absolutely need to be savvy and wary. This post will help you get there.&lt;/p>
&lt;p>&lt;strong>NOTE:&lt;/strong> Portions of this are redacted as I&amp;rsquo;m trying to disclose responsibly to the affected projects. Those portions will be added in as that projects choose to make the issues public. (So check back later!)&lt;/p>
&lt;h2 id="it-cant-be-that-hard-to-get-the-real-client-ip-right">
&lt;a class="heading-anchor" href="#it-cant-be-that-hard-to-get-the-real-client-ip-right">
##
&lt;/a>
It can&amp;rsquo;t be that hard to get the real client IP, right?
&lt;/h2>
&lt;p>There are many reasons why web services are interested in the IP address of their clients: geographical stats, geo-targeting, auditing, rate-limiting, abuse-blocking, session history, etc.&lt;/p>
&lt;p>When a client directly connects to a server, the server can see the IP address of the client. If the client connects through one or more proxies (of any kind: forward, reverse, load balancer, API gateway, TLS offloading, IP access control, etc.), then the server only directly sees the IP address of the final proxy used by the client connection.&lt;/p>
&lt;p>In order to pass the original IP address on to the server, there are several headers in common use:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For">&lt;code>X-Forwarded-For&lt;/code>&lt;/a> is a list of comma-separated IPs that gets appended to by each traversed proxy&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. The idea is that the first IP (added by the first proxy) is the true client IP. Each subsequent IP is another proxy along the path. The last proxy&amp;rsquo;s IP is &lt;em>not&lt;/em> present (because proxies don&amp;rsquo;t add their own IPs, and because it connects directly to the server so its IP will be directly available anyway). We&amp;rsquo;re going to talk about this a lot, so it&amp;rsquo;ll be abbreviated to &amp;ldquo;XFF&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Forwarded">&lt;code>Forwarded&lt;/code>&lt;/a> is the most official but seemingly least-used header. We look at it in more detail &lt;a href="#rfc-7239-forwarded-http-extension-june-2014">below&lt;/a>, but it&amp;rsquo;s really just a fancier version of XFF that has the same problems that we&amp;rsquo;re about to discuss.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There are also special single-IP headers like &lt;code>X-Real-IP&lt;/code> (Nginx), &lt;code>CF-Connecting-IP&lt;/code> (Cloudflare), or &lt;code>True-Client-IP&lt;/code> (Cloudflare and Akamai). We&amp;rsquo;ll talk more about these below, but they&amp;rsquo;re not the main focus of this post.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="pitfalls">
&lt;a class="heading-anchor" href="#pitfalls">
##
&lt;/a>
Pitfalls
&lt;/h2>
&lt;p>Before talking about how to use XFF properly, we&amp;rsquo;ll talk about the many ways that using &lt;code>X-Forwarded-For&lt;/code> can go wrong.&lt;/p>
&lt;h3 id="headers-are-untrustworthy">
&lt;a class="heading-anchor" href="#headers-are-untrustworthy">
###
&lt;/a>
Headers are untrustworthy
&lt;/h3>
&lt;p>First of all, and most importantly, you must always be aware that &lt;em>any XFF IPs that were added (or appear to have been added) by any proxy not controlled by you are completely unreliable&lt;/em>. Any proxy could have added, removed, or modified the header any way it wants. The client as well could have initially set the header to anything it wants to get the spoof-ball rolling. For example, if you make this request to an AWS load balancer&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&amp;hellip;&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X POST https://my.load.balanced.domain/login -H &amp;#34;X-Forwarded-For: 1.2.3.4, 11.22.33.44&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;your server behind the load balancer will get this:&lt;/p>
&lt;pre tabindex="0">&lt;code>X-Forwarded-For: 1.2.3.4, 11.22.33.44, &amp;lt;actual client IP&amp;gt;
&lt;/code>&lt;/pre>&lt;p>And this:&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X POST https://my.load.balanced.domain/login -H &amp;#34;X-Forwarded-For: oh, hi,,127.0.0.1,,,,&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;will give you this:&lt;/p>
&lt;pre tabindex="0">&lt;code>X-Forwarded-For: oh, hi,,127.0.0.1,,,,, &amp;lt;actual client IP&amp;gt;
&lt;/code>&lt;/pre>&lt;p>As you can see, everything already present is just passed through, unchanged and unvalidated. The final, actual IP is just appended to whatever is already there.&lt;/p>
&lt;p>(In addition to curl&amp;rsquo;ing and custom clients, there is also at least one &lt;a href="https://chrome.google.com/webstore/detail/x-forwarded-for-header/hkghghbnihliadkabmlcmcgmffllglin">Chrome extension&lt;/a> that lets you set the XFF header in browser requests. But &lt;em>how&lt;/em> you can set the header doesn&amp;rsquo;t really matter to us here, only that an attacker can do it.)&lt;/p>
&lt;h3 id="multiple-headers">
&lt;a class="heading-anchor" href="#multiple-headers">
###
&lt;/a>
Multiple headers
&lt;/h3>
&lt;p>According to the &lt;a href="https://datatracker.ietf.org/doc/html/rfc2616#section-4.2">HTTP/1.1 RFC (2616)&lt;/a>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>:&lt;/p>
&lt;blockquote>
&lt;p>Multiple message-header fields with the same field-name MAY be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list [i.e., #(values)]. It MUST be possible to combine the multiple header fields into one &amp;ldquo;field-name: field-value&amp;rdquo; pair, without changing the semantics of the message, by appending each subsequent field-value to the first, each separated by a comma. The order in which header fields with the same field-name are received is therefore significant to the interpretation of the combined field value, and thus a proxy MUST NOT change the order of these field values when a message is forwarded.&lt;/p>
&lt;/blockquote>
&lt;p>That applies to XFF, as it is a comma-separated list. This can make getting the rightmost (or even leftmost) IP error-prone.&lt;/p>
&lt;p>For example, Go has three ways to get a header value:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pkg.go.dev/net/http#Header.Get">&lt;code>http.Header.Get(headerName)&lt;/code>&lt;/a> returns the first header value as a string.&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/net/http#Header.Values">&lt;code>http.Header.Values(headerName)&lt;/code>&lt;/a> returns a slice (array) of strings with the values of all instances of the header &lt;code>headerName&lt;/code>. (&lt;code>headerName&lt;/code> is canonicalized before lookup.)&lt;/li>
&lt;li>&lt;code>http.Header&lt;/code> is a &lt;code>map[string][]string&lt;/code> and can be accessed directly. (The map keys are canonicalized header names.) This is similar to using &lt;code>Values&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>So here&amp;rsquo;s the attack:&lt;/p>
&lt;ol>
&lt;li>Eve makes a request with &lt;em>two&lt;/em> spoofed XFF headers.&lt;/li>
&lt;li>Your reverse proxy adds Eve&amp;rsquo;s true IP to the end of the &lt;em>second&lt;/em> XFF header, per the RFC requirements.&lt;/li>
&lt;li>You call &lt;code>req.Header.Get(&amp;quot;X-Forwarded-For&amp;quot;)&lt;/code> and get the first header. You split it up and take the rightmost.&lt;/li>
&lt;li>You have chosen a spoofed IP. You treat it as trustworthy. Bad things result.&lt;/li>
&lt;/ol>
&lt;p>Unlike Go, Twisted&amp;rsquo;s method for getting a single header value &lt;a href="https://github.com/twisted/twisted/blob/ebb2d360070e468981377b917e3a728ff4e6c7f6/src/twisted/web/http.py#L1068">returns the &lt;em>last&lt;/em> value&lt;/a>. (Why is there no standard, common, accepted behaviour for this?) This avoids the above attack, but it can cause a different (less likely) problem: If you&amp;rsquo;re using the rightmost-ish algorithm (described &lt;a href="#algorithms">below&lt;/a>), you need to go backwards from the right looking for the first untrusted IP. But what if one of your reverse proxies has added a new header instead of appending (a valid thing to do, per the RFC)? Now the IP that you want is nowhere to be found in the last header &amp;ndash; it&amp;rsquo;s full of trusted reverse proxy IPs and the real IP is in a previous instance of the XFF header.&lt;/p>
&lt;p>There might be a subtle, hypothetical attack possible here:&lt;/p>
&lt;ol>
&lt;li>You have (at least) two reverse proxies that you trust.&lt;/li>
&lt;li>The second of those reverse proxies doesn&amp;rsquo;t like super long headers, so it creates a new one rather than appending if the XFF header is too long.&lt;/li>
&lt;li>Eve knows this. And she wants to hide her IP from you.&lt;/li>
&lt;li>Eve spoofs a long XFF in her request to you.&lt;/li>
&lt;li>Your first reverse proxy adds her true IP to the XFF header.&lt;/li>
&lt;li>Your second reverse proxy doesn&amp;rsquo;t like how long that header is, so it creates a new one. The header value is the IP of the first reverse proxy.&lt;/li>
&lt;li>Your server software gets the last header and it has only a single IP, belonging to your first reverse proxy.&lt;/li>
&lt;li>What does your logic do? Use that IP? Treat it as special because it&amp;rsquo;s private/trusted? Panic because it&amp;rsquo;s impossible that this IP should be trusted?&lt;/li>
&lt;/ol>
&lt;p>Note that when I tested with a server behind AWS ALB I found that ALB had already concatenated the XFF headers. So that&amp;rsquo;s good. I have no idea if other reverse proxies do the same, but I bet there&amp;rsquo;s no real consistency.&lt;/p>
&lt;p>The best thing to do is merge all of the XFF headers yourself.&lt;/p>
&lt;p>(It is worthwhile asking &amp;ndash; and checking &amp;ndash; to make sure reverse proxies append to the correct header, because appending to the wrong header would wreck the trustworthiness of taking the rightmost. I have only checked AWS ALB and Cloudflare, and they&amp;rsquo;re doing it right. If anyone discovers something doing it wrong, please let me know.)&lt;/p>
&lt;p>[2022-03-04: I created a &lt;a href="https://github.com/golang/go/issues/51493">Go issue&lt;/a> arguing for a change to the behaviour of &lt;code>http.Header.Get&lt;/code>. Not with any real expectation of a change, but we&amp;rsquo;ll see.]&lt;/p>
&lt;h3 id="private-ips">
&lt;a class="heading-anchor" href="#private-ips">
###
&lt;/a>
Private IPs
&lt;/h3>
&lt;p>Even in completely non-malicious scenarios, any of the XFF IPs &amp;ndash; but especially the leftmost &amp;ndash; may be a &lt;a href="https://en.wikipedia.org/wiki/Private_network">private/internal IP address&lt;/a>. If the client first connects to an internal proxy, it may add the private IP of the client to the XFF header. This address is never going to be useful to you.&lt;/p>
&lt;h3 id="splitting-the-ips">
&lt;a class="heading-anchor" href="#splitting-the-ips">
###
&lt;/a>
Splitting the IPs
&lt;/h3>
&lt;p>Because &lt;code>X-Forwarded-For&lt;/code> isn&amp;rsquo;t an official standard, there&amp;rsquo;s no formal spec for it. Most examples show the IP addresses comma-space (&lt;code>&amp;quot;, &amp;quot;&lt;/code>) separated, but the space isn&amp;rsquo;t strictly required. (For example, the &lt;a href="https://datatracker.ietf.org/doc/html/rfc2616#section-4.2">HTTP/1.1 RFC&lt;/a> says that headers &lt;em>like&lt;/em> XFF are simply &amp;ldquo;comma separated&amp;rdquo;.) &lt;em>Most&lt;/em> of the code I looked at splits by just comma and then trims the value, but at least &lt;a href="https://github.com/go-chi/httprate/blob/463924d478ea0c19de7265b97371a59a7ebf5fdd/httprate.go#L33">one I found&lt;/a> looks for comma-space.&lt;/p>
&lt;p>When testing, it looks to me like AWS ALB uses comma-space when adding an IP, but Cloudflare uses only a comma.&lt;/p>
&lt;h3 id="unencrypted-data-is-always-untrustworthy">
&lt;a class="heading-anchor" href="#unencrypted-data-is-always-untrustworthy">
###
&lt;/a>
Unencrypted data is always untrustworthy
&lt;/h3>
&lt;p>This should go without saying, but if you&amp;rsquo;re receiving HTTP-not-S requests, then anyone could have modified the headers before they got to you. This is worth mentioning because an interloper can&amp;rsquo;t mess with the &amp;ldquo;rightmost-ish&amp;rdquo; approach (described below) because they can&amp;rsquo;t mess with the IP of the final connection from the internet to your reverse proxy or server.&lt;/p>
&lt;p>So just encrypt your traffic, okay?&lt;/p>
&lt;h3 id="other-headers-x-client-ip-true-client-ip-might-be-present-and-spoofed">
&lt;a class="heading-anchor" href="#other-headers-x-client-ip-true-client-ip-might-be-present-and-spoofed">
###
&lt;/a>
Other headers (&lt;code>X-Client-IP&lt;/code>, &lt;code>True-Client-IP&lt;/code>) might be present and spoofed
&lt;/h3>
&lt;p>Some reverse proxies remove any unexpected or unwanted headers, but some (like AWS ALB) don&amp;rsquo;t. So an attacker can set headers like &lt;code>X-Client-IP&lt;/code> and &lt;code>True-Client-IP&lt;/code> straight through to your server. You need to not get fooled into using them if your reverse proxy didn&amp;rsquo;t specifically set them for you.&lt;/p>
&lt;h3 id="trying-to-learn-about-x-forwarded-for">
&lt;a class="heading-anchor" href="#trying-to-learn-about-x-forwarded-for">
###
&lt;/a>
Trying to learn about &lt;code>X-Forwarded-For&lt;/code>
&lt;/h3>
&lt;p>Trying to educate yourself about XFF is, unfortunately, also difficult.&lt;/p>
&lt;p>MDN Web Docs are usually the gold standard for stuff like this, but &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For">the page about XFF&lt;/a> doesn&amp;rsquo;t mention these risks at all; it says &amp;ldquo;the right-most IP address is the IP address of the most recent proxy and the left-most IP address is the IP address of the originating client&amp;rdquo; with no caveat. The &lt;a href="https://en.wikipedia.org/wiki/X-Forwarded-For">Wikipedia entry&lt;/a> is much better: &amp;ldquo;Since it is easy to forge an X-Forwarded-For field the given information should be used with care. The right-most IP address is always the IP address that connects to the last proxy, which means it is the most reliable source of information.&amp;rdquo;&lt;/p>
&lt;p>[2022-03-09: Created &lt;a href="https://github.com/mdn/content/issues/13703">an issue&lt;/a> for the MDN documentation. 2022-03-19: I rewrote the page, PR&amp;rsquo;d it, and the change is live now. You can see a PDF of the &lt;a href="./misc/MDN-XFF.pdf">original page here&lt;/a>. Now to fix the &lt;code>Forwarded&lt;/code> page&amp;hellip;]&lt;/p>
&lt;p>Other sources are similarly variable. Some say nothing whatsoever about the possibility of the header being spoofed or the presence of private addresses (&lt;a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/x-forwarded-headers.html">1&lt;/a>, &lt;a href="https://techcommunity.microsoft.com/t5/iis-support-blog/how-to-use-x-forwarded-for-header-to-log-actual-client-ip/ba-p/873115">2&lt;/a>, &lt;a href="https://www.geeksforgeeks.org/http-headers-x-forwarded-for/">3&lt;/a>, &lt;a href="https://developers.cloudflare.com/fundamentals/get-started/http-request-headers/">4&lt;/a>, &lt;a href="https://www.keycdn.com/blog/x-forwarded-for-cdn">5&lt;/a>). Others do a pretty good job of mentioning the risks (&lt;a href="https://totaluptime.com/kb/prevent-x-forwarded-for-spoofing-or-manipulation/">6&lt;/a>, &lt;a href="https://docs.fastly.com/signalsciences/faq/real-client-ip-addresses/#x-forwarded-for-header-configuration">7&lt;/a>, &lt;a href="https://datatracker.ietf.org/doc/html/rfc7239#section-8.1">8&lt;/a>), but sometimes you have to read pretty deeply to get to the warnings.&lt;/p>
&lt;h2 id="avoiding-those-pits">
&lt;a class="heading-anchor" href="#avoiding-those-pits">
##
&lt;/a>
Avoiding those pits
&lt;/h2>
&lt;p>Let&amp;rsquo;s make a few baseline statements:&lt;/p>
&lt;ol>
&lt;li>Using an IP in the private address space as the &amp;ldquo;real&amp;rdquo; client IP is never the right choice&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/li>
&lt;li>Using a value that&amp;rsquo;s not actually an IP address is never the right choice.&lt;/li>
&lt;li>In the absence of chicanery, the leftmost non-private, non-invalid IP is the closest we can come to the &amp;ldquo;real&amp;rdquo; client IP. (Henceforth, &amp;ldquo;leftmost-ish&amp;rdquo;.)&lt;/li>
&lt;li>The only client IP that we can &lt;em>trust&lt;/em> is the first one added by a (reverse) proxy that we control. (Henceforth, &amp;ldquo;rightmost-ish&amp;rdquo;.)&lt;/li>
&lt;/ol>
&lt;p>The leftmost-ish is usually going to be the most &amp;ldquo;real&amp;rdquo;, while the rightmost-ish is going to be the most trustworthy. So which IP should you use? It depends on what you&amp;rsquo;re going to do with it.&lt;/p>
&lt;p>If you&amp;rsquo;re going to do something security-related, you need to use the IP you trust &amp;ndash; the rightmost-ish. The obvious example here is rate-limiting. If you use the leftmost-ish IP for this, an attacker can just spoof a different XFF prefix value with each request and &lt;em>completely avoid being limited&lt;/em>.&lt;/p>
&lt;p>Additionally, they might be able to exhaust your server memory by forcing you to store too many individual entries &amp;ndash; one for each fake IP. It may seem hard to believe that storing IP addresses in memory could lead to exhaustion &amp;ndash; especially if they&amp;rsquo;re stored in a cache with finite time-to-live, but keep in mind:&lt;/p>
&lt;ul>
&lt;li>The attacker won&amp;rsquo;t be limited to the 4 billion IPv4 addresses. They can use all the bazillion IPv6 addresses, if the limiter isn&amp;rsquo;t &lt;a href="./blog/2022/02/ipv6-rate-limiting/">smart about prefixes&lt;/a>.&lt;/li>
&lt;li>Since many limiters don&amp;rsquo;t check for valid IPs, an attacker can use any random string it wants.&lt;/li>
&lt;li>Also note that these strings can be &lt;em>big&lt;/em>; for example, Go&amp;rsquo;s &lt;a href="https://pkg.go.dev/net/http#pkg-constants">default header block size limit&lt;/a> is 1MB. That means a single random-string &amp;ldquo;IP&amp;rdquo; can be almost 1MB. That means adding 1MB of memory usage &lt;em>per request&lt;/em>.&lt;/li>
&lt;/ul>
&lt;p>It still won&amp;rsquo;t be feasible for all attackers and configurations, but it shouldn&amp;rsquo;t be dismissed without consideration.&lt;/p>
&lt;p>Or an attacker can force you to rate-limit/block the IP addresses of other users. They can supply a real &amp;ndash; but not their &amp;ndash; IP address, and you&amp;rsquo;ll eventually be fooled into rate-limiting it. (And if you&amp;rsquo;re using the &amp;ldquo;real&amp;rdquo; IP for abuse reports, you might end up complaining about the wrong person.)&lt;/p>
&lt;p>The downside to using the rightmost-ish IP for rate-limiting is that you might block a proxy IP that&amp;rsquo;s not actually a source of abuse but is just used by a bunch of different clients and you would have realized that if you&amp;rsquo;d just used the leftmost-ish instead. Yeah, well. That doesn&amp;rsquo;t seem super likely, and it&amp;rsquo;s still infinitely more acceptable than allowing attackers to trivially bypass your rate limiter and crash your server.&lt;/p>
&lt;p>If you&amp;rsquo;re doing something not obviously security-related&amp;hellip; Think hard about your use case. Let&amp;rsquo;s say you just want to do an &lt;a href="https://en.wikipedia.org/wiki/Internet_geolocation">IP-geolocation&lt;/a> lookup for your stats. &lt;em>Probably&lt;/em> the leftmost-ish IP is what you want. The vast majority of your users won&amp;rsquo;t be doing any header spoofing, and the geolocation of random internet proxies are no good to you, so you&amp;rsquo;ll &lt;em>probably&lt;/em> get the best results with the IP closest to the user.&lt;/p>
&lt;p>On the other hand, you might want to consider how many internet-proxy-using users you expect to have. Probably few enough that it won&amp;rsquo;t hurt your stats if you geolocate the wrong thing. And is there a way an attacker could hurt you by purposely skewing your geo stats? Probably not, but take a moment to really think about it.&lt;/p>
&lt;p>So &lt;em>be careful&lt;/em> when writing your &amp;ldquo;GetRealClientIP(request)&amp;rdquo; function. Make sure it has a big warning comment about how it should be used. Or maybe write two functions: &amp;ldquo;GetUntrustworthyRealClientIP(request)&amp;rdquo; and &amp;ldquo;GetTrustworthyButLessRealClientIP(request)&amp;rdquo;. Which are horrible names. Maybe just pass a flag instead. Anyway, the point is to prevent the callers of your functions from having any confusion about the nature of the result.&lt;/p>
&lt;p>Also be careful when using the results of that function. It&amp;rsquo;s easy to write code that gets the leftmost-ish IP to do some geo lookup and then later decide you also need to do rate limiting&amp;hellip; so you might as well use the same &amp;ldquo;realClientIP&amp;rdquo; variable! Oops. This might be a good time &lt;a href="https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/">to make wrong code look wrong&lt;/a>.&lt;/p>
&lt;p>And remember that the final proxy IP &amp;ndash; or the address of the client if it&amp;rsquo;s connecting directly &amp;ndash; is &lt;em>not&lt;/em> in the XFF header. You need to look at your request connection information for that. (&lt;code>http.Request.RemoteAddr&lt;/code> in Go, the &lt;code>REMOTE_ADDR&lt;/code> environment variable for many CGI servers, etc.)&lt;/p>
&lt;h3 id="algorithms">
&lt;a class="heading-anchor" href="#algorithms">
###
&lt;/a>
Algorithms
&lt;/h3>
&lt;p>When reading this, remember that the final proxy IP is not in the XFF list &amp;ndash; it&amp;rsquo;s the &lt;code>RemoteAddr&lt;/code>. Also note that &lt;code>RemoteAddr&lt;/code> might have the form &lt;code>ip:port&lt;/code>, depending on your platform (like it does in Go) &amp;ndash; sure sure to only use the IP part.&lt;/p>
&lt;h4 id="first-collect-all-of-the-ips">
&lt;a class="heading-anchor" href="#first-collect-all-of-the-ips">
####
&lt;/a>
First: collect all of the IPs
&lt;/h4>
&lt;p>Make a single list of all the IPs in all of the &lt;code>X-Forwarded-For&lt;/code> headers.&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> Also have the &lt;code>RemoteAddr&lt;/code> available.&lt;/p>
&lt;h4 id="second-decide-what-your-security-needs-are">
&lt;a class="heading-anchor" href="#second-decide-what-your-security-needs-are">
####
&lt;/a>
Second: decide what your security needs are
&lt;/h4>
&lt;p>Default to using the rightmost-ish approach. Only use the leftmost-ish if you have to, and make sure you do so carefully.&lt;/p>
&lt;h4 id="leftmost-ish-the-closest-to-the-real-ip-but-utterly-untrustworthy">
&lt;a class="heading-anchor" href="#leftmost-ish-the-closest-to-the-real-ip-but-utterly-untrustworthy">
####
&lt;/a>
Leftmost-ish: the closest to the &amp;ldquo;real IP&amp;rdquo;, but utterly untrustworthy
&lt;/h4>
&lt;p>If your server is directly connected to the internet, there might be an XFF header or there might not be (depending on whether the client used a proxy). If there &lt;em>is&lt;/em> an XFF header, pick the leftmost IP address that is a &lt;em>valid, non-private&lt;/em> IPv4 or IPv6 address. If there is no XFF header, use the &lt;code>RemoteAddr&lt;/code>.&lt;/p>
&lt;p>If your server is behind one or more reverse proxies, pick the leftmost XFF IP address that is a &lt;em>valid, non-private&lt;/em> IPv4 or IPv6 address. (If there&amp;rsquo;s no XFF header, you need to fix your network configuration problem &lt;em>right now&lt;/em>.)&lt;/p>
&lt;p>And never forget the security implications!&lt;/p>
&lt;h4 id="rightmost-ish-the-only-useful-ip-you-can-trust">
&lt;a class="heading-anchor" href="#rightmost-ish-the-only-useful-ip-you-can-trust">
####
&lt;/a>
Rightmost-ish: the only useful IP you can trust
&lt;/h4>
&lt;p>If your server is directly connected to the internet, the XFF header cannot be trusted, period. Use the &lt;code>RemoteAddr&lt;/code>.&lt;/p>
&lt;p>If your server is behind one or more reverse proxies and not directly accessible from the internet, you need to know either the IP addresses of those reverse proxies or the number of them that the request will pass through. We&amp;rsquo;ll call these the &amp;ldquo;trusted proxy IPs&amp;rdquo; and &amp;ldquo;trusted proxy count&amp;rdquo;. (Using &amp;ldquo;trusted proxy IPs&amp;rdquo; is preferable, for reasons described in the &lt;a href="#network-architecture-changes">&amp;ldquo;network architecture changes&amp;rdquo; section&lt;/a>.)&lt;/p>
&lt;p>The trusted proxy IPs or trusted proxy count will tell you how far from the right of the XFF header you need to check before you find the first IP that doesn&amp;rsquo;t belong to one of your reverse proxies. This IP was added by your first trusted proxy and is therefore the only IP you can trust. Use it.&lt;/p>
&lt;p>(Notice that I&amp;rsquo;m not saying &amp;ldquo;valid, non-private IP&amp;rdquo; here. It is tempting to do so, just to be extra safe, and I won&amp;rsquo;t blame you if you do, but if you can&amp;rsquo;t trust your own reverse proxy to add the proper IP, then you have a bigger problem.)&lt;/p>
&lt;p>Again, if you&amp;rsquo;re behind one or more reverse proxies and there&amp;rsquo;s no XFF header, you need to immediately figure out how people are connecting to your server directly.&lt;/p>
&lt;h5 id="tentative-variation-rightmost-non-private-ip">
&lt;a class="heading-anchor" href="#tentative-variation-rightmost-non-private-ip">
#####
&lt;/a>
Tentative variation: rightmost non-private IP
&lt;/h5>
&lt;p>If all of your reverse proxies are in the same private IP space as your server, I &lt;em>think&lt;/em> it&amp;rsquo;s okay to use the rightmost non-private IP rather than using &amp;ldquo;trusted proxy IPs&amp;rdquo; or &amp;ldquo;trusted proxy count&amp;rdquo;. This is equivalent to adding all private IP ranges to your &amp;ldquo;trusted proxy IPs&amp;rdquo; list.&lt;/p>
&lt;p>An example where this &lt;em>doesn&amp;rsquo;t&lt;/em> work is if you&amp;rsquo;re behind an external reverse proxy service, like Cloudflare &amp;ndash; it&amp;rsquo;s not in your private address space.&lt;/p>
&lt;h2 id="falling-into-those-pits">
&lt;a class="heading-anchor" href="#falling-into-those-pits">
##
&lt;/a>
Falling into those pits
&lt;/h2>
&lt;p>Let&amp;rsquo;s look at real-world examples!&lt;/p>
&lt;p>Warning: I got a little carried away here. I was only intending to look at a couple of projects that I was familiar with, but the hit-rate of dangerous-use-of-leftmost was so high that I just kept searching. (And there were some interesting and educational aspects even when it was done right.)&lt;/p>
&lt;p>(If a tool or service isn&amp;rsquo;t mentioned here, it&amp;rsquo;s because I either didn&amp;rsquo;t look at it or couldn&amp;rsquo;t find enough information about it. I included all successes as well as failures.)&lt;/p>
&lt;h3 id="cloudflare-nginx-apache">
&lt;a class="heading-anchor" href="#cloudflare-nginx-apache">
###
&lt;/a>
Cloudflare, Nginx, Apache
&lt;/h3>
&lt;p>Let&amp;rsquo;s start with some good news.&lt;/p>
&lt;p>&lt;a href="https://support.cloudflare.com/hc/en-us/articles/206776727-Understanding-the-True-Client-IP-Header">Cloudflare adds&lt;/a> the &lt;code>CF-Connecting-IP&lt;/code> header to all requests that pass through it; it adds &lt;code>True-Client-IP&lt;/code> as a synonym for Enterprise users who require backwards compatibility. The value for these headers is a single IP address. The &lt;a href="https://developers.cloudflare.com/fundamentals/get-started/http-request-headers/">fullest description&lt;/a> of these headers that I could find makes it &lt;em>sound&lt;/em> like they are just using the leftmost XFF IP, but the example was sufficiently incomplete that I tried it out myself. Happily, it looks like they&amp;rsquo;re actually using the rightmost-ish.&lt;/p>
&lt;p>Nginx offers a not-enabled-by-default module that &lt;a href="https://nginx.org/en/docs/http/ngx_http_realip_module.html">adds the &lt;code>X-Real-IP&lt;/code> header&lt;/a>. This is also a single IP. When properly and fully configured&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>, it also uses the rightmost IP that isn&amp;rsquo;t on the &amp;ldquo;trusted&amp;rdquo; list. So, the rightmost-ish IP. Also good.&lt;/p>
&lt;p>Similarly, when configured to look at &lt;code>X-Forwarded-For&lt;/code>, Apache&amp;rsquo;s &lt;a href="https://httpd.apache.org/docs/trunk/mod/mod_remoteip.html">mod_remoteip&lt;/a> picks the rightmost untrusted IP to set into &lt;code>REMOTE_ADDR&lt;/code>.&lt;/p>
&lt;h3 id="akamai">
&lt;a class="heading-anchor" href="#akamai">
###
&lt;/a>
Akamai
&lt;/h3>
&lt;p>Akamai does very wrong things, but at least warns about it. Here is &lt;a href="https://community.akamai.com/customers/s/article/Difference-Between-Akamai-True-Client-IP-header-and-Default-X-Forwarded-For">the documentation&lt;/a> about how it handles &lt;code>X-Forwarded-For&lt;/code> and &lt;code>True-Client-IP&lt;/code> (original emphasis):&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>X-Forwarded-For&lt;/code> header is the default header proxies use to report the end user IP that is requesting the content. However, this header is often overwritten by other proxies and is also overwritten by Akamai parent servers and thus are not very reliable.&lt;/p>
&lt;p>The &lt;code>True-Client-IP&lt;/code> header sent by Akamai does not get overwritten by proxy or Akamai servers and will contain the IP of the client when sending the request to the origin.&lt;/p>
&lt;p>&lt;code>True-Client-IP&lt;/code> is a self provisioned feature enabled in the Property Manager.&lt;/p>
&lt;p>&lt;em>Note that if the &lt;code>True-Client-IP&lt;/code> header is already present in the request from the client it will not be overwritten or sent twice. It is not a security feature.&lt;/em>&lt;/p>
&lt;p>The connecting IP is appended to &lt;code>X-Forwarded-For&lt;/code> header by proxy server and thus it can contain multiple IPs in the list with comma as separator. &lt;code>True-Client-IP&lt;/code> contains only one IP. If the the end user uses proxy server to connect to Akamai edge server, &lt;code>True-Client-IP&lt;/code> is the first IP from in &lt;code>X-Forwarded-For&lt;/code> header. If the end user connects to Akamai edge server directly, &lt;code>True-Client-IP&lt;/code> is the connecting public IP seen by Akamai.&lt;/p>
&lt;/blockquote>
&lt;p>The relevant bits are &amp;ldquo;&lt;code>True-Client-IP&lt;/code> is the first IP from in &lt;code>X-Forwarded-For&lt;/code> header&amp;rdquo; and &amp;ldquo;if the True-Client-IP header is already present in the request from the client it will not be overwritten&amp;rdquo;. So &lt;code>True-Client-IP&lt;/code> is either the leftmost XFF IP or keeps the original value spoofed by the client. Just the worst possible thing.&lt;/p>
&lt;p>However, there is also the sentence &amp;ldquo;It is not a security feature.&amp;rdquo; Well, that&amp;rsquo;s certainly true. Does that warning make it okay? What&amp;rsquo;s the chance that there aren&amp;rsquo;t a ton of Akamai users out using &lt;code>True-Client-IP&lt;/code> for security-related purposes?&lt;/p>
&lt;p>(I&amp;rsquo;m not sure how to interpret the above when it says that the XFF header is &amp;ldquo;overwritten by Akamai parent servers&amp;rdquo;. Does it mean &amp;ldquo;appended to&amp;rdquo; when it says &amp;ldquo;overwritten&amp;rdquo;? Or is Akamai actually blowing away the existing header value? That would be against the spirit of XFF.)&lt;/p>
&lt;h3 id="fastly">
&lt;a class="heading-anchor" href="#fastly">
###
&lt;/a>
Fastly
&lt;/h3>
&lt;p>Fastly adds the &lt;a href="https://developer.fastly.com/reference/http/http-headers/Fastly-Client-IP/">&lt;code>Fastly-Client-IP&lt;/code>&lt;/a> header with a single IP value. I &lt;em>think&lt;/em> it&amp;rsquo;s using the rightmost-ish XFF IP:&lt;/p>
&lt;blockquote>
&lt;p>Essentially, &lt;code>Fastly-Client-IP&lt;/code> is the non-Fastly thing that is making the request to Fastly.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>However&lt;/em>:&lt;/p>
&lt;blockquote>
&lt;p>The value is not protected from modification at the edge of the Fastly network, so if a client sets this header themselves, we will use it. If you want to prevent this [you need to do some additional configuration].&lt;/p>
&lt;/blockquote>
&lt;p>So, by default &lt;code>Fastly-Client-IP&lt;/code> is trivially spoofable. Again, it seems highly likely that there are a lot of people using its default behaviour for security-related purposes and making themselves vulnerable to attack.&lt;/p>
&lt;h3 id="azure">
&lt;a class="heading-anchor" href="#azure">
###
&lt;/a>
Azure
&lt;/h3>
&lt;p>Azure Front Door adds the &lt;code>X-Azure-ClientIP&lt;/code> and &lt;code>X-Azure-SocketIP&lt;/code> headers. They are &lt;a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-http-headers-protocol">described like so&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>X-Azure-ClientIP&lt;/code>: Represents the client IP address associated with the request being processed. For example, a request coming from a proxy might add the &lt;code>X-Forwarded-For&lt;/code> header to indicate the IP address of the original caller.&lt;/p>
&lt;p>&lt;code>X-Azure-SocketIP&lt;/code>: Represents the socket IP address associated with the TCP connection that the current request originated from. A request&amp;rsquo;s client IP address might not be equal to its socket IP address because the client IP can be arbitrarily overwritten by a user.&lt;/p>
&lt;/blockquote>
&lt;p>So, &lt;code>X-Azure-ClientIP&lt;/code> is the leftmost-ish XFF IP and &lt;code>X-Azure-SocketIP&lt;/code> is the rightmost-ish.&lt;/p>
&lt;p>That&amp;rsquo;s reasonably good, but I think it could be a lot clearer. The only warning about &lt;code>X-Azure-ClientIP&lt;/code> is a subtle hint in the description of the &lt;em>other&lt;/em> header. I also hand-wavingly feel that the name of the less-secure header is more appealing than the more-secure one, and is probably leading many people into the wrong choice.&lt;/p>
&lt;h3 id="go-chichi">
&lt;a class="heading-anchor" href="#go-chichi">
###
&lt;/a>
go-chi/chi
&lt;/h3>
&lt;p>Chi is a Go HTTP router and provides a &lt;a href="https://github.com/go-chi/chi/blob/c97bc988430d623a14f50b7019fb40529036a35a/middleware/realip.go#L42-L55">RealIP middleware&lt;/a> and a &lt;a href="https://github.com/go-chi/httprate/blob/463924d478ea0c19de7265b97371a59a7ebf5fdd/httprate.go#L28-L37">rate limiter&lt;/a>. The RealIP middleware has this comment:&lt;/p>
&lt;blockquote>
&lt;p>You should only use this middleware if you can trust the headers passed to you (in particular, the two [three, actually] headers this middleware uses), for example because you have placed a reverse proxy like HAProxy or nginx in front of Chi. If your reverse proxies are configured to pass along arbitrary header values from the client, or if you use this middleware without a reverse proxy, malicious clients will be able to make you very sad (or, depending on how you&amp;rsquo;re using RemoteAddr, vulnerable to an attack of some sort).&lt;/p>
&lt;/blockquote>
&lt;p>Which is a pretty good warning, right? Almost.&lt;/p>
&lt;p>Let&amp;rsquo;s take this opportunity to talk about abusing &lt;code>X-Real-IP&lt;/code>, &lt;code>True-Client-IP&lt;/code>, etc. For example, AWS ALB &amp;ldquo;[passes] along arbitrary header values from the client&amp;rdquo; and, indeed, if you don&amp;rsquo;t realize that you will end up &amp;ldquo;very sad&amp;rdquo;. Because a request like this&amp;hellip;&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X POST https://my.load.balanced.domain/login -H &amp;#34;X-Forwarded-For:1.1.1.1&amp;#34; -H &amp;#34;X-Real-IP:2.2.2.2&amp;#34; -H &amp;#34;True-Client-IP:3.3.3.3&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;results in your server getting these headers:&lt;/p>
&lt;pre tabindex="0">&lt;code>X-Forwarded-For: 1.1.1.1, &amp;lt;actual client IP&amp;gt;
X-Real-IP: 2.2.2.2
True-Client-IP: 3.3.3.3
&lt;/code>&lt;/pre>&lt;p>&lt;code>chi.middleware.RealIP&lt;/code>&amp;rsquo;s logic goes like: &amp;ldquo;use the &lt;code>True-Client-IP&lt;/code>; if that doesn&amp;rsquo;t exist, use the &lt;code>X-Real-IP&lt;/code>; if that doesn&amp;rsquo;t exist, use &lt;code>X-Forwarded-For&lt;/code>&amp;rdquo;. So it falls victim to header spoofing.&lt;/p>
&lt;p>But, as we&amp;rsquo;ve learned, the &lt;code>chi.middleware.RealIP&lt;/code> warning also isn&amp;rsquo;t good enough when it comes to &lt;code>X-Forwarded-For&lt;/code> &lt;em>because you can never, ever trust all of it&lt;/em>&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>. In the &lt;code>RealIP&lt;/code> code, the logic I just paraphrased actually ends with &amp;ldquo;use the leftmost XFF IP address&amp;rdquo;. And we&amp;rsquo;re now suitably scared of using the leftmost XFF IP. (It also does not check that the leftmost &amp;ldquo;IP&amp;rdquo; is valid and non-private.)&lt;/p>
&lt;p>So &lt;code>chi.middleware.RealIP&lt;/code> falls firmly into the &amp;ldquo;only safe for non-security use&amp;rdquo; category. And you &lt;em>must&lt;/em> be aware of its header preference order and what your reverse proxy does or doesn&amp;rsquo;t set and let through. In short, it&amp;rsquo;s hard to recommend it.&lt;/p>
&lt;p>Chi&amp;rsquo;s rate limiter has identical logic for obtaining the IP address and doesn&amp;rsquo;t have the same warning. So that&amp;rsquo;s bad, for the reasons we&amp;rsquo;ve discussed &amp;ndash; the non-XFF headers could be spoofed, the XFF header could be spoofed, the IP can be garbage, the rate limiter could be bypassed, your memory could be exploded. The best way to use it is to not use its &amp;ldquo;real IP&amp;rdquo; logic and instead write your own &amp;ldquo;GetTrustworthyClientIP(request)&amp;rdquo; and pass that to its &lt;a href="https://github.com/go-chi/httprate/blob/463924d478ea0c19de7265b97371a59a7ebf5fdd/README.md?plain=1#L61">&amp;ldquo;rate limit by arbitrary keys&amp;rdquo;&lt;/a> feature.&lt;/p>
&lt;p>Both RealIP and httprate are both using Go&amp;rsquo;s &lt;code>http.Header.Get&lt;/code> to get the XFF header. As &lt;a href="#multiple-headers">discussed above&lt;/a>, this means that switching to taking the rightmost-ish IP wouldn&amp;rsquo;t be sufficient, as an attacker could force the wrong header to be used.&lt;/p>
&lt;p>Chi&amp;rsquo;s rate limiter is also the one instance I found of the XFF list being split by comma-space instead of just comma. I think that&amp;rsquo;s wrong.&lt;/p>
&lt;p>[2022-03-03: Disclosed to maintainer via email. 2022-03-04: Maintainer requested that I &lt;a href="https://github.com/go-chi/chi/issues/711">make an issue&lt;/a>.]&lt;/p>
&lt;h3 id="didiptollbooth">
&lt;a class="heading-anchor" href="#didiptollbooth">
###
&lt;/a>
didip/tollbooth
&lt;/h3>
&lt;p>The &lt;a href="https://github.com/didip/tollbooth">Tollbooth HTTP rate limiter&lt;/a> is better, but you still need to be aware of what it&amp;rsquo;s doing in order to use it properly.&lt;/p>
&lt;p>Its &lt;a href="https://github.com/didip/tollbooth/blob/d2340101f440011dd593e8b6787f5b1a437c2516/README.md#L68-L70">README&lt;/a> says the order in which it looks for the &amp;ldquo;real&amp;rdquo; client IP address is&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>By default it&amp;rsquo;s: &amp;ldquo;RemoteAddr&amp;rdquo;, &amp;ldquo;X-Forwarded-For&amp;rdquo;, &amp;ldquo;X-Real-IP&amp;rdquo;&lt;br>
If your application is behind a proxy, set &amp;ldquo;X-Forwarded-For&amp;rdquo; first.&lt;/p>
&lt;/blockquote>
&lt;p>Strangely, that default order isn&amp;rsquo;t actually the default everywhere. If you call &lt;a href="https://github.com/didip/tollbooth/blob/e1a6b41b35e95810a7dce638996b15f136424ed2/limiter/limiter.go#L21">&lt;code>limiter.New()&lt;/code>&lt;/a> that &lt;em>is&lt;/em> the default. But if you call &lt;a href="https://github.com/didip/tollbooth/blob/2e5b779d07015e6a4386c6cc1a36612c17d54eb5/tollbooth.go#L33">&lt;code>tollbooth.NewLimiter()&lt;/code>&lt;/a> &amp;ndash; &amp;ldquo;a convenience function to limiter.New&amp;rdquo; &amp;ndash; the order is &lt;code>&amp;quot;X-Forwarded-For&amp;quot;, &amp;quot;X-Real-IP&amp;quot;, &amp;quot;RemoteAddr&amp;quot;&lt;/code>. Which is an important difference!&lt;/p>
&lt;p>It doesn&amp;rsquo;t make clear that it doesn&amp;rsquo;t support &lt;code>CF-Connecting-IP&lt;/code>, &lt;code>True-Client-IP&lt;/code>, or any other arbitrary header &amp;ndash; &lt;a href="https://github.com/didip/tollbooth/blob/2e5b779d07015e6a4386c6cc1a36612c17d54eb5/libstring/libstring.go#L20-L56">it just silently skips them&lt;/a> if you add them (returning empty string, leading to over-limiting).&lt;/p>
&lt;p>This is a general problem with Tollbooth &amp;ndash; it &amp;ldquo;fails open&amp;rdquo;: if it can&amp;rsquo;t find an IP to use &lt;a href="https://github.com/didip/tollbooth/blob/2e5b779d07015e6a4386c6cc1a36612c17d54eb5/tollbooth.go#L51-L55">it doesn&amp;rsquo;t rate limit&lt;/a>. So if the user of the library misconfigures it (by trying to use an unsupported header, or even making a letter-case mistake in a supported on), it won&amp;rsquo;t rate limit at all and will give no indication of this. In a &lt;a href="https://github.com/didip/tollbooth/pull/99#issuecomment-1059328777">comment on the PR to fix this&lt;/a> I give my opinion on how it should be have, but this is a pretty tricky problem.&lt;/p>
&lt;p>Tollbooth also suffers from the &lt;a href="#multiple-headers">&amp;ldquo;multiple headers&amp;rdquo;&lt;/a> problem &amp;ndash; &lt;a href="https://github.com/didip/tollbooth/blob/2e5b779d07015e6a4386c6cc1a36612c17d54eb5/libstring/libstring.go#L23">it uses&lt;/a> Go&amp;rsquo;s &lt;code>r.Header.Get&lt;/code>. So, even though it&amp;rsquo;s counting from the rightmost, which is good, it&amp;rsquo;s doing so with the first header, which is bad.&lt;/p>
&lt;p>Speaking of counting from the rightmost&amp;hellip; If Tollbooth is configured to count very far from the right (like, &lt;code>lmt.SetForwardedForIndexFromBehind(1000)&lt;/code>), then it will effectively take the leftmost IP (it &lt;a href="https://github.com/didip/tollbooth/blob/2e5b779d07015e6a4386c6cc1a36612c17d54eb5/libstring/libstring.go#L42-L45">uses a minimum index of zero&lt;/a>). In that case, it should be doing &lt;a href="#leftmost-ish-the-closest-to-the-real-ip-but-utterly-untrustworthy">&amp;ldquo;leftmost-ish&amp;rdquo;&lt;/a> IP validation.&lt;/p>
&lt;p>There are two more things that bug me about tollbooth&amp;rsquo;s design. The first is that the ostensible default order has Go&amp;rsquo;s &lt;code>http.Request.RemoteAddr&lt;/code> first. My understanding is that that field should never be empty (for an HTTP server, rather than client), so the rest of the list is guaranteed to be ignored. So why have a list? Also, if your server is behind a reverse proxy, &lt;code>RemoteAddr&lt;/code> will be your proxy&amp;rsquo;s IP, which is useless.&lt;/p>
&lt;p>The second thing that bugs me is going to get its very own section&amp;hellip;&lt;/p>
&lt;p>[2022-03-03: Disclosed to maintainer via email. 2022-03-04: Maintainer &lt;a href="https://github.com/didip/tollbooth/pull/99">created a PR&lt;/a> to fix it. Ongoing discussion there.]&lt;/p>
&lt;h3 id="a-default-list-of-places-to-look-for-the-client-ip-makes-no-sense">
&lt;a class="heading-anchor" href="#a-default-list-of-places-to-look-for-the-client-ip-makes-no-sense">
###
&lt;/a>
A default list of places to look for the client IP makes no sense
&lt;/h3>
&lt;p>Where you should be looking for the &amp;ldquo;real&amp;rdquo; client IP is very specific to your network architecture and use case. A default configuration encourages blind, naïve use and will result in incorrect and potentially dangerous behaviour more often than not.&lt;/p>
&lt;p>If you&amp;rsquo;re using Cloudflare you want &lt;code>CF-Connecting-IP&lt;/code>. If you&amp;rsquo;re using &lt;code>ngx_http_realip_module&lt;/code>, you want &lt;code>X-Real-IP&lt;/code>. If you&amp;rsquo;re behind AWS ALB you want the rightmost-ish &lt;code>X-Forwarded-For&lt;/code> IP. If you&amp;rsquo;re directly connected to the internet, you want &lt;code>RemoteAddr&lt;/code> (or equivalent). And so on.&lt;/p>
&lt;p>There&amp;rsquo;s &lt;em>never&lt;/em> a time when you&amp;rsquo;re okay with just falling back across a big list of header values that have nothing to do with your network architecture. That&amp;rsquo;s going to bite you.&lt;/p>
&lt;p>Even Tollbooth defaulting to using the rightmost XFF IP can be problematic. If your server is behind two layers of reverse proxies, then you&amp;rsquo;ll be looking at the IP of your first proxy instead of the client&amp;rsquo;s IP.&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup> (What will probably happen is that you will rate-limit your proxy almost immediately, nothing gets through, and then you fix your config. But it still would have been better to be forced to think about the correct configuration in the first place.)&lt;/p>
&lt;p>So, even though I know it&amp;rsquo;s not very user friendly, I don&amp;rsquo;t think that rate-limiting libraries should have any default at all, and instead should &lt;em>require&lt;/em> explicit configuration.&lt;/p>
&lt;h3 id="ululelimiter">
&lt;a class="heading-anchor" href="#ululelimiter">
###
&lt;/a>
ulule/limiter
&lt;/h3>
&lt;p>Another Go rate limiter middleware. By default it doesn&amp;rsquo;t look at the XFF header, but if enabled it &lt;a href="https://github.com/ulule/limiter/blob/9ba030af6009ca2bc9a285dbd815bc7a76de724a/network.go#L31-L56">uses the leftmost XFF IP&lt;/a>. The option is called &amp;ldquo;TrustForwardHeader&amp;rdquo;, but &lt;em>you can never trust the XFF header&lt;/em>. So it falls victim to rate limit escape, etc.&lt;/p>
&lt;p>It also uses Go&amp;rsquo;s &lt;code>http.Header.Get&lt;/code>, so if it switches to rightmost-ish it will need to change how it gets the XFF header.&lt;/p>
&lt;p>When &lt;code>TrustForwardHeader&lt;/code> is true it first looks for XFF and then falls through to &lt;code>X-Real-IP&lt;/code> and finally uses &lt;code>RemoteAddr&lt;/code>. But as we just saw, &amp;ldquo;a default list of places to look for the client IP makes no sense&amp;rdquo;.&lt;/p>
&lt;p>It returns &lt;code>net.ParseIP(ip)&lt;/code> rather than just the raw string. This seems good at first, but &lt;code>net.ParseIP&lt;/code> &lt;a href="https://pkg.go.dev/net#ParseIP">returns nil&lt;/a> if the parse fails. So in the case of a garbage string, ulule/limiter doesn&amp;rsquo;t check for the failure, returns nil, and then, &lt;a href="https://go.dev/play/p/8bgVfOy4Lkw">as far as I can tell&lt;/a>, uses &lt;code>&amp;quot;&amp;lt;nil&amp;gt;&amp;quot;&lt;/code> as the &amp;ldquo;IP&amp;rdquo; key. (I&amp;rsquo;m surprised that it doesn&amp;rsquo;t panic, but I don&amp;rsquo;t think it does.) The way this logic works makes memory exhaustion more difficult, but it might be achievable using valid IPv6 addresses.&lt;/p>
&lt;p>[2022-03-04: Disclosed to maintainer via email. 2022-03-05: &lt;a href="https://github.com/ulule/limiter/pull/181">PR&lt;/a> has been created with fixes (mostly documentation warnings). It&amp;rsquo;s public, so I&amp;rsquo;m un-redacting this.]&lt;/p>
&lt;h3 id="sethvargogo-limiter">
&lt;a class="heading-anchor" href="#sethvargogo-limiter">
###
&lt;/a>
sethvargo/go-limiter
&lt;/h3>
&lt;p>This is yet another Go rate limiter middleware. If its &lt;code>httplimit.IPKeyFunc&lt;/code> is configured to look at the &lt;code>X-Forwarded-For&lt;/code> header (which is given as an example in its comment), it will &lt;a href="https://github.com/sethvargo/go-limiter/blob/d0c1f4df450eb46623c6f3afe9f675d40da52cf9/httplimit/middleware.go#L40-L59">&lt;em>use the whole header&lt;/em>&lt;/a> as the rate limit key. That&amp;rsquo;s almost worse than taking the leftmost IP.&lt;/p>
&lt;p>The way to work around this would be to avoid its &amp;ldquo;real IP&amp;rdquo; logic and create your own &lt;a href="https://github.com/sethvargo/go-limiter/blob/67fff5ee8978ea6218af4d1354bb842096a5b543/httplimit/middleware.go#L38">&lt;code>KeyFunc&lt;/code>&lt;/a> that extracts the correct IP for your network architecture.&lt;/p>
&lt;p>If the library can&amp;rsquo;t find the configured header(s), it falls through to &lt;code>RemoteAddr&lt;/code>. But, again, I don&amp;rsquo;t think default fallbacks are good.&lt;/p>
&lt;p>The library also uses Go&amp;rsquo;s &lt;code>http.Header.Get()&lt;/code>.&lt;/p>
&lt;p>[2022-03-04: Disclosed to maintainer via email. 2022-03-05: Maintainer indicated by email that I could un-redact this.]&lt;/p>
&lt;!--redact-start-->
&lt;h3 id="redacted">
&lt;a class="heading-anchor" href="#redacted">
###
&lt;/a>
[REDACTED]
&lt;/h3>
&lt;p>Pending disclosure&lt;/p>
&lt;!--redact-end-->
&lt;h3 id="lets-encrypt">
&lt;a class="heading-anchor" href="#lets-encrypt">
###
&lt;/a>
Let&amp;rsquo;s Encrypt
&lt;/h3>
&lt;p>It &lt;a href="https://github.com/letsencrypt/boulder/blob/ab79f96d7bfc94be7d009e2aa2007c51ddf16f31/web/context.go#L95">looks like&lt;/a> Let&amp;rsquo;s Encrypt is using Nginx with &lt;code>X-Real-IP&lt;/code>. If it&amp;rsquo;s configuration is good (I don&amp;rsquo;t think the config files are in GitHub), then it should be using rightmost-ish.&lt;/p>
&lt;!--redact-start-->
&lt;h3 id="redacted-1">
&lt;a class="heading-anchor" href="#redacted-1">
###
&lt;/a>
[REDACTED]
&lt;/h3>
&lt;p>Pending disclosure&lt;/p>
&lt;!--redact-end-->
&lt;h3 id="jetty">
&lt;a class="heading-anchor" href="#jetty">
###
&lt;/a>
Jetty
&lt;/h3>
&lt;p>It looks like the Jetty web server &lt;a href="https://github.com/eclipse/jetty.project/blob/cb127793e5d8b5c5730b964392a9a905ba49191d/jetty-server/src/main/java/org/eclipse/jetty/server/ForwardedRequestCustomizer.java#L814-L821">uses the leftmost&lt;/a> XFF IP address. I haven&amp;rsquo;t dug far enough in to see what it&amp;rsquo;s used for (or how it&amp;rsquo;s exposed), but that&amp;rsquo;s a dangerous start.&lt;/p>
&lt;h3 id="express">
&lt;a class="heading-anchor" href="#express">
###
&lt;/a>
Express
&lt;/h3>
&lt;p>Express is a NodeJS web framework. The default configuration ignores the XFF header, but it&amp;rsquo;s possible to &lt;a href="https://expressjs.com/en/guide/behind-proxies.html">configure it&lt;/a> to use the leftmost or a rightmost-ish XFF IP. The setting that uses the leftmost has this warning:&lt;/p>
&lt;blockquote>
&lt;p>When setting to true, it is important to ensure that the last reverse proxy trusted is removing/overwriting all of the following HTTP headers: X-Forwarded-For, X-Forwarded-Host, and X-Forwarded-Proto otherwise it may be possible for the client to provide any value.&lt;/p>
&lt;/blockquote>
&lt;p>So that&amp;rsquo;s pretty good. (But still a footgun that I&amp;rsquo;m sure someone will fall victim to.)&lt;/p>
&lt;h3 id="traefik">
&lt;a class="heading-anchor" href="#traefik">
###
&lt;/a>
Traefik
&lt;/h3>
&lt;p>Traefik is a &amp;ldquo;cloud native network stack&amp;rdquo;. Its &lt;a href="https://doc.traefik.io/traefik/middlewares/http/ratelimit/#ipstrategydepth">rate limiter&lt;/a> is configured to use the &amp;ldquo;trusted proxy count&amp;rdquo; version of rightmost-ish. So that&amp;rsquo;s good.&lt;/p>
&lt;h3 id="phplist">
&lt;a class="heading-anchor" href="#phplist">
###
&lt;/a>
phpList
&lt;/h3>
&lt;p>phpList is an &amp;ldquo;open source newsletter and email marketing software&amp;rdquo;. It &lt;a href="https://github.com/phpList/phplist3/blob/927ce341068d16f35566eaaddf2b9ace639885a4/public_html/lists/admin/lib.php#L2423-L2445">uses the leftmost XFF IP&lt;/a>. I can&amp;rsquo;t quite tell what it&amp;rsquo;s used for, but it&amp;rsquo;s &lt;a href="https://github.com/phpList/phplist3/blob/927ce341068d16f35566eaaddf2b9ace639885a4/public_html/lists/admin/index.php#L296">something surrounding login&lt;/a>.&lt;/p>
&lt;h3 id="iis">
&lt;a class="heading-anchor" href="#iis">
###
&lt;/a>
IIS
&lt;/h3>
&lt;p>I could find anything to suggest that Microsoft IIS processes the XFF header, but an official support blog post entitled &lt;a href="https://techcommunity.microsoft.com/t5/iis-support-blog/how-to-use-x-forwarded-for-header-to-log-actual-client-ip/ba-p/873115">&amp;ldquo;How to use X-Forwarded-For header to log actual client IP address?&amp;rdquo;&lt;/a> says:&lt;/p>
&lt;blockquote>
&lt;p>If you see multiple IP addresses in X-Forwarded-For column, it means the client went through more than one network device. Each network device adds their own IP to the end of the value. The left-most IP address is the actual client IP address. Others belong to network devices the client go through.&lt;/p>
&lt;/blockquote>
&lt;p>Which is a &lt;em>woefully incomplete&lt;/em> statement. I fear for the 97,641 people who read that post.&lt;/p>
&lt;h3 id="tor">
&lt;a class="heading-anchor" href="#tor">
###
&lt;/a>
Tor
&lt;/h3>
&lt;p>Tor is an anonymity network. They have &lt;a href="https://gitlab.torproject.org/tpo/anti-censorship/rdsys/-/issues/80">recently realized&lt;/a> that they have a control server that is both directly connected to the internet &lt;em>and&lt;/em> behind a reverse proxy and are using XFF to give them trustworthy IPs, so they&amp;rsquo;re vulnerable to spoofing. It looks like they&amp;rsquo;re working towards limiting the public-ness of the interface, or doing better verification of CDN connections, or both.&lt;/p>
&lt;p>(Because I looked into it, I&amp;rsquo;ll mention that it looks like they&amp;rsquo;re &lt;em>not&lt;/em> falling victim to the &lt;a href="#multiple-headers">&amp;ldquo;multiple headers&amp;rdquo;&lt;/a> pitfall. It looks like they use Twisted and call &lt;code>request.getHeader&lt;/code> to get the XFF value. The &lt;a href="https://github.com/twisted/twisted/blob/ebb2d360070e468981377b917e3a728ff4e6c7f6/src/twisted/web/http.py#L1068">Twisted source&lt;/a> for that method indicates that it returns the &lt;em>last&lt;/em> matching header. That could cause problems if you need the Nth-from-the-right header, but I think it&amp;rsquo;s fine in this case.)&lt;/p>
&lt;h2 id="advanced-and-theoretical-pitfalls-and-attacks">
&lt;a class="heading-anchor" href="#advanced-and-theoretical-pitfalls-and-attacks">
##
&lt;/a>
Advanced and theoretical pitfalls and attacks
&lt;/h2>
&lt;p>I&amp;rsquo;ve talked a lot about two attacks on rate limiters: avoiding being limited and exhausting server memory. I&amp;rsquo;ve done this because rate limiters are what led me to this topic and because causing a map of IPs to fill memory was an obvious danger in many implementations.&lt;/p>
&lt;p>But rate limiters are only one &amp;ldquo;security-related&amp;rdquo; use of &lt;code>X-Forwarded-For&lt;/code>, and there are more, cooler possibilities for badness! They&amp;rsquo;re harder to find or reproduce, but they should be fun to speculate on&amp;hellip;&lt;/p>
&lt;h3 id="server-behind-reverse-proxy-_and_-directly-connectable">
&lt;a class="heading-anchor" href="#server-behind-reverse-proxy-_and_-directly-connectable">
###
&lt;/a>
Server behind reverse proxy &lt;em>and&lt;/em> directly connectable
&lt;/h3>
&lt;p>This was briefly mentioned in the &amp;ldquo;algorithms&amp;rdquo; section, but is worth repeating.&lt;/p>
&lt;p>Generally speaking, if your server is behind one or more reverse proxies, there are one or more rightmost IPs in the XFF header that you can trust. The &amp;ldquo;rightmost-ish&amp;rdquo; algorithm is predicated on that. But if your server can &lt;em>also&lt;/em> be connected to directly from the internet, that is no longer true.&lt;/p>
&lt;p>With some experimentation, an attacker can craft an XFF header to look exactly like the one you expect from your reverse proxy:&lt;/p>
&lt;ol>
&lt;li>Attacker gets her IP limited/blocked by your server.&lt;/li>
&lt;li>Attacker crafts XFF header so that the rightmost of it has different IPs in the private space, and different counts of those IPs.&lt;/li>
&lt;li>Continue until the limit/block unexpectedly disappears.&lt;/li>
&lt;/ol>
&lt;p>Now you&amp;rsquo;re using an untrusted XFF IP and don&amp;rsquo;t realize it. Rate limiter escape, memory exhaustion, etc.&lt;/p>
&lt;p>One way to mitigate this is to check the &lt;code>RemoteAddr&lt;/code> to make sure it belongs to your reverse proxy &lt;em>before&lt;/em> you try to parse the XFF header.&lt;/p>
&lt;h3 id="many-trusted-reverse-proxy-ips">
&lt;a class="heading-anchor" href="#many-trusted-reverse-proxy-ips">
###
&lt;/a>
Many trusted reverse proxy IPs
&lt;/h3>
&lt;p>This is more of a &amp;ldquo;difficulty&amp;rdquo; than a pitfall or attack, but this is as good a place as any to fit it in.&lt;/p>
&lt;p>In the rightmost-ish algorithm, the &amp;ldquo;trusted proxy IPs&amp;rdquo; list might be very large and might involve ranges rather than specific IPs. For example:&lt;/p>
&lt;ul>
&lt;li>There might be a pool of reverse proxies that feed into your server.&lt;/li>
&lt;li>That pool might scale out with load. So your trusted IPs will have to include whatever range that pool uses.&lt;/li>
&lt;li>You might use a large external service, like Cloudflare. So you&amp;rsquo;ll need to &amp;ldquo;trust&amp;rdquo; all of their &lt;a href="https://www.cloudflare.com/ips">very large set of IPs&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Especially in that last case &amp;ndash; and &lt;em>especially&lt;/em> if you&amp;rsquo;re accepting IPv6 connections &amp;ndash; you can&amp;rsquo;t just have a big list of single IPs that you check. You&amp;rsquo;ll need to check a list of ranges.&lt;/p>
&lt;h3 id="network-architecture-changes">
&lt;a class="heading-anchor" href="#network-architecture-changes">
###
&lt;/a>
Network architecture changes
&lt;/h3>
&lt;p>So, you&amp;rsquo;ve set everything up perfectly. Your configuration is exactly right and you&amp;rsquo;re picking the correct &amp;ldquo;client IP&amp;rdquo; every time. Great. It runs quietly and flawlessly for so long that you forget all about it.&lt;/p>
&lt;p>And then you change your network architecture.&lt;/p>
&lt;p>The scenarios with the less-bad result are when you&amp;rsquo;re using the rightmost-ish approach and you add a new level of reverse proxy.&lt;/p>
&lt;ul>
&lt;li>You were accepting connections directly from the internet, so you were using &lt;code>RemoteAddr&lt;/code> for rate-limiting. Then you added a load balancer. Now you&amp;rsquo;re rate-limiting your load balancer.&lt;/li>
&lt;li>You were using a single reverse proxy. You were using the rightmost XFF IP &amp;ndash; the one that gets added by that proxy &amp;ndash; for rate-limiting. Then you added another level of reverse proxy. Now you&amp;rsquo;re rate-limiting one of your reverse proxies (whichever is first in the chain).&lt;/li>
&lt;li>You had a complex setup of internal reverse proxies. You were rate-limiting by rightmost-ish XFF IP, with your whole internal IP range on the &amp;ldquo;trusted proxy&amp;rdquo; list. Then you added Cloudflare in front of it all. Now you&amp;rsquo;re rate-limiting Cloudflare.&lt;/li>
&lt;/ul>
&lt;p>Those are &amp;ldquo;less bad&amp;rdquo; because they don&amp;rsquo;t introduce security flaws, but they&amp;rsquo;re still going to result in a near-complete inability to process requests.&lt;/p>
&lt;p>The &amp;ldquo;much more bad&amp;rdquo; scenarios tend to occur when removing reverse proxy levels, and introduce vulnerabilities that you won&amp;rsquo;t notice.&lt;/p>
&lt;ul>
&lt;li>You were using a single reverse proxy. You were using the rightmost XFF IP &amp;ndash; the one that gets added by that proxy &amp;ndash; for rate-limiting. Then you decide that you don&amp;rsquo;t need that extra proxy level and instead you connect your server directly to the internet. But now no part of the XFF is trustworthy and you&amp;rsquo;re vulnerable to spoofing.&lt;/li>
&lt;li>You were using Cloudflare in front of AWS ALB and relying on its &lt;code>CF-Connecting-IP&lt;/code> header. Then you decide to save some money, drop Cloudflare, and now have requests go directly to ALB. So now you&amp;rsquo;re vulnerable to &lt;code>CF-Connecting-IP&lt;/code> spoofing.&lt;/li>
&lt;li>You were using two levels of reverse proxy in front of your server. You were using the rightmost-ish XFF IP with a &amp;ldquo;trusted proxy count&amp;rdquo; of 2 for rate-limiting &amp;ndash; so you were always taking the second-from-the-right IP. You decide to remove a level of reverse proxy. Now you&amp;rsquo;re vulnerable to spoofing because the second-from-the-right XFF IP is no longer trustable.&lt;/li>
&lt;/ul>
&lt;p>Depending on your logic, it might take an attack before you notice that you&amp;rsquo;re vulnerable.&lt;/p>
&lt;p>The takeaway here is pretty obvious &amp;ndash; &amp;ldquo;when network architecture changes, configuration that depends on that architecture also needs to change&amp;rdquo; &amp;ndash; but it can be very difficult to remember to update every dependent config file when you tweak something that &amp;ldquo;should&amp;rdquo; work and does appear to work. (Maybe there are fancy network-management tools that automatically push config changes in response to architecture changes? Would be cool.)&lt;/p>
&lt;p>The &amp;ldquo;trusted proxy count&amp;rdquo; variation of the rightmost-ish algorithm is especially brittle to adding or removing reverse proxies. The &amp;ldquo;trusted proxy count&amp;rdquo; (especially with a big internal range) or &amp;ldquo;rightmost non-private IP&amp;rdquo; variations can better cope with changing the number of internal proxies (as long as you&amp;rsquo;re not going to zero).&lt;/p>
&lt;h4 id="even-worse-_third-party_-network-architecture-changes">
&lt;a class="heading-anchor" href="#even-worse-_third-party_-network-architecture-changes">
####
&lt;/a>
Even worse: &lt;em>Third-party&lt;/em> network architecture changes
&lt;/h4>
&lt;p>Take a look at the &lt;a href="https://www.cloudflare.com/ips">Cloudflare IP list&lt;/a>. Notice down at the bottom that there have been two times where Cloudflare removed IPs from the list.&lt;/p>
&lt;p>Imagine you had those IPs on your trusted list. Imagine you didn&amp;rsquo;t realize they were removed. &lt;em>Now who owns those IPs?&lt;/em> Whoever it is can put whatever they want in the XFF, pass it on to your trusted proxy chain, and you&amp;rsquo;ll use it as the &amp;ldquo;real&amp;rdquo; IP. Rate limit escape and memory exhaustion.&lt;/p>
&lt;p>&amp;hellip;The answer to that question is that Cloudflare still owns the IPs (I &lt;a href="https://search.arin.net/rdap/?query=104.30.0.1">checked&lt;/a> &lt;a href="https://search.arin.net/rdap/?query=199.27.128.1">ARIN&lt;/a>). But the point isn&amp;rsquo;t about Cloudflare and those particular IP ranges. &lt;em>Any&lt;/em> CDN or reverse proxy service with a trusted IP list could change their list and cause problems.&lt;/p>
&lt;p>(Edit: A reader shared &lt;a href="./img/blog/cloudflare-ip-range-removal-email.png">the email Cloudflare sent&lt;/a> when they most recently changed their IP set. He pointed out that even though Cloudflare still owns the IPs, they should be considered untrusted. The email mentions that there&amp;rsquo;s &lt;a href="https://api.cloudflare.com/#cloudflare-ips-properties">an API&lt;/a> to get Cloudflare&amp;rsquo;s IPs, which is good. Anyway, my original point wasn&amp;rsquo;t just about Cloudflare, so it remains unchanged.)&lt;/p>
&lt;h3 id="x-forwarded-for-parser-mismatch">
&lt;a class="heading-anchor" href="#x-forwarded-for-parser-mismatch">
###
&lt;/a>
&lt;code>X-Forwarded-For&lt;/code> parser mismatch
&lt;/h3>
&lt;p>This is inspired by &lt;a href="https://bishopfox.com/blog/json-interoperability-vulnerabilities">JSON interoperability vulnerabilities&lt;/a>. These occur when different levels of code or architecture interpret JSON in different ways. So if the JSON parser at one level deals with, say, duplicate object keys by taking the first key and another level deals with it by taking the last key, you can have a problem. (E.g., an attacker passes a &lt;code>&amp;quot;username&amp;quot;&lt;/code> value along with a matching password, but then also passes another &lt;code>&amp;quot;username&amp;quot;&lt;/code> value. If your auth check uses the first username and the business logic uses the second, you&amp;rsquo;re going to access the wrong user data.)&lt;/p>
&lt;p>If there&amp;rsquo;s one thing that&amp;rsquo;s certainly true of the XFF header it&amp;rsquo;s that there&amp;rsquo;s an abundance of ways of &amp;ldquo;interpreting&amp;rdquo; it. Let&amp;rsquo;s recap some of them and add a fun new one:&lt;/p>
&lt;ul>
&lt;li>Which position? Leftmost? Rightmost? Nth-from-rightmost? And so on.&lt;/li>
&lt;li>What value is acceptable? Don&amp;rsquo;t validate at all? Only IPs? Only non-private IPs?&lt;/li>
&lt;li>How to split up the list of IPs? Comma? Comma-space?&lt;/li>
&lt;li>How to handle multiple XFF headers?&lt;/li>
&lt;li>New: How to handle weird characters? What if there&amp;rsquo;s a null byte? Or some other control character? What if there&amp;rsquo;s a UTF-8 sequence?&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Any&lt;/em> difference in the answers to any of those question marks can result in a mismatch between parsers.&lt;/p>
&lt;p>I wish I had a slam-dunk example scenario for this, but I don&amp;rsquo;t. Here are some hand-wavy ones:&lt;/p>
&lt;ul>
&lt;li>You block access to your service to requests from, say, Antarctica. You have a reverse proxy at one level that grabs an XFF IP and checks that. At another level, you have a reverse proxy that grabs a different XFF IP and collects geolocation statistics. You get confused about why you seem to have users connected from Antarctica. (One of them is doing it wrong, but this isn&amp;rsquo;t enough to tell you which.)&lt;/li>
&lt;li>At one reverse proxy level, you check a user&amp;rsquo;s incoming IP address against your DB to make sure it&amp;rsquo;s acceptable for that user. At another reverse proxy level, you update that DB. If there&amp;rsquo;s a mismatch, you&amp;rsquo;ll end up too permissive, too restrictive, or both.&lt;/li>
&lt;li>More generally&amp;hellip; At one reverse proxy level you use the XFF header to determine the client&amp;rsquo;s IP. Allowing the request to proceed is an attestation that the client IP is acceptable for further processing. At a later reverse proxy level, the client IP is again derived from the XFF header and treated as trusted data because it is implicitly attested to by the previous level.&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup> A difference between the two levels in XFF parsing introduces a vulnerability.&lt;/li>
&lt;/ul>
&lt;h2 id="rfc-7239-forwarded-http-extension-june-2014">
&lt;a class="heading-anchor" href="#rfc-7239-forwarded-http-extension-june-2014">
##
&lt;/a>
RFC 7239: Forwarded HTTP Extension, June 2014
&lt;/h2>
&lt;p>After considering comma-vs-comma-space and other parser mismatches, you&amp;rsquo;re probably thinking, &amp;ldquo;There should be an RFC to concretely specify this.&amp;rdquo; And there is, kind of.&lt;/p>
&lt;p>&lt;a href="https://datatracker.ietf.org/doc/html/rfc7239">RFC 7239&lt;/a> specifies the &lt;code>Forwarded&lt;/code> header. Its purpose is to replace and improve &lt;code>X-Forwarded-For&lt;/code>. The big thing it addresses is that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For">&lt;code>X-Forwarded-For&lt;/code>&lt;/a> (a list of client and proxy IP addresses), &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host">&lt;code>X-Forwarded-Host&lt;/code>&lt;/a> (the hostname requested by the client), &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Proto">&lt;code>X-Forwarded-Proto&lt;/code>&lt;/a> (the protocol used by the client; e.g., &amp;ldquo;https&amp;rdquo;), and &lt;a href="https://datatracker.ietf.org/doc/html/rfc7239#section-5.1">&lt;code>X-Forwarded-By&lt;/code>&lt;/a> (the proxy IP address) are all separate-but-related headers. It becomes very easy to for an intermediary proxy to mess up the relationship between them. To address this, the &lt;code>Forwarded&lt;/code> header includes all that information in a single list.&lt;/p>
&lt;p>Does the &lt;code>Forwarded&lt;/code> header fix the security issues that &lt;code>X-Forwarded-For&lt;/code> has? Not even a little. It can be misused in exactly the same ways that XFF can.&lt;/p>
&lt;p>Does it have wide adoption? Not that I can see. It gets mentioned in documentation occasionally, but I don&amp;rsquo;t remember it actually being checked in any of the code I read.&lt;/p>
&lt;p>Okay, does the RFC at least make clear how it should be used and not be used? Well, there is &lt;a href="https://datatracker.ietf.org/doc/html/rfc7239#section-8.1">this section&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;h5 id="81--header-validity-and-integrity">
&lt;a class="heading-anchor" href="#81--header-validity-and-integrity">
#####
&lt;/a>
8.1. Header Validity and Integrity
&lt;/h5>
&lt;p>The &amp;ldquo;Forwarded&amp;rdquo; HTTP header field cannot be relied upon to be correct, as it may be modified, whether mistakenly or for malicious reasons, by every node on the way to the server, including the client making the request.&lt;/p>
&lt;p>One approach to ensure that the &amp;ldquo;Forwarded&amp;rdquo; HTTP header field is correct is to verify the correctness of proxies and to whitelist them as trusted. This approach has at least two weaknesses. First, the chain of IP addresses listed before the request came to the proxy cannot be trusted. Second, unless the communication between proxies and the endpoint is secured, the data can be modified by an attacker with access to the network.&lt;/p>
&lt;/blockquote>
&lt;p>And that&amp;rsquo;s it.&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>&lt;/p>
&lt;p>That warning is strictly true, but it&amp;rsquo;s not very helpful and could be clearer. Would you read those five sentences and then think, &amp;ldquo;Now I thoroughly understand the danger! It&amp;rsquo;s perfectly clear to me how to use this header in a secure manner.&amp;rdquo;? I wouldn&amp;rsquo;t.&lt;/p>
&lt;p>I feel like it should be the responsibility of this RFC not only to specify how to &lt;em>create&lt;/em> the header but also how to correctly &lt;em>consume&lt;/em> it.&lt;/p>
&lt;p>(Bonus: The RFC adds a variation on IPv6 parsing &amp;ndash; quotation marks: &amp;ldquo;Note that as &amp;ldquo;:&amp;rdquo; and &amp;ldquo;[]&amp;rdquo; are not valid characters in &amp;ldquo;token&amp;rdquo;, IPv6 addresses are written as &amp;ldquo;quoted-string&amp;rdquo;.&amp;rdquo; E.g., &lt;code>&amp;quot;[2001:db8:cafe::17]:4711&amp;quot;&lt;/code>.)&lt;/p>
&lt;h2 id="conclusions">
&lt;a class="heading-anchor" href="#conclusions">
##
&lt;/a>
Conclusions
&lt;/h2>
&lt;p>Well, that was exhausting. I didn&amp;rsquo;t start out with the intention of writing a dissertation on this godforsaken header.&lt;/p>
&lt;p>I have avoided giving &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#syntax">this definition&lt;/a> until now, just in case anyone skims the article and sees it, but I think we&amp;rsquo;re ready for it:&lt;/p>
&lt;pre tabindex="0">&lt;code>X-Forwarded-For: &amp;lt;client&amp;gt;, &amp;lt;proxy1&amp;gt;, &amp;lt;proxy2&amp;gt;
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s what you&amp;rsquo;ll see on basically every page that describes the header. Is it any wonder that misuse of &lt;code>X-Forwarded-For&lt;/code> is so prevalent?&lt;/p>
&lt;p>Let&amp;rsquo;s summarize some of the things we&amp;rsquo;ve learned, the wisdom we&amp;rsquo;ve gained, and the opinions we&amp;rsquo;ve formed:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Danger on the left, trust on the right. There are, maybe, some situations where the leftmost-ish XFF IP can be used, but only very carefully. If there&amp;rsquo;s any doubt, use the rightmost-ish.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Any header &amp;ndash; or any part of any header &amp;ndash; that wasn&amp;rsquo;t set by your own reverse proxy is fundamentally untrustworthy.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Setting a special header to a helpful value but also just letting it through if it&amp;rsquo;s already set is a terrible idea. (See: Akamai, Fastly.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If there&amp;rsquo;s no universally sane default, there should be no default. And &amp;ldquo;get the real IP&amp;rdquo; is a case where there&amp;rsquo;s no sane default. (See: Chi, Tollbooth.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Defaults should &lt;em>not&lt;/em> be insecure. There shouldn&amp;rsquo;t need to be extra configuration to avoid shooting yourself in the foot. (See: Fastly.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you know a function or value is dangerous (spoofable, etc.), put that in your documentation for it in big red letters. Don&amp;rsquo;t just coyly hint at it. (See: Azure, etc.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Good specifications (i.e., RFCs) should tell you how to consume a value, not just how to produce it. And if there are different ways to consume that value that make sense in different situations, it should give you the necessary information &amp;ndash; with sufficient clarity &amp;ndash; to help you make that choice. A reference implementation would also help.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Inconsistency in security implementations is bad. Pick a tool or cloud service that I didn&amp;rsquo;t cover here to check for XFF behaviour. Can you guess beforehand what you&amp;rsquo;ll find with any certainty? You can&amp;rsquo;t, and that&amp;rsquo;s bad.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you&amp;rsquo;re creating a security tool, product, or feature, you need to have as thorough an understanding of the problem space as possible. Even if you start with solid off-the-shelf components (like a token bucket library and expirable cache for a rate limiter), you still need to be fully aware of, for example, the nature and meaning of a header that&amp;rsquo;s being used as input. Otherwise you run the risk of introducing a new vulnerability (or two, etc.).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you&amp;rsquo;re taking untrusted input &amp;ndash; like a header value &amp;ndash; and putting it into an ever-growing, pretty-long-lived, in-memory structure (like a rate limiter map), you need to be incredibly careful. (Especially if that structure isn&amp;rsquo;t &lt;em>behind&lt;/em> a rate limiter and instead &lt;em>is&lt;/em> the rate limiter.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Whenever possible, read the code for your dependencies. It&amp;rsquo;s hard and a ton of work, but bad security surprises can be worse.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>I have avoided saying that you should only use the rightmost-ish XFF IP and never, ever the leftmost. But, seriously, just don&amp;rsquo;t use it.&lt;/p>
&lt;h2 id="discussion">
&lt;a class="heading-anchor" href="#discussion">
##
&lt;/a>
Discussion
&lt;/h2>
&lt;p>Comment and discuss at &lt;a href="https://news.ycombinator.com/item?id=30570053">Hacker News&lt;/a>.&lt;/p>
&lt;p>There have been some interesting comments on HN and Reddit. I&amp;rsquo;ll share some tidbits here.&lt;/p>
&lt;h3 id="rusts-headermapget-returns-first">
&lt;a class="heading-anchor" href="#rusts-headermapget-returns-first">
###
&lt;/a>
Rust&amp;rsquo;s &lt;code>HeaderMap::get&lt;/code> returns first
&lt;/h3>
&lt;p>HN commenter scottlamb &lt;a href="https://news.ycombinator.com/item?id=30571412">pointed out&lt;/a> that &lt;a href="https://docs.rs/http/0.2.6/http/header/struct.HeaderMap.html#method.get">Rust&amp;rsquo;s method to return a single header&lt;/a> value also returns the value of the first such header. The commenter checked and discovered that they were using it wrong.&lt;/p>
&lt;h3 id="aws-elbalb-has-an-option-to-make-xff-even-worse">
&lt;a class="heading-anchor" href="#aws-elbalb-has-an-option-to-make-xff-even-worse">
###
&lt;/a>
AWS ELB/ALB has an option to make XFF even worse
&lt;/h3>
&lt;p>HN commenter nickjj brought the AWS ELB/ALB &lt;a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/x-forwarded-headers.html#x-forwarded-for">&amp;ldquo;client port preservation&amp;rdquo;&lt;/a> option to my attention. If enabled, the client port number is appended to the IP added to XFF. Turning that option on will a) violate the de facto standard form of the header, and b) mess up a lot of IP parsing code.&lt;/p>
&lt;p>(And if the IP suddenly starts failing, then what? Does the rate limiter logic keep moving to the right until it finds a good IP? If done wrong, that could lead to using untrusted values. Does the rate limiter instead give up? And do what? Fail open? Fail closed? Panic? In a comment on the didip/tollbooth PR for this &lt;a href="https://github.com/didip/tollbooth/pull/99#issuecomment-1059328777">I talk more about this&lt;/a>.)&lt;/p>
&lt;h3 id="consider-a-custom-single-ip-header-if-you-can">
&lt;a class="heading-anchor" href="#consider-a-custom-single-ip-header-if-you-can">
###
&lt;/a>
Consider a custom single-IP header, if you can
&lt;/h3>
&lt;p>HN commenter terom &lt;a href="https://news.ycombinator.com/item?id=30571542">said&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>highly recommended to just override the entire XFF header with a single value at the appropriate point in your stack, if at all possible&lt;/p>
&lt;/blockquote>
&lt;p>Which is good advice and I didn&amp;rsquo;t really say in the post. If you have the ability to use one of the &amp;ldquo;good&amp;rdquo; single-IP headers, or add your own at your first proxy, that&amp;rsquo;s much better than messing around with XFF.&lt;/p>
&lt;p>(The reason I didn&amp;rsquo;t really talk about the custom header is like: I was mostly writing for people who are trying to use what&amp;rsquo;s available rather than doing a lot of proxy tinkering. Or something.)&lt;/p>
&lt;h3 id="gos-nethttphttputilreverseproxy-xff-behaviour-being-re-examined">
&lt;a class="heading-anchor" href="#gos-nethttphttputilreverseproxy-xff-behaviour-being-re-examined">
###
&lt;/a>
Go&amp;rsquo;s &lt;code>net/http/httputil.ReverseProxy&lt;/code> XFF behaviour being re-examined
&lt;/h3>
&lt;p>Right now, &lt;a href="https://pkg.go.dev/net/http/httputil#ReverseProxy">&lt;code>httputil.ReverseProxy&lt;/code>&lt;/a> appends the client IP to the XFF header. It looks like &lt;a href="https://github.com/golang/go/issues/50465">they are considering&lt;/a> either replacing the existing XFF header by default or adding options to append to, overwrite, or preserve the existing header.&lt;/p>
&lt;p>My gut feeling is that the initial more-knobs-to-turn suggestion is better than the limited-and-awkward thing it seems to be turning into. (I guess I&amp;rsquo;ll &lt;a href="https://github.com/golang/go/issues/50465#issuecomment-1059987276">express my opinion&lt;/a> there.)&lt;/p>
&lt;h3 id="thoughts-on-overwriting-the-xff-header">
&lt;a class="heading-anchor" href="#thoughts-on-overwriting-the-xff-header">
###
&lt;/a>
Thoughts on overwriting the XFF header
&lt;/h3>
&lt;p>After being prompted to look at &lt;a href="https://github.com/golang/go/issues/50465">&lt;code>httputil.ReverseProxy&lt;/code>&lt;/a> and &lt;a href="https://github.com/caddyserver/caddy/pull/4507">Caddy&lt;/a>, I started thinking more about overwriting the &lt;code>X-Forwarded-For&lt;/code> header (which they both do). I had previously given the idea only a footnote&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>, but it deserves more consideration.&lt;/p>
&lt;p>The idea is this: In a multi-reverse-proxy scenario, the first proxy replaces any existing XFF header(s) with one containing only &lt;code>RemoteAddr&lt;/code>. All subsequent proxies (configured to trust the previous proxies) then append to the fresh XFF header.&lt;/p>
&lt;p>This approach has an obvious nice property: There are no untrusted values in the XFF list. You can&amp;rsquo;t possibly choose a spoofed value. But there are also aspects that I don&amp;rsquo;t like.&lt;/p>
&lt;p>First of all, I think that it teaches bad XFF hygiene and introduces the possibility of mistakes leading to spoofing vulnerability. Because the XFF header is being replaced by the first proxy, the instructions for use become &amp;ldquo;use the leftmost&amp;rdquo;. But what if you then swap out your first proxy that doesn&amp;rsquo;t remove the XFF and instead appends to it? Spoofed!&lt;/p>
&lt;p>Secondly, there&amp;rsquo;s no configuration-simplicity gain with this approach. Trusted proxies still need to be configured for all proxies but the first. If you&amp;rsquo;re doing that, you can use the rightmost-ish approach. And the rightmost-ish approach is more robust: Is your XFF overwritten? It works! Is your XFF list appended to? It works! Is your XFF list mostly spoofed? It works! And you&amp;rsquo;re helping people to understand the right way to think about the XFF header.&lt;/p>
&lt;p>Thirdly, there are still legitimate uses for the leftmost-ish XFF IP (albeit with a lot of warnings attached). If your only mode of operation is to overwrite the XFF header, then you utterly deny those use cases.&lt;/p>
&lt;p>Finally, hand-wavingly, I think this violates the spirit of the headers. XFF is supposed to be a comma-separated list of all the IPs involved. Which overwriting it negates. I think that, instead, &lt;code>X-Real-IP&lt;/code> should be used, set by the first proxy. No need to hijack XFF for this effectively-single-IP purpose.&lt;/p>
&lt;p>However, I wouldn&amp;rsquo;t fight to the death against overwriting the XFF. It&amp;rsquo;s still an improvement over the dismal widespread-ness of append-and-use-leftmost.&lt;/p>
&lt;h3 id="envoys-xff-documentation-is-really-something">
&lt;a class="heading-anchor" href="#envoys-xff-documentation-is-really-something">
###
&lt;/a>
Envoy&amp;rsquo;s XFF documentation is really something
&lt;/h3>
&lt;p>HN commenter jrockway &lt;a href="https://news.ycombinator.com/item?id=30571219">pointed me&lt;/a> at the Envoy Proxy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#x-forwarded-for">documentation for XFF use&lt;/a>. It&amp;rsquo;s not exactly generally educational, but I think it&amp;rsquo;s a really good effort at making sure that Envoy users don&amp;rsquo;t shoot themselves in the foot.&lt;/p>
&lt;h3 id="real-world-examples-of-doing-it-wrong">
&lt;a class="heading-anchor" href="#real-world-examples-of-doing-it-wrong">
###
&lt;/a>
Real-world examples of doing it wrong
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://esd.io/blog/flask-apps-heroku-real-ip-spoofing.html">&amp;ldquo;Flask apps on Heroku susceptible to IP spoofing&amp;rdquo;&lt;/a> (2013-05-12). Via &lt;a href="https://news.ycombinator.com/item?id=30574577">eli on HN&lt;/a>. It was using the leftmost.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ldquo;For many years, a very prominent computer science journal used XFF for guarding access &amp;mdash; if you set it to an IP of some well-known universities, you&amp;rsquo;d be able to download all you want.&amp;rdquo; (&lt;a href="https://news.ycombinator.com/item?id=30572614">HN&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ldquo;I remember the source code for a certain simple web app would check if X-Forwarded-For matched a certain IP as a way of granting admin powers. I spoofed it. It was sort of the first &amp;ldquo;hack&amp;rdquo; I ever did.&amp;rdquo; (&lt;a href="https://old.reddit.com/r/programming/comments/t7lxeb/the_perils_of_the_real_client_ip_or_all_the_wrong/hzka9ma/">Reddit&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ldquo;This was really helpful, I feel good after fixing something I didn&amp;rsquo;t know was even a problem 🤗&amp;rdquo; (&lt;a href="https://old.reddit.com/r/programming/comments/t7lxeb/the_perils_of_the_real_client_ip_or_all_the_wrong/hzkmxie/">Reddit&lt;/a>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="acknowledgements">
&lt;a class="heading-anchor" href="#acknowledgements">
##
&lt;/a>
Acknowledgements
&lt;/h2>
&lt;p>Thanks to &lt;a href="https://github.com/rod-hynes">Rod Hynes&lt;/a> for proofreading and providing feedback. All mistakes are mine, of course.&lt;/p>
&lt;p>Thanks to &lt;a href="https://psiphon.ca">Psiphon Inc.&lt;/a> for giving me the time to work on this. And employing me.&lt;/p>
&lt;h2 id="todo">
&lt;a class="heading-anchor" href="#todo">
##
&lt;/a>
TODO
&lt;/h2>
&lt;ul>
&lt;li>Nodejs collapses XFF &lt;a href="https://nodejs.org/api/http.html#messageheaders">https://nodejs.org/api/http.html#messageheaders&lt;/a> &lt;a href="https://old.reddit.com/r/programming/comments/t7lxeb/the_perils_of_the_real_client_ip_or_all_the_wrong/hzkg18l/">https://old.reddit.com/r/programming/comments/t7lxeb/the_perils_of_the_real_client_ip_or_all_the_wrong/hzkg18l/&lt;/a>&lt;/li>
&lt;li>add note about single-value header Get being combined list&lt;/li>
&lt;li>all projects: if deciding to use leftmost, check for valid/non-private&lt;/li>
&lt;li>finish reference implementation&lt;/li>
&lt;li>probably add some diagrams&lt;/li>
&lt;li>rethink hyphenating rate-limit* (right now I&amp;rsquo;m not doing it for nouns but am doing it for verbs, and I can&amp;rsquo;t decide what&amp;rsquo;s right)&lt;/li>
&lt;li>&lt;a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-troubleshooting.html#http-463-issues">AWS ALB returns 463&lt;/a> if there are more&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&amp;hellip;Except for anonymizing proxies that specifically hide the client IP. But that&amp;rsquo;s not an important difference for us here.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>I&amp;rsquo;m picking on AWS ALB mostly because that&amp;rsquo;s what I&amp;rsquo;m testing with. It&amp;rsquo;s also pretty popular and probably not unusual. But please append this caveat every time I mention it: &amp;ldquo;This is AWS ALB&amp;rsquo;s behaviour by default, or as I understand it.&amp;rdquo;&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>I believe this is inherited unchanged into &lt;a href="https://datatracker.ietf.org/doc/html/rfc7540">HTTP/2&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>A redditor &lt;a href="https://old.reddit.com/r/programming/comments/t7lxeb/the_perils_of_the_real_client_ip_or_all_the_wrong/hzits6h/">points out&lt;/a> that if you&amp;rsquo;re running a server for internal usage, and you want to know the originating internal IP, then you &lt;em>do&lt;/em> want an IP in the private address space. Which is true. So if that scenario applies to you, modify the algorithm accordingly (i.e., remove the &amp;ldquo;non-private&amp;rdquo; checks).&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>In the leftmost-ish approach, the IP you need might not be in the first XFF header. In the rightmost-ish approach, it might not be in the last XFF header.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>Seek a guide &lt;a href="https://docs.fastly.com/signalsciences/faq/real-client-ip-addresses/#nginx---http_realip_module">elsewhere&lt;/a>.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>Okay, it&amp;rsquo;s &lt;em>possible&lt;/em> for your trusted proxy to blow away the existing XFF value and start fresh. But a) that&amp;rsquo;s not how XFF is supposed to work, b) you&amp;rsquo;re losing potentially useful information, and c) you achieve the same thing by using the rightmost-ish algorithm.&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>&amp;ldquo;Rightmost&amp;rdquo; is not &amp;ldquo;rightmost-ish&amp;rdquo;.&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>Of course, the attestation reverse proxy should have set the &lt;code>X-Client-IP&lt;/code> or otherwise passed on the IP it verified. But it&amp;rsquo;s not hard to imagine such a mistake.&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>There is one more sentence elsewhere, but it doesn&amp;rsquo;t add anything: &amp;ldquo;With the header field format described in this document, it is possible to know what information belongs together, &lt;em>as long as the proxies are trusted&lt;/em>.&amp;rdquo; (Emphasis added.)&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>The scary state of IPv6 rate-limiting</title><link>https://adam-p.ca/blog/2022/02/ipv6-rate-limiting/</link><pubDate>Sun, 20 Feb 2022 13:44:57 -0500</pubDate><guid>https://adam-p.ca/blog/2022/02/ipv6-rate-limiting/</guid><description>&lt;p>IPv6 rate-limiting is scarily half-baked right now. If you run a server that does any kind of IP-based rate-limiting, consider not enabling IPv6 if possible. If you do use IPv6, check how your rate-limiter actually handles it.&lt;/p>
&lt;h2 id="four-billion-is-a-pretty-small-number">
&lt;a class="heading-anchor" href="#four-billion-is-a-pretty-small-number">
##
&lt;/a>
Four billion is a pretty small number
&lt;/h2>
&lt;p>Most IPv4 rate-limiters will block individual addresses as they exceed the limit. That&amp;rsquo;s mostly okay, because there are only 4 billion IPv4 addresses. That means a) they are given out with some frugality, and b) it doesn&amp;rsquo;t take much memory to block a large proportion of them. If you and 1000 of your closest friends launch a brute-force or credential-stuffing login attack, any server will have no problem rate-limiting all of you.&lt;/p>
&lt;p>But IPv6 is a very different matter.&lt;/p>
&lt;h2 id="a-gazillion-ips">
&lt;a class="heading-anchor" href="#a-gazillion-ips">
##
&lt;/a>
A gazillion IPs
&lt;/h2>
&lt;p>When you ask your ISP for an IPv6 assignment, you get &lt;em>at least&lt;/em> a &lt;a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#IPv6_CIDR_blocks">/64&lt;/a> block &amp;ndash; 2⁶⁴ assignable addresses. &lt;a href="https://www.ripe.net/publications/docs/ripe-690">RIPE suggests&lt;/a> giving a /56 prefix (2⁷² addresses == 256 /64 blocks) to home users and a /48 prefix (2⁸⁰ addresses == 65,536 /64 blocks) to businesses (or &amp;ldquo;If you want a simple addressing plan use a /48 for each end-user&amp;rdquo;). &lt;a href="https://datatracker.ietf.org/doc/html/rfc6177">RFC 6177&lt;/a> agrees with this guidance, as does &lt;a href="https://blog.apnic.net/2017/07/10/isps-simplifying-customer-ipv6-addressing-part-2/">APNIC&lt;/a>.&lt;/p>
&lt;p>Searching for ISPs&amp;rsquo; IPv6 prefix delegation policies shows that /64&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> and /56 are pretty common. Internode in Australia &lt;a href="https://www.internode.on.net/about/our_network/ipv6/">assigns /56 blocks&lt;/a> to residential and business customers. In the US, Charter Spectrum also &lt;a href="https://www.reddit.com/r/ipv6/comments/i1b7nk/charter_spectrum_and_ipv6_with_prefix_delegation/">gives /56s&lt;/a>. Cogent lets users &lt;a href="https://www.cogentco.com/files/docs/customer_service/faq/ipq_na.txt">request up to /48&lt;/a>.&lt;/p>
&lt;p>So, it&amp;rsquo;s safe to assume that an attacker can obtain at least a /56 and probably a /48. It&amp;rsquo;s also prudent to assume that a determined attacker can utilize all of the addresses at their disposal. And there is at least one &lt;a href="https://github.com/blechschmidt/freebind">tool that does exactly that&lt;/a> &amp;ndash; &amp;ldquo;freebind: IPv4 and IPv6 address rate limiting evasion tool&amp;rdquo;.&lt;/p>
&lt;h2 id="whats-the-right-way-to-rate-limit-a-gazillion-ips">
&lt;a class="heading-anchor" href="#whats-the-right-way-to-rate-limit-a-gazillion-ips">
##
&lt;/a>
What&amp;rsquo;s the right way to rate-limit a gazillion IPs?
&lt;/h2>
&lt;p>This &lt;a href="https://serverfault.com/a/863511/476142">StackOverflow answer&lt;/a> outlines the best approach I&amp;rsquo;ve found:&lt;/p>
&lt;blockquote>
&lt;p>The best algorithm is to start blocking separate addresses. Then when multiple addresses are blocked in the same /64 you block the whole /64. Repeat that for bigger aggregates.&lt;/p>
&lt;p>Prefixes are usually given out on nibble boundaries (multiples of 4, or one hexadecimal digit). So you might want to scale from /64 to /60, /56, /52, and /48. A /48 is usually the largest prefix given to a single site.&lt;/p>
&lt;p>Depending how careful you want to be you can skip from /64 straight to /56 and /48.&lt;/p>
&lt;/blockquote>
&lt;p>A comment on that answer has a useful addition:&lt;/p>
&lt;blockquote>
&lt;p>You can implement this gradual aggregation approach in a fairly simple way. Track separate rate limits at the /64, /56, and /48 level all the time. Use higher limits for higher levels. That way there is no aggregation logic at all. It&amp;rsquo;s just three separate limits based on different keys.&lt;/p>
&lt;/blockquote>
&lt;p>(Fun fact: If I google for &lt;a href="https://www.google.com/search?q=ipv6+rate+limiting">&amp;ldquo;ipv6 rate limiting&amp;rdquo;&lt;/a> (in a private browsing window), the &amp;ldquo;featured snippet&amp;rdquo; at the top is a link to the &amp;ldquo;rate limiting evasion tool&amp;rdquo; that I mentioned above. The first normal result is to that SO question. And note that it has only 6 votes and a single answer with only 10 votes. Are people just not thinking/talking about the problem? Or am I searching for the wrong thing?)&lt;/p>
&lt;h2 id="how-are-real-rate-limiters-actually-doing-it">
&lt;a class="heading-anchor" href="#how-are-real-rate-limiters-actually-doing-it">
##
&lt;/a>
How are real rate limiters actually doing it?
&lt;/h2>
&lt;p>Let&amp;rsquo;s start with &lt;a href="https://support.cloudflare.com/hc/en-us/articles/115001635128-Configuring-Cloudflare-Rate-Limiting">Cloudflare&lt;/a>, since it&amp;rsquo;s nice and clear:&lt;/p>
&lt;blockquote>
&lt;p>Once an individual IPv4 address or IPv6 /64 IP range exceeds a rule threshold, further requests to the origin web server are blocked&lt;/p>
&lt;/blockquote>
&lt;p>That&amp;rsquo;s pretty good, though it&amp;rsquo;s missing some of the nuance of the algorithm above. If there&amp;rsquo;s a large non-malicious site (apartment complex, school, business, etc.) behind the /64, the blocking might be over-aggressive. If an attacker has an assignment larger than /64, they might have between 256 and 65,536 /64s at their disposal. The large end of that range is getting big.&lt;/p>
&lt;p>AWS WAF supports IPv6 for rules, inspection, and reporting, but doesn&amp;rsquo;t specify how it implements rate-limiting for IPv6. Concerningly, it has a &lt;a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-rate-based.html">really small limit&lt;/a> on the number of IPs it can rate-limit at once: &amp;ldquo;AWS WAF can block up to 10,000 IP addresses. If more than 10,000 IP addresses send high rates of requests at the same time, AWS WAF will only block 10,000 of them.&amp;rdquo; Unless their IPv6-limiting algorithm is smart, it would be easy for an attacker to ensure they have more blockable units (IPs or /64s) than the limiter can hold. And that means that it would effectively be completely unlimited.&lt;/p>
&lt;p>(This raises the question of what the limit on the number of blocked IPs is for other services. I found no such limit mentioned for anything else.)&lt;/p>
&lt;p>I also couldn&amp;rsquo;t figure out what IPv6 strategy Google Cloud Armor uses, but &lt;a href="https://cloud.google.com/armor/docs/security-policy-overview">it says this&lt;/a> about its configurable rules: &amp;ldquo;Both IPv4 and IPv6 source addresses are supported, but IPv6 addresses must have subnet masks no larger than /64.&amp;rdquo; So maybe its rate-limiting is also /64-based, like Cloudflare? Or maybe that&amp;rsquo;s reading too much into a statement that&amp;rsquo;s only tangentially related.&lt;/p>
&lt;p>Let&amp;rsquo;s Encrypt &lt;a href="https://letsencrypt.org/docs/rate-limits/">limits account creations by /48&lt;/a>, because &lt;a href="https://github.com/letsencrypt/boulder/blob/b5b5033136427c988e20ca11f1f7471563f90616/sa/sa.go#L224-L227">&amp;ldquo;it&amp;rsquo;s not uncommon for one person to have a /48 to themselves&amp;rdquo;&lt;/a>. That seems very.. cautious. On the one hand, I like how aggressive it is, but on the other hand&amp;hellip; there could be 65,536 home or business networks (/64s) in a single rate-limited /48. I feel like this is too coarse-grained for general use.&lt;/p>
&lt;p>A year ago, &lt;a href="https://hackerone.com/reports/1154003">after a vulnerability report&lt;/a>, Nextcloud changed from limiting IPv6 by individual addresses (/128) to limiting by /64. (There also is/was no size-limiting of the IP cache, &lt;a href="https://github.com/nextcloud/server/tree/master/lib/private/Security/RateLimiting/Backend">that I can see&lt;/a>.)&lt;/p>
&lt;p>I also looked at a couple of Go HTTP rate-limiting libraries &amp;ndash; &lt;a href="https://github.com/didip/tollbooth">github.com/didip/tollbooth&lt;/a> and &lt;a href="https://github.com/go-chi/httprate">github.com/go-chi/httprate&lt;/a>. Neither distinguishes between IPv4 and IPv6 and simply does per-IP blocking. So that&amp;rsquo;s bad. And neither has a size limit on the IPs in its limiter cache (only a time limit), so an attacker can consume all available memory, I think.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>(Fun fact: Even a terabyte drive can only store 2³⁶ IPv6 addresses. So you&amp;rsquo;d need about 270 million such disks to store the IP addresses accessible to a single /64 home user. Or 18 trillion disks for a /48.)&lt;/p>
&lt;h2 id="how-many-blockable-units-is-too-many-for-an-attacker">
&lt;a class="heading-anchor" href="#how-many-blockable-units-is-too-many-for-an-attacker">
##
&lt;/a>
How many &amp;ldquo;blockable units&amp;rdquo; is too many for an attacker?
&lt;/h2>
&lt;p>If a rate limiter is blocking by single IP addresses, then that&amp;rsquo;s the &amp;ldquo;blockable unit&amp;rdquo;&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. If it&amp;rsquo;s blocking by /64, then that&amp;rsquo;s the &amp;ldquo;blockable unit&amp;rdquo;. And so on. The rate limiter effectively &amp;ldquo;allows&amp;rdquo; an attacker to have a certain number of blockable units at her disposal depending on the limiting strategy used.&lt;/p>
&lt;p>The obvious extremes: An attacker having a single blockable unit is acceptable (and unavoidable). An attacker having 2⁶⁴ blockable units is way too many.&lt;/p>
&lt;p>But what if the attacker has 256 blockable units (blocking on /64, attacker has /56)? Or 65,536 blockable units (blocking on /64, attacker has /48)?&lt;/p>
&lt;p>Let&amp;rsquo;s (charitably) assume that AWS WAF&amp;rsquo;s limit of blocking &amp;ldquo;10,000 IP addresses&amp;rdquo; applies to /64s for IPv6. If that&amp;rsquo;s true, then allowing an attacker 65,636 is too many. (To state the obvious, an attacker could cycle through her /64s and never be limited at all.)&lt;/p>
&lt;p>Do other WAFs have a size limit that they&amp;rsquo;re not publishing? It seems likely, but not certain. Cloudflare, for example, prides itself on &lt;a href="https://blog.cloudflare.com/cloudflare-blocks-an-almost-2-tbps-multi-vector-ddos-attack/">withstanding the largest attacks&lt;/a> and is surely concerned about state-level attackers with access to at least a /32 prefix &amp;ndash; 4 billion /64s. It would take about 40 GB of storage to keep track of that many prefixes (2³² * (8 bytes per prefix + overhead)). That&amp;rsquo;s not impossible for a big box of RAM, and certainly not for disk, of course (but disk feels a bit slow for this use case). Perhaps Cloudflare is comfortable with blocking that many addresses.&lt;/p>
&lt;p>A big box of RAM dedicated to this purpose might be expensive for a smaller operator, but maybe using disk is more acceptable. If we&amp;rsquo;re talking about Nextcloud running on someone&amp;rsquo;s NAS box, then /32 attacks are surely outside of the threat model.&lt;/p>
&lt;p>What about 256 blockable units? That&amp;rsquo;s&amp;hellip; probably okay?&lt;/p>
&lt;p>So, I don&amp;rsquo;t have a great answer to the question of how many blockable units is too many. What&amp;rsquo;s your comfort level? What&amp;rsquo;s your threat model?&lt;/p>
&lt;p>And what about an attack that is both distributed &lt;em>and&lt;/em> can utilize the full IP space? What &lt;em>multiple&lt;/em> of 65,536 (or 256) are you comfortable with?&lt;/p>
&lt;h2 id="conclusions">
&lt;a class="heading-anchor" href="#conclusions">
##
&lt;/a>
Conclusions
&lt;/h2>
&lt;p>I really like the idea of IPv6. I work for a company that would (probably) benefit from widespread IPv6 adoption (so that we&amp;rsquo;re, uh, harder to block). But as I said in the title: If you need to rate-limit access to something, avoid enabling IPv6 for now. The state of IPv6 rate-limiting just seems too immature.&lt;/p>
&lt;p>But what if you have no choice? If you&amp;rsquo;re using a web application firewall, try to talk to the vendor about what it actually does. (And then &lt;a href="mailto:pritchard.adam@gmail.com">let me know what they say&lt;/a>!) If you&amp;rsquo;re doing the rate-limiting yourself, look closely at what your code is doing, because there&amp;rsquo;s a very good chance that it&amp;rsquo;s doing it inadequately.&lt;/p>
&lt;p>For a quick fix, block IPv6 /64s rather than individual IPs. It might not be perfect, but it&amp;rsquo;s 2⁶⁴ times better.&lt;/p>
&lt;p>I remain hopeful that this situation can improve rapidly. Good algorithms tend to get adopted quickly once they become available in a consumable format, and this isn&amp;rsquo;t likely a very complex case. (Yes, I am tempted to implement something myself, but this isn&amp;rsquo;t a problem I personally have right now so I wouldn&amp;rsquo;t actually use my own code, which is never a good starting point.)&lt;/p>
&lt;h2 id="postscript">
&lt;a class="heading-anchor" href="#postscript">
##
&lt;/a>
Postscript
&lt;/h2>
&lt;p>The state of this seems so obviously sketchy that I think I must be missing something important. I am still an IPv6 neophyte. Please correct me if I have gotten anything wrong.&lt;/p>
&lt;hr>
&lt;p>Edit 2022-02-21: I &lt;a href="https://old.reddit.com/r/ipv6/comments/sx8ko7/the_scary_state_of_ipv6_ratelimiting_please_let/">posted this to /r/ipv6&lt;/a> and there are some good contrary comments there. I particularly like &lt;a href="https://www.reddit.com/r/ipv6/comments/sx8ko7/the_scary_state_of_ipv6_ratelimiting_please_let/hxsbfuh/">this one&lt;/a> that talks about IPv6 being better than IPv4 for rate limiting, since providers will generally have a single IPv6 prefix themselves and give out prefixes in a consistent manner, rather than the scattered, different-IP-each-reboot world of IPv4. The comments also talk a lot more about &amp;ldquo;bycatch&amp;rdquo; (over-blocking), which I didn&amp;rsquo;t really. But I still don&amp;rsquo;t feel they&amp;rsquo;re worried enough about how providers and libraries have actually implemented rate limiting at this point in time.&lt;/p>
&lt;hr>
&lt;p>Edit 2022-02-22:&lt;/p>
&lt;p>A coworker pointed out that the way I did the prefixed-IP-canonicalization in my PRs was overly complicated and can be achieved with the stdlib like &lt;code>ipv6.Mask(net.CIDRMask(56, 128)).String()&lt;/code>. I had tried various approaches with the stdlib and didn&amp;rsquo;t come up with one that worked, but I guess I missed that one. Embarrassing.&lt;/p>
&lt;p>I did some searching for fail2ban+ipv6. Their &lt;a href="https://github.com/fail2ban/fail2ban/issues/1123">IPv6 support master plan&lt;/a> is interesting and relevant. &lt;a href="https://github.com/fail2ban/fail2ban/issues/1123#issuecomment-123746872">For example&lt;/a>: &amp;ldquo;I am not sure we will land/release 1 [per-IP blocking] alone since, as was stated, it could immediately be exploited by an attacker to cause resources exhaustion/DoS. May be only if treatment of IPv6 addresses would be made optional with a big fat warning on possible ramifications.&amp;rdquo; Even though it looks like &lt;a href="https://github.com/fail2ban/fail2ban/pull/1374">per-IP IPv6 support&lt;/a> was &lt;a href="https://www.ctrl.blog/entry/fail2ban-ipv6.html">added in 0.10&lt;/a>.&lt;/p>
&lt;p>Reading through all of the comments on that issues suggests that fail2ban still only uses a per-IP strategy to block IPv6. And are aware it&amp;rsquo;s insufficient. And stopped discussing it a year and a half ago.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Some ISPs also give a small multiple of /64s. But I feel like that case isn&amp;rsquo;t significantly different from a single /64 for our purposes.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>After writing this I realized that I&amp;rsquo;d better be part of the change I want to see, so I submitted PRs to &lt;a href="https://github.com/didip/tollbooth/pull/98">tollbooth&lt;/a> and &lt;a href="https://github.com/go-chi/httprate/pull/10">httprate&lt;/a>. Both have been accepted. But it&amp;rsquo;s unlikely that the only two rate-limiting libraries I checked are the only two with this problem, so I don&amp;rsquo;t think this changes the overall point of this post.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>To be clear, I&amp;rsquo;m making this term up for convenience of discussion.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Git Submodule vs Subtree</title><link>https://adam-p.ca/blog/2022/02/git-submodule-subtree/</link><pubDate>Thu, 17 Feb 2022 21:35:37 -0500</pubDate><guid>https://adam-p.ca/blog/2022/02/git-submodule-subtree/</guid><description>&lt;p>Every now and then I need to make a choice between using git submodules or subtrees (or nothing), or I get asked about them by coworkers. This is infrequent enough that I forget some of the details each time and need to refresh my memory. So I wrote up these notes to share with my coworkers and to help my future self. Hopefully they’re of some use to others as well.&lt;/p>
&lt;p>Disclaimer: My experience still isn’t large. I’ve only used each once or twice. And this isn’t a manual for using those commands/tools &amp;ndash; it’s just a concise aid for choosing between them.&lt;/p>
&lt;p>TL;DR: Subtree is better if you basically want to forget you have external code, or only infrequently update it; submodule is better if you &lt;em>don’t&lt;/em> want to forget that the code is external, and/or if you maybe want to edit and push it.&lt;/p>
&lt;p>I’d seen a lot of complaining about submodule during research, and had the vague idea that subtree was “better”, but I’ve come to realize that submodule has its place.&lt;/p>
&lt;p>When you use subtree, you’re basically copying a remote code base into your file structure. The auto-commit comment at the moment you do it will record the remote commit hash, but otherwise there’s no indication anywhere in the repo that a) the subtree happened, b) what the remote repo was, or c) what the commit of the remote repo was.&lt;/p>
&lt;p>From then on, any changes to the subtree code will be treated just like changes anywhere else in the repo. Any operations to &lt;code>git subtree push&lt;/code> and &lt;code>git subtree pull&lt;/code> the code does weird git directory slicing (which I’ve used before to create a new repo from the subdirectory of an existing repo, retaining commit history for the files in that directory). It’s okay, but clunky.&lt;/p>
&lt;p>This is in sharp contrast with submodule, where the remote repo code is &lt;em>not&lt;/em> copied. Instead, the remote repo URL is recorded, and its location in the file structure, and the remote repo commit to use. When you clone the repo, you have to separately clone the submodule dependency(ies) (&lt;code>git submodule init&lt;/code>+&lt;code>git submodule update&lt;/code> or &lt;code>git clone --recurse-submodules&lt;/code>). The submodule becomes a separate repo in the file structure, with its own &lt;code>.git&lt;/code> dir. For example, if you do &lt;code>git status&lt;/code> in the submodule directory, it tells you the status of the submodule code and not the outer repo. If you update the submodule repo directory, it changes the submodule&amp;rsquo;s tracked commit in the outer repo, and you commit that in the outer repo.&lt;/p>
&lt;p>Treating the submodule as a separate entity is easy. You can just do all your usual branching, committing, pushing (the remote is the subrepo remote, not the outer remote).&lt;/p>
&lt;p>Cloning the subtree is easier because there’s no separate step, but that&amp;rsquo;s not a big deal. For vendoring 3rd party code, submodule won’t actually make a copy, so that’s not okay&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> (unless you fork the 3rd party code first and submodule the fork).&lt;/p>
&lt;p>So the main decision factors are like:&lt;/p>
&lt;ul>
&lt;li>Use &lt;strong>subtree&lt;/strong> when you just want to copy code from an external repo once, or maybe with occasional pulls.&lt;/li>
&lt;li>Use &lt;strong>submodule&lt;/strong> when you want to make your relationship to the external repo really explicit, or if you intend to make changes to the submodule code from within the context of your repo and push to the external repo.&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Depending on your vendoring policy and the dependency management system.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Diving into Go's HTTP server timeouts</title><link>https://adam-p.ca/blog/2022/01/golang-http-server-timeouts/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2022/01/golang-http-server-timeouts/</guid><description>&lt;p>Recently, I was adding timeouts to a Go HTTP server and ended up exploring how the different settings and approaches act and interact. I&amp;rsquo;m going to publish my notes here, along with the code I used for testing. Hopefully this will help someone else (or myself) in the future.&lt;/p>
&lt;p>The timeout testing client can be found here: &lt;a href="https://github.com/adam-p/httptimeout">github.com/adam-p/httptimeout&lt;/a>. There is a server in the examples directory that you can make requests to.&lt;/p>
&lt;p>I link to it below, but I&amp;rsquo;m going to recommend here that you read Filippo Valsorda&amp;rsquo;s post &lt;a href="https://blog.cloudflare.com/exposing-go-on-the-internet/">&amp;ldquo;So you want to expose Go on the Internet&amp;rdquo;&lt;/a>. It&amp;rsquo;s essential, but I didn&amp;rsquo;t find it had enough quite enough detail about timeouts, hence the below examination.&lt;/p>
&lt;hr>
&lt;p>There are two different, overlapping levels of timeout in our HTTP server:&lt;/p>
&lt;ol>
&lt;li>Read, write, and idle timeouts on the http.Server&lt;/li>
&lt;li>The ServeHTTP timeout (this middleware)&lt;/li>
&lt;/ol>
&lt;p>The &lt;a href="https://pkg.go.dev/net/http#Server">http.Server timeouts&lt;/a> are overlapping and somewhat confusing (to me &lt;a href="https://github.com/golang/go/issues/35626">and others&lt;/a>) so I&amp;rsquo;ll test and detail how they work (or seem to). (Another important but insufficiently thorough reference is the Cloudflare post &lt;a href="https://blog.cloudflare.com/exposing-go-on-the-internet/#timeouts">&amp;ldquo;So you want to expose Go on the Internet&amp;rdquo;&lt;/a>.)&lt;/p>
&lt;ul>
&lt;li>IdleTimeout: &amp;ldquo;IdleTimeout is the maximum amount of time to wait for the next request when keepalives are enabled. If IdleTimeout is zero, the value of ReadTimeout is used.&amp;rdquo; Not relevant to request timeouts.&lt;/li>
&lt;li>ReadTimeout: &amp;ldquo;The maximum duration for reading the entire request, including the body.&amp;rdquo; It&amp;rsquo;s implemented in net/http by calling SetReadDeadline immediately after Accept.&lt;/li>
&lt;li>ReadHeaderTimeout: &amp;ldquo;ReadHeaderTimeout is the amount of time allowed to read request headers.&amp;rdquo; Implemented as above.&lt;/li>
&lt;li>WriteTimeout: &amp;ldquo;WriteTimeout is the maximum duration before timing out writes of the response. It is reset whenever a new request&amp;rsquo;s header is read.&amp;rdquo; This effectively covers the lifetime of the ServeHTTP handler stack.&lt;/li>
&lt;/ul>
&lt;p>Observations:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The documentation makes a big deal out of ReadHeaderTimeout allowing for per-request timeouts based on the headers. &amp;ldquo;The connection&amp;rsquo;s read deadline is reset after reading the headers and the Handler can decide what is considered too slow for the body.&amp;rdquo; &amp;ldquo;Because ReadTimeout does not let Handlers make per-request decisions on each request body&amp;rsquo;s acceptable deadline or upload rate, most users will prefer to use ReadHeaderTimeout.&amp;rdquo; But since http.Request doesn&amp;rsquo;t provide access to the underlying net.Conn, I don&amp;rsquo;t see a way to set a connection deadline from the handler level. (Perhaps it intends the per-request timeout to be done via mw/context rather than via conn deadlines.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Our TLS terminates at the load balancer, so mention of different TLS behaviour you might see doesn&amp;rsquo;t apply.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The zero values mean no timeout. These shouldn&amp;rsquo;t be used for anything but toy servers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A timeout during header or body read means that there&amp;rsquo;s no response to the client. This is unfortunate but expected.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A timeout during header read means that there&amp;rsquo;s no server log written for the request. This is even more unfortunate but also not unexpected. The handler stack (including logging middleware) is not set up until the headers are read.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>http.Server timeouts do not themselves cancel the request context. However, if a body read follows the timeout, the resulting error will &lt;a href="https://github.com/golang/go/blob/24239120bfbff9ebee8e8c344d9d3a8ce460b686/src/net/http/server.go#L740">trigger a context cancellation&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A ReadTimeout during body read results in a log with status of 503. This is initially somewhat surprising. The timeout interrupts the read connection, then the failed read attempt cancels the request context, then the http.TimeoutHandler (discussed below) receives the signal of that cancellation and &lt;a href="https://github.com/golang/go/blob/24239120bfbff9ebee8e8c344d9d3a8ce460b686/src/net/http/server.go#L3392">sends the 503 response&lt;/a>.&lt;/p>
&lt;p>This is okay, but I&amp;rsquo;d prefer more control over it. (This might be a bigger problem later, when we try to handle &amp;ldquo;context canceled&amp;rdquo; with more nuance.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The previous point illustrates (I think) that the read and write channels of the connection are severed by the timeouts separately (the response can be written even though the read is interrupted).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ReadHeaderTimeout by itself works as expected. The header read is deadlined, but nothing else is.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ReadTimeout by itself works as expected. The timeout is shared between the header read and body read.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ReadHeaderTimeout and ReadTimeout together:&lt;/p>
&lt;ul>
&lt;li>If set to the same value, behaviour is indistinguishable from just ReadTimeout being set.&lt;/li>
&lt;li>If ReadHeaderTimeout is a different value from ReadTimeout:
&lt;ul>
&lt;li>If the header read is too slow, then ReadHeaderTimeout is used.&lt;/li>
&lt;li>If the body read is too slow, then ReadTimeout is used. The time allowed for the body read is the total ReadTimeout minus the time spent reading headers. (As in the ReadTimeout-by-itself case.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>I haven&amp;rsquo;t figured out (in a reasonable amount of time) a way to emulate/implement a slow read. I don&amp;rsquo;t know how to stream the response and read of it.&lt;/p>
&lt;ul>
&lt;li>But if the WriteTimeout is set to 1ns the client gets EOF immediately.&lt;/li>
&lt;li>A sleep longer than WriteTimeout before writing the response results in the client getting no data, but the client still takes the sleep-time to disconnect rather than the timeout-time, which seems very strange to me.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.cloudflare.com/exposing-go-on-the-internet/#timeouts">One of the sources&lt;/a> led me to believe that ReadHeaderTimeout+WriteTimeout would cover the whole request (&amp;ldquo;ReadHeaderTimeout &amp;hellip; covers up to the request headers &amp;hellip; WriteTimeout normally covers the time from the end of the request header read to the end of the response write (a.k.a. the lifetime of the ServeHTTP)&amp;rdquo;). What actually happens is that the header read timeout is correct, the write timeout is correct, but there&amp;rsquo;s no body read timeout. So the request can spend forever reading the body but when it goes to write the response the write connection has deadlined.&lt;/p>
&lt;p>I believe that what&amp;rsquo;s happening is that the WriteTimeout is reset every time a read happens, so it&amp;rsquo;s not actually starting as long as there&amp;rsquo;s a body read. (The documentation says WriteTimeout &amp;ldquo;is reset whenever a new request&amp;rsquo;s header is read.&amp;rdquo; But that doesn&amp;rsquo;t seem to be exactly accurate.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Otherwise rough testing with combinations of the read timeouts with WriteTimeout suggests they behave as expected (no interaction).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In addition to the http.Server timeouts we use a timeout middleware, which is basically a wrapper around &lt;a href="https://pkg.go.dev/net/http#TimeoutHandler">http.TimeoutHandler&lt;/a>. Here are some observations when the timeout middleware is in play and has a timeout shorter than the connection timeouts:&lt;/p>
&lt;ul>
&lt;li>Unsurprisingly, the timeout mw&amp;rsquo;s timeout doesn&amp;rsquo;t start ticking until the handler stack is set up, so not until after the headers are read.&lt;/li>
&lt;li>http.TimeoutHandler uses &amp;ldquo;503 Service Unavailable&amp;rdquo; as its timeout response. It seems like &amp;ldquo;408 Request Timeout&amp;rdquo; would be a more semantically appropriate response. We could intercept the response write to change that code, but it would get hack-y to distinguish between http.TimeoutHandler returning 503 and, say, our Ping endpoint returning it intentionally. Additionally, returning a 5xx error means that our clients will automatically retry the request, which is a good thing (probably).
&lt;ul>
&lt;li>We could also use a copy of http.TimeoutHandler (~220 lines) to return whatever value we want.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>It may seem silly to worry about sending a response to the client when its connection is so degraded that it probably can&amp;rsquo;t read it. But: a) the timeout response might be a lot smaller than whatever the client is trying to send, b) the client&amp;rsquo;s down pipe might be faster than its up pipe, and c) the timeout might actually be due to our server taking too long to the process, rather than a problem with the client.&lt;/li>
&lt;li>Whether the client receives the timeout mw 503 response depends on what it&amp;rsquo;s doing. (My test client that gets interrupted writing slowly can&amp;rsquo;t read the response, but if it&amp;rsquo;s trying to read when the timeout happens the response is received okay.)&lt;/li>
&lt;li>A slow body read is interrupted by the mw timeout with an &amp;ldquo;i/o timeout&amp;rdquo; error. I believe this is due to the request context being canceled by the timeout.&lt;/li>
&lt;li>A long time.Sleep isn&amp;rsquo;t magically interrupted, unsurprisingly. But selecting on ctx.Done and time.After ends early due to the context cancellation.&lt;/li>
&lt;li>There are &lt;a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18beta1:src/net/http/server.go;l=3392-3402;bpv=0">two cases&lt;/a> when TimeoutHandler returns 503. The first is, of course, when the deadline it set on the context fires (it could have been set somewhere else, in theory). The other is if the context was canceled for some other reason (such as the client leaving). They are distinguishable from the client side because there&amp;rsquo;s no response body in the latter case.&lt;/li>
&lt;/ul>
&lt;p>Note that it is important that the timeout mw have a shorter timeout than the http.Server timeouts. We want the client to receive a response, if possible, rather than just having its connection severed.&lt;/p>
&lt;p>This is not as simple as it might seem. The handler mw timeout must be shorter than either the WriteTimeout or the time remaining to the ReadTimeout after header reading. But at the handler level we don&amp;rsquo;t know how long the header read took, except that it took less than ReadHeaderTimeout. So our mw timeout should be &lt;code>min(WriteTimeout, ReadTimeout-ReadHeaderTimeout)&lt;/code>.&lt;/p>
&lt;p>&amp;hellip;Except that calculation ends up feeling very unnatural in practice. Instead, it makes more sense to first choose the desired handler timeout, then set the http.Server connection timeouts based on that. I think that it&amp;rsquo;s reasonable to use 0.5x the timeout for ReadHeaderTimeout and 1x the timeout for ReadTimeout and WriteTimeout.&lt;/p>
&lt;p>We certainly can&amp;rsquo;t rely on the timeout mw while reading headers (because there is no middleware at that point), but it&amp;rsquo;s possible that body read and response write timeouts are redundant. Severing the connection seems safer than cancelling the context and hoping something checks it, so we&amp;rsquo;ll set the other timeouts anyway.&lt;/p>
&lt;hr>
&lt;h2 id="addendum">
&lt;a class="heading-anchor" href="#addendum">
##
&lt;/a>
Addendum
&lt;/h2>
&lt;h3 id="lets-work-through-the-timeout-math">
&lt;a class="heading-anchor" href="#lets-work-through-the-timeout-math">
###
&lt;/a>
Let&amp;rsquo;s work through the timeout math
&lt;/h3>
&lt;p>Let&amp;rsquo;s say we want, generally, a 10-second request timeout. So we set TimeoutHandler&amp;rsquo;s timeout to 10 seconds.&lt;/p>
&lt;p>We need to pick a ReadHeaderTimeout that is basically independent from that (because the handler timeout doesn&amp;rsquo;t start until &lt;em>after&lt;/em> the header read is complete). It seems reasonable to pick 5 seconds.&lt;/p>
&lt;p>As discussed above, we prefer the ReadTimeout to be longer than the handler timeout, so the client has a chance of getting the response. Because ReadTimeout ticks away during the header read, the calculation for this is something like:&lt;/p>
&lt;pre tabindex="0">&lt;code>ReadTimeout := handler_timeout + ReadHeaderTimeout + wiggle_room
e.g.,
= 10s + 5s + 200ms
&lt;/code>&lt;/pre>&lt;p>So even if the header read takes 4.9s, we are still left with 10.3s for the body read &amp;ndash; slightly longer than the handler timeout.&lt;/p>
&lt;p>WriteTimeout covers from the end of the reads until the end of writing. If there&amp;rsquo;s no body to read, this is the whole post-header request time. So, we want it to be &lt;code>hander_timeout + wiggle_room&lt;/code>, so something like 10.2s.&lt;/p>
&lt;p>IdleTimeout&amp;hellip; is independent of any of this stuff. It seems common to set it to a couple of minutes.&lt;/p>
&lt;h3 id="aws-observations">
&lt;a class="heading-anchor" href="#aws-observations">
###
&lt;/a>
AWS observations
&lt;/h3>
&lt;p>Using an AWS load balancer in front of your Go server muddies the behaviour of some of these timeouts, but doesn&amp;rsquo;t completely obviate them.&lt;/p>
&lt;p>ALB seems to buffer all the incoming headers, so ReadHeaderTimeout does nothing. ALB&amp;rsquo;s timeout for reading headers appears to be 60 seconds.&lt;/p>
&lt;p>ALB doesn&amp;rsquo;t seem to have a body-read timeout (or at least not one shorter than a couple of minutes). It does seem to be buffering some of the incoming body, since the client can still send some data after the backend server has given up the connection. About 30 seconds after the server drops the connection, the load balance responds with 502 Bad Gateway.&lt;/p>
&lt;p>I didn&amp;rsquo;t test the write timeout, but I bet there isn&amp;rsquo;t one.&lt;/p>
&lt;p>The ALB idle timeout seems to be 60 seconds.&lt;/p></description></item><item><title>The Ethics of Driving Speed in Travel Time Estimation</title><link>https://adam-p.ca/blog/2021/11/ethics-travel-time/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2021/11/ethics-travel-time/</guid><description>&lt;p>How should travel time be estimated? What are the ethical implications of the approach taken?&lt;/p>
&lt;p>You enter your destination into your maps app. It finds a few likely routes. It determines the distance of each pretty easily. It checks traffic conditions along the routes. But we don&amp;rsquo;t yet have a travel time estimate. Time equals distance divided by speed, adjusted for traffic.&lt;/p>
&lt;p>What travel speed (traffic notwithstanding) does the app use?&lt;/p>
&lt;ol>
&lt;li>The speed limit along the route.&lt;/li>
&lt;li>The speed at which the app user typically drives along the route.&lt;/li>
&lt;li>The speed at which other motorists typically drive along the route.&lt;/li>
&lt;/ol>
&lt;p>We&amp;rsquo;ll set aside option #2 for now. There are many cases where the user has never made the trip that they&amp;rsquo;re planning. We&amp;rsquo;ll discuss an expanded version of it below.&lt;/p>
&lt;p>The problem with picking between the other two options is that a) most people drive above the speed limit&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> and b) doing so is breaking the law.&lt;/p>
&lt;p>If we use the speed limit method and our user drives the speed limit, our estimate is good. But most people drive faster than the speed limit, so our estimated time will typically be too high. The user will leave earlier than they need to, drive faster than we estimated, and arrive earlier than they intended to.&lt;/p>
&lt;p>If we use the typical speed method and our user drives the typical speed, our estimate is good. But if our user is in the minority of law-abiding motorists, we underestimate their travel time and the user arrives late.&lt;/p>
&lt;p>So there&amp;rsquo;s the quandary: The speed limit method is incorrect for most people and the typical speed method encourages illegal behaviour and punishes law-abiding drivers (by making them late).&lt;/p>
&lt;p>I think that the speed limit approach is more ethically palatable, because it encourages legal behaviour and because being early is almost always better than being late. But giving travel time estimates that are usually incorrect is extremely unappealing &amp;ndash; your maps app isn&amp;rsquo;t very good if one of your fundamental features is usually wrong.&lt;/p>
&lt;p>So what do maps apps do and what should they do? To be clear, I know nothing about this domain. I own a car and a cell phone and that&amp;rsquo;s the extent of my qualifications. But we can have fun thinking about it&amp;hellip;&lt;/p>
&lt;p>One approach could be to split the difference. Give a time estimate in between the speed limit and the speed people usually drive. This doesn&amp;rsquo;t feel great because a) it&amp;rsquo;s still usually going to assume an illegal speed, and b) it&amp;rsquo;s still likely to be incorrect for many people. Nevertheless, I feel like it&amp;rsquo;s probably a good approach. It still errs on the side of being early, is closer to being correct for more people than the speed limit approach, and will result in a smaller speeding fine if followed closely.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>It&amp;rsquo;s also worth mentioning that below a certain speeding threshold, the probability of getting a ticket approaches zero. (Though this claim is confounded by automated systems, like speeding cameras.)&lt;/p>
&lt;p>Another approach is to reintroduce option #2 from above, with some extra magic sprinkled on top. The app may not have seen the user drive the exact desired route before, but it has likely seen the user drive similar roads with similar speed limits and can make a very good guess about how fast the user will actually drive.&lt;/p>
&lt;p>This is a very nice approach. It results in the most accurate predictions for the most users. And it largely allows the app developers/ethicists (probably one and the same) to wash their hands of the charge that they&amp;rsquo;re requiring people to break the law to avoid being late. If the user was law-abiding, they&amp;rsquo;d get law-abiding directions!&lt;/p>
&lt;p>(For the brief amount of time before there&amp;rsquo;s any data about the user&amp;hellip; probably keep it clean by giving a speed-limit estimate.)&lt;/p>
&lt;p>I don&amp;rsquo;t know what apps really do. After messing around with Google Maps for a while I managed to &lt;a href="https://goo.gl/maps/8bjzqbrAkTg1QXh56">find a route&lt;/a>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> that seems to encourage breaking the speed limit.&lt;/p>
&lt;p>&lt;img src="./img/blog/401-travel-time.png" alt="Google maps travel time estimate showing 9 minutes for 16.4 kilometers">&lt;/p>
&lt;p>16.4 kilometers in 9 minutes is 109 kilometers per hour, and the speed limit on highway 401 is 100 km/h. But&amp;hellip; if that 9 minutes is rounded down from 9.9 minutes, then the speed drops to 99.4 km/h. And it did take me about 10 tries to find a route that exceeded the limit. (I hunted in the Toronto area because I know the speed limits, but there are probably much better, longer, traffic-free stretches elsewhere that would be better experiments. Except now it&amp;rsquo;s snowy everywhere that I know, and that will also surely factor into estimates.)&lt;/p>
&lt;p>Is it okay for a maps app to encourage us to ever break the legal speed limit, even if our previous behaviour &amp;ndash; or the behaviour of others on the same stretch of road &amp;ndash; indicates that we likely will anyway?&lt;/p>
&lt;p>Even seemingly mundane automated systems can have ethical impacts. As consumers of such systems we need to be cognizant of what behaviours such systems are pushing us towards (and away from), and we should get in the habit of consciously and explicitly asking ourselves how we&amp;rsquo;re being influenced.&lt;/p>
&lt;p>For those of us who are developers of such systems, we need to make a habit of consciously stepping back and thinking about the impact of our design decisions on our users. What&amp;rsquo;s optimal might not always be what&amp;rsquo;s ethical. And for any non-trivial ethical question, it should be discussed with others. It&amp;rsquo;s difficult to see the ethical traps in one&amp;rsquo;s own design and even harder to find better ways out of them &amp;ndash; the perspective of others is invaluable.&lt;/p>
&lt;p>Disclaimer: As I said above, I have no domain knowledge here. I did some googling to see if there was discussion or papers about this and found nothing, but it&amp;rsquo;s entirely likely I wasn&amp;rsquo;t searching for the right words.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>This might not be true everywhere, but it sure is where I live.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>There&amp;rsquo;s also a conversation worth having about the immorality of breaking the law to speed. And if the moral violation is lesser or greater depending on how badly you exceed the limit, or if being in sin is a binary state. Not a conversation I particularly want to have here, with myself, though.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Using a &lt;a href="https://www.google.ca/maps/dir/43.8049634,-79.133491/43.8671479,-78.9525895/@43.7902468,-79.1002391,12.33z/data=!4m2!4m1!3e0">longer link&lt;/a> in case that shortened one breaks.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Instructions on the ceiling</title><link>https://adam-p.ca/inco/2021/11/ftnu/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate><guid>https://adam-p.ca/inco/2021/11/ftnu/</guid><description>&lt;p>&lt;a href="https://fromtheneckupmassage.com/">From the Neck Up&lt;/a> does neck-up massage, including intra-oral. When the RMT has their fingers in your mouth it&amp;rsquo;s pretty hard to give directions. So there are hand signs for communicating with the RMT. And, since you&amp;rsquo;re laying on your back during the procedure, the guide to the signs are posted on the ceiling.&lt;/p>
&lt;p>&lt;img src="./img/inco/ftnu.jpg" alt="ceiling sign">&lt;/p></description></item><item><title>Timing attack mitigation must exclude network</title><link>https://adam-p.ca/blog/2021/11/constant-time-network/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2021/11/constant-time-network/</guid><description>&lt;p>TL;DR: When trying to prevent timing attacks (e.g., against login username enumeration) by making a request take constant time, make sure you exclude the network read and write time. If you don&amp;rsquo;t, an attacker can slow down their request to bypass it.&lt;/p>
&lt;p>I&amp;rsquo;ll be covering some background and contextual information here. If you don&amp;rsquo;t need it, skip to &amp;ldquo;Exclude network time from constant-time limiting&amp;rdquo;.&lt;/p>
&lt;h2 id="what-is-a-timing-attack">
&lt;a class="heading-anchor" href="#what-is-a-timing-attack">
##
&lt;/a>
What is a &amp;ldquo;timing attack&amp;rdquo;?
&lt;/h2>
&lt;p>Briefly, a timing attack (in this context) is when an attacker observes the time it takes for a server to handle a request to glean some information about the validity of the input they tried. The typical target for this attack is the login request, and in that context there are &amp;ndash; unsurprisingly &amp;ndash; two pieces of information that can be attacked: username and password.&lt;/p>
&lt;p>Here&amp;rsquo;s a typical login flow, which we&amp;rsquo;ll reference below:&lt;/p>
&lt;ol>
&lt;li>Read the request from the client.&lt;/li>
&lt;li>Parse the request. Check for basic validity.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>If the check fails, go to step 6, indicating a 400 response.&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>Look up the username in the DB. Retrieve the hashed&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> password.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>If the username is not found, go to step 6, indicating a 401 response.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>Hash the incoming password and compare against the stored one.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>If the password does not match, go to step 6, indicating a 401 response.&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>Do other work to set up the login session.&lt;/li>
&lt;li>Write the response to the client.&lt;/li>
&lt;/ol>
&lt;h3 id="testingdiscoveringenumerating-usernames">
&lt;a class="heading-anchor" href="#testingdiscoveringenumerating-usernames">
###
&lt;/a>
Testing/discovering/enumerating usernames
&lt;/h3>
&lt;p>The time that step #4 takes can be used to test for the existence of a username. If the username isn&amp;rsquo;t found in the DB, the response will come a little faster than if the username is found and then a password hash-and-compare occurs. So an attacker can try out usernames and watch the response time to find out when one exists in the database.&lt;/p>
&lt;p>(Note that multiple requests for a single username may be required to nail down the subtle timing differences.)&lt;/p>
&lt;p>An attacker might use this for testing variations on a single username to target a particular user, or might use huge common username lists or even brute force to enumerate all or nearly all of your users.&lt;/p>
&lt;h4 id="why-do-i-care">
&lt;a class="heading-anchor" href="#why-do-i-care">
####
&lt;/a>
Why do I care?
&lt;/h4>
&lt;p>Maybe you don&amp;rsquo;t. Maybe you respond with different information depending on whether the username or password is incorrect, because that&amp;rsquo;s more user-friendly. Maybe your site/service is innocuous, there&amp;rsquo;s no sensitive information, or everything is public. Maybe you&amp;rsquo;re confident that your web application firewall or CAPTCHA or other mitigations will prevent this kind of attack.&lt;/p>
&lt;p>&lt;em>I&lt;/em> care because &lt;a href="https://psiphon.ca">I work on a tool&lt;/a> that&amp;rsquo;s questionably legal in many countries. Users have a habit of putting their real name in their username or reusing usernames across multiple sites, many of which will connect that username to their real identity. So I &amp;ndash; and we &amp;ndash; think it best that we limit username testing as best we can (and encourage users to &lt;a href="https://psiphon.ca/en/faq.html#psicash-pseudonym">use pseudonyms&lt;/a>).&lt;/p>
&lt;h3 id="testing-passwords">
&lt;a class="heading-anchor" href="#testing-passwords">
###
&lt;/a>
Testing passwords
&lt;/h3>
&lt;p>A very bad and wrong way of checking for a password match is to do a simple string comparison on the plaintext password. First of all, you shouldn&amp;rsquo;t be storing plaintext passwords in your DB. Secondly, and relevant to timing attacks, doing a simple string comparison will result in different times taken depending on how many characters in the string match. The string comparison is likely doing a length equality check and then doing a character-by-character equality check, so it&amp;rsquo;s going to return false early as soon as there&amp;rsquo;s a mismatch.&lt;/p>
&lt;p>This is a solved problem. Use a library with a proper password-hashing algorithm, and use its constant-time equality function. (And don&amp;rsquo;t just binary-compare the hashes, since the time that takes might also leak something.)&lt;/p>
&lt;h3 id="other-types-of-requests">
&lt;a class="heading-anchor" href="#other-types-of-requests">
###
&lt;/a>
Other types of requests
&lt;/h3>
&lt;p>&amp;ldquo;Forgot my password&amp;rdquo; requests are similarly vulnerable. Typically, the user enters a username or email address, then there&amp;rsquo;s a lookup to see if the account exists and maybe whether the email address is confirmed, then a token gets generated and stored, then the recovery email is sent. As with the login flow, there are processing differences depending on whether the username or email is found or not, which means timing differences that can be used to discover if the input exists in the DB.&lt;/p>
&lt;p>The same considerations about caring mentioned above apply here as well.&lt;/p>
&lt;h2 id="mitigating-timing-attacks">
&lt;a class="heading-anchor" href="#mitigating-timing-attacks">
##
&lt;/a>
Mitigating timing attacks
&lt;/h2>
&lt;h3 id="preventing-automated-requests">
&lt;a class="heading-anchor" href="#preventing-automated-requests">
###
&lt;/a>
Preventing automated requests
&lt;/h3>
&lt;p>Using CAPTCHAs, rate limiting, or a web application firewall can help prevent automated requests that are attempting to enumerate your users. They won&amp;rsquo;t generally help with targeted username testing.&lt;/p>
&lt;p>You should certainly employ these kinds of measures, but my opinion is that they should be used alongside other mitigations.&lt;/p>
&lt;h3 id="randomizing-response-times-not-recommended">
&lt;a class="heading-anchor" href="#randomizing-response-times-not-recommended">
###
&lt;/a>
Randomizing response times (not recommended)
&lt;/h3>
&lt;p>If a random sleep is added to the processing of sensitive requests, then the response timing becomes more difficult to use for timing attacks. But only &amp;ldquo;more difficult&amp;rdquo; &amp;ndash; with enough timing samples, the average can be taken and the attack again becomes viable.&lt;/p>
&lt;h3 id="constant-time-responses">
&lt;a class="heading-anchor" href="#constant-time-responses">
###
&lt;/a>
Constant-time responses
&lt;/h3>
&lt;p>We&amp;rsquo;re getting closer to the point of this post now.&lt;/p>
&lt;p>Forcing responses to take a fixed amount of time prevents timing analysis. If every response, regardless of input, takes the same amount of time, there&amp;rsquo;s nothing to differentiate and analyze.&lt;/p>
&lt;p>The constant time value should be chosen to exceed the possible natural response time. There are likely going to be outliers where the natural response time exceeds the constant time &amp;ndash; you should log and alert these incidents, as they ruin the mitigation. But, generally, if they&amp;rsquo;re kept very infrequent they still won&amp;rsquo;t provide an attacker enough to work with.&lt;/p>
&lt;p>Another approach to constant-time excesses would be to have multiple increments of constants. Like, limit the response to 1 second; but if it naturally takes more than 1 second, limit it to 2 seconds; etc. I&amp;rsquo;m not sure if this is warranted or adds very much. I wouldn&amp;rsquo;t bother. You will also have to be very sure that, say, bad username doesn&amp;rsquo;t always end up in the first time increment while bad passwords always end up in the second.&lt;/p>
&lt;h4 id="exclusions">
&lt;a class="heading-anchor" href="#exclusions">
####
&lt;/a>
Exclusions
&lt;/h4>
&lt;p>Since we&amp;rsquo;re only trying to prevent an attacker from distinguishing between &amp;ldquo;bad username&amp;rdquo; and &amp;ldquo;good username but bad password&amp;rdquo;, then any situations that don&amp;rsquo;t reveal that can be excluded from having a constant-time response. For example:&lt;/p>
&lt;ul>
&lt;li>Successful login. The user knows that the username and password were both good, so a constant-time response achieves nothing except slowing down the valid-user experience.&lt;/li>
&lt;li>&amp;ldquo;400 Bad Request&amp;rdquo; responses. For example, if the username is too long or has invalid characters in it. No account lookup is done, so nothing is revealed.&lt;/li>
&lt;/ul>
&lt;p>It might be tempting to also exclude 500 server errors. In theory, something like a DB communication error shouldn&amp;rsquo;t reveal information about the username or password. But such errors can occur for many reasons, some of which may be repeatable by an attacker. It&amp;rsquo;s probably best to keep server errors constant-time, if possible. (Also, such errors should be extremely rare for benign users and shouldn&amp;rsquo;t significantly impact the experience of the service.)&lt;/p>
&lt;h2 id="exclude-network-time-from-constant-time-limiting">
&lt;a class="heading-anchor" href="#exclude-network-time-from-constant-time-limiting">
##
&lt;/a>
Exclude network time from constant-time limiting
&lt;/h2>
&lt;p>We&amp;rsquo;ve finally gotten to the point.&lt;/p>
&lt;p>When forcing a response to be constant time, the network portion of the request processing must be excluded. By this I mean the time taken to read the request from the client and the time taken to write the response. We&amp;rsquo;ll see that it&amp;rsquo;s both &lt;em>acceptable&lt;/em> and &lt;em>necessary&lt;/em> to do so.&lt;/p>
&lt;p>The login flow will end up looking like this:&lt;/p>
&lt;ol>
&lt;li>Read the request from the client.&lt;/li>
&lt;li>&lt;em>Record the response start time.&lt;/em>&lt;/li>
&lt;li>Parse the request. Check for basic validity.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>If the check fails, go to step 7, indicating a 400 response.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>Look up the username in the DB. Retrieve the hashed password.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>If the username is not found, go to step 7, indicating a 401 response.&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>Hash the incoming password and compare against the stored one.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>If the password does not match, go to step 7, indicating a 401 response.&lt;/li>
&lt;/ul>
&lt;ol start="6">
&lt;li>Do other work to set up the login session.&lt;/li>
&lt;li>&lt;em>Wait until the constant-time limit has passed since the start time.&lt;/em>&lt;/li>
&lt;li>Write the response to the client.&lt;/li>
&lt;/ol>
&lt;p>First of all, it is &lt;em>acceptable&lt;/em> to exclude the network transfers from the constant-time limit because they are completely unaffected by the validity of the input. Additionally, the attacker controls the network input (the request) and has full visibility of the network output (the response). There is nothing to hide here.&lt;/p>
&lt;p>Secondly, it is &lt;em>necessary&lt;/em> to exclude the network time.&lt;/p>
&lt;p>If the request read time is included in the constant-time consideration, the mitigation is effectively undermined. The attacker controls the client&amp;rsquo;s network speed, so they can trickle the request out until the constant-time limit is passed. Then they start measuring the response time from the point that the request writing is done. The server will then start processing the request. There will be no sleep in step #7 because the constant-time limit has already been exceeded, so the actual processing time will be plainly visible to the attacker.&lt;/p>
&lt;p>(If the &amp;ldquo;multiple increments of constants&amp;rdquo; approach is used, the attack is more complicated, but I believe it&amp;rsquo;s still viable. The attacker will need to tweak the request speed so that bad-username requests fall into the first increment while bad-password requests fall into the second. Anyway, this hardly matters, since it&amp;rsquo;s acceptable to exclude the request read time.)&lt;/p>
&lt;p>Excluding the response writing time is also necessary. As soon as the first byte of the response is written, the attacker is signaled that the processing is complete and they have the information they need so any constant-time sleeping needs to occur before the response writing is begun.&lt;/p>
&lt;h2 id="other-concerns">
&lt;a class="heading-anchor" href="#other-concerns">
##
&lt;/a>
Other concerns
&lt;/h2>
&lt;p>I worry about the attacker using a simultaneous request flood to slow down all other request processing enough that many or all login requests will exceed the constant-time limit and start revealing the true processing time. Sufficient capacity and/or scaling, combined with anti-denial-of-service measures should be sufficient to mitigate this. It will also be a pretty expensive &amp;ndash; and therefore unlikely &amp;ndash; approach for an attacker to take.&lt;/p>
&lt;h2 id="not-just-http">
&lt;a class="heading-anchor" href="#not-just-http">
##
&lt;/a>
Not just HTTP
&lt;/h2>
&lt;p>I wrote the above in terms of HTTP requests and responses, but it applies to any network protocol.&lt;/p>
&lt;h2 id="final-words">
&lt;a class="heading-anchor" href="#final-words">
##
&lt;/a>
Final words
&lt;/h2>
&lt;p>I&amp;rsquo;m writing this because when I was implementing this I screwed up by including the network transfer in the constant-time limit &amp;ndash; it felt cleanest to implement it as middleware, but that was at the wrong level. I only realized the problem while re-reading some tangentially-related code. Hopefully this helps someone else not make the same mistake.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Hashed using something appropriate, like argon2, scrypt, or bcrypt.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Make sure you have a backup Yubikey</title><link>https://adam-p.ca/blog/2021/06/backup-yubikey/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2021/06/backup-yubikey/</guid><description>&lt;p>For four years I carried a &lt;a href="https://support.yubico.com/hc/en-us/articles/360013714579-YubiKey-NEO">Yubikey NEO&lt;/a> (USB Type-A) in my pocket, on my keychain. And then it died (would no longer be recognized by any computer).&lt;/p>
&lt;p>&lt;a href="https://web.archive.org/web/20170212170854/https://www.yubico.com/products/yubikey-hardware/yubikey-neo">Yubikey&amp;rsquo;s durability claim&lt;/a> was:&lt;/p>
&lt;blockquote>
&lt;p>Crush-resistant and waterproof, YubiKey NEO is practically indestructible during normal use, weighs only 3g, and attaches to your keychain alongside your house and car keys&lt;/p>
&lt;/blockquote>
&lt;p>So, they didn&amp;rsquo;t explicitly say &amp;ldquo;carrying it on your keychain won&amp;rsquo;t kill it&amp;rdquo;, but they sure did imply it.&lt;/p>
&lt;p>The wording for their &lt;a href="https://www.yubico.com/ca/product/yubikey-5-nfc/">new USB Type-A products&lt;/a> is much more tepid:&lt;/p>
&lt;blockquote>
&lt;p>Design &amp;amp; Durability: Water Resistant, Crush Resistant&lt;/p>
&lt;/blockquote>
&lt;p>Luckily, a few months after I bought the first one I bought a backup that I stored safely, so I wasn&amp;rsquo;t much put out. Here are the two keys side-by-side &amp;ndash; click to see more detail than you need:&lt;/p>
&lt;a href="./img/blog/yubikeys.jpg">
&lt;img src="./img/blog/yubikeys.jpg" alt="two Yubikeys, one more worn than the other">
&lt;/a>
&lt;p>(After looking at that photo up close I realized that the problem could be that the two middle pins were touching. So I took a small screwdriver and carved them apart. And it works! But that doesn&amp;rsquo;t really undermine the point here, which is&amp;hellip;)&lt;/p>
&lt;p>So make sure you have a backup Yubikey 2FA hardware token, or you could be very unhappy when it gets damaged beyond use. Then you can carry your day-to-day key in your pocket without worry.&lt;/p></description></item><item><title>Dev Story: Unicode URL length limit blues</title><link>https://adam-p.ca/blog/2021/06/unicode-url-length/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2021/06/unicode-url-length/</guid><description>&lt;p>I have enjoyed reading other people&amp;rsquo;s design and debugging train-of-thought posts, so after I spent two days wrestling with a code problem, I thought I&amp;rsquo;d write it up. It&amp;rsquo;s not technically exciting, but I think that describing it might be useful to someone &amp;ndash; or my future self &amp;ndash; someday. Or, at the very least, a little amusing.&lt;/p>
&lt;p>(Bonus: While writing this I discovered an error I made while doing the actual work. See if you can spot it before I reveal it&amp;hellip;)&lt;/p>
&lt;h2 id="background">
&lt;a class="heading-anchor" href="#background">
##
&lt;/a>
Background
&lt;/h2>
&lt;h3 id="the-psiphon-for-windows-ui">
&lt;a class="heading-anchor" href="#the-psiphon-for-windows-ui">
###
&lt;/a>
The Psiphon for Windows UI
&lt;/h3>
&lt;p>Our &lt;a href="https://github.com/Psiphon-Inc/psiphon-windows">Psiphon for Windows&lt;/a> client uses an Internet Explorer-based HTML control as the GUI, talking to a C++ backend (which itself talks to the Go implementation of our censorship circumvention tech). It has been working reasonably well for the last 6 years. Before that we had a plain, grey-box, dialog-based win32 UI, but the idea of adding a settings UI and localizing everything prompted me to look for other approaches.&lt;/p>
&lt;p>We have strict executable size requirements, because many of our users have limited bandwidth, and because we run an auto-responder that emails our client software &amp;ndash; the Windows and Android clients attached to a single email. That ruled out a lot of fancy UI approaches, but using the native web control ended up working okay. It meant supporting Internet Explorer 7 through 11 as the HTML/CSS/JS engine, so it wasn&amp;rsquo;t always a lot of fun, but manageable. (And Go recently dropped support for Windows XP, which meant we could raise our minimum IE version to 8, which helps.)&lt;/p>
&lt;p>For this story, the relevant part of the JS&amp;lt;-&amp;gt;C++ communication is that when the JavaScript wants the C++ to start a login sequence, it does something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">window&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#75af00">location&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#d88200">&amp;#39;psi:psicash?{&amp;#34;command&amp;#34;:&amp;#34;login&amp;#34;,&amp;#34;username&amp;#34;:&amp;#34;abc&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;xyz&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The C++ code gets a window message when the location is going to change and figures out what to do with the URL. (And has the ability to trigger JS functions.)&lt;/p>
&lt;h3 id="psicash-accounts">
&lt;a class="heading-anchor" href="#psicash-accounts">
###
&lt;/a>
PsiCash accounts
&lt;/h3>
&lt;p>Psiphon has an in-app credit system called PsiCash. Users get credit by buying it or by certain rewarded activities. They can spend PsiCash on Speed Boost, which uncaps the network speed and expands the allowed ports.&lt;/p>
&lt;p>For the last year I&amp;rsquo;ve been working on implementing PsiCash user accounts. Until now a user&amp;rsquo;s PsiCash credit has been tied to a device (or a device&amp;rsquo;s local storage), but accounts will let the user&amp;rsquo;s balance roam across devices, be restored after device failure, and so on.&lt;/p>
&lt;p>A PsiCash account has a username and password. The PsiCash server is the ultimate arbiter of what&amp;rsquo;s allowed for the username and password. We use the &lt;a href="https://www.rfc-editor.org/rfc/rfc8264.html">PRECIS spec&lt;/a> for what characters are allowed, which is a pretty wide set (which is important to this story).&lt;/p>
&lt;p>We wanted to let the usernames and passwords be pretty long, but we &lt;a href="https://dev.to/mitchpommers/password-max-length-limits-are-dumb-but-we-need-them-1dpp">needed to give them fixed limits&lt;/a>. We&amp;rsquo;re allowing 200 bytes for the username and 800 bytes for the password. For the widest UTF-8 characters, that&amp;rsquo;s 50 code points and 200 code points, respectively. (For now let&amp;rsquo;s say that a &amp;ldquo;code point&amp;rdquo; is basically what you think of as a &amp;ldquo;character&amp;rdquo; or &amp;ldquo;letter&amp;rdquo;, except not always.)&lt;/p>
&lt;p>So, the implementation of accounts is pretty far along at this point, and I&amp;rsquo;m writing up test cases, and I&amp;rsquo;m thinking, &amp;ldquo;I should double-check some of these tests&amp;hellip;&amp;rdquo;&lt;/p>
&lt;h2 id="the-problems-begin">
&lt;a class="heading-anchor" href="#the-problems-begin">
##
&lt;/a>
The problems begin
&lt;/h2>
&lt;h3 id="too-many-bytes">
&lt;a class="heading-anchor" href="#too-many-bytes">
###
&lt;/a>
Too many bytes
&lt;/h3>
&lt;p>So I put a ton of letters into the username and password fields to see what will happen. And the JS &lt;code>window.onerror&lt;/code> handler catches this: &lt;strong>&amp;ldquo;The data area passed to a system call is too small&amp;rdquo;&lt;/strong>, and the C++ side doesn&amp;rsquo;t get the URL message.&lt;/p>
&lt;p>Googling for that error doesn&amp;rsquo;t help much. It can happen with &lt;a href="https://techcommunity.microsoft.com/t5/windows-dev-appconsult/desktop-bridge-8211-the-bridge-between-desktop-apps-and-the/ba-p/316488">Desktop Bridge&lt;/a> applications &lt;a href="https://support.microsoft.com/en-us/topic/kb4073393-fix-the-data-area-passed-to-a-system-call-is-too-small-error-when-you-start-a-desktop-bridge-application-on-a-sql-server-5ae0994d-023a-d32b-3aad-526500b53993">running on SQL Server&lt;/a>. There are hotfixes or Microsoft Management Console &lt;a href="https://www.minitool.com/news/the-data-area-passed-to-a-system-call-is-too-small.html">that can help&lt;/a>. None of those a) seem to apply, or b) are reasonable to ask our users to do.&lt;/p>
&lt;p>I found that passing 2020 or fewer bytes was fine, but passing 2022 or more bytes would trigger that error. But passing exactly 2021 bytes&amp;hellip; was even worse. It would open a browser tab with a URL that started like &lt;code style="white-space:initial;word-break:break-all">res://ieframe.dll/unknownprotocol.htm#psi:psicash?%7B%22command%22%3A%22login%22%2C%22id%22%3A%22MC4yOTc5MjI5MTY4ODU3MjI4%22%2C%22password%22%3A%2201234567890&amp;hellip;&lt;/code>. And there&amp;rsquo;s the user&amp;rsquo;s password in the browser address bar! (We&amp;rsquo;ll call this the &amp;ldquo;&amp;gt;2020 error&amp;rdquo;.)&lt;/p>
&lt;p>(This is surely due to &lt;a href="https://support.microsoft.com/en-us/topic/maximum-url-length-is-2-083-characters-in-internet-explorer-174e7c8a-6666-f4e0-6fd6-908b53c12246">IE having a URL length limit of 2048&lt;/a> for GET requests. I didn&amp;rsquo;t think of that at the time, and there was probably some URL overhead I wasn&amp;rsquo;t counting. Anyway, it doesn&amp;rsquo;t change the problem for me.)&lt;/p>
&lt;p>Throwing up obscure, non-actionable error messages is bad enough, but the browser tab thing is terrible. So this can&amp;rsquo;t be allowed to happen.&lt;/p>
&lt;h3 id="tangent-unicode">
&lt;a class="heading-anchor" href="#tangent-unicode">
###
&lt;/a>
Tangent: Unicode
&lt;/h3>
&lt;p>If you&amp;rsquo;re not familiar with Unicode and its encodings, you might want to &lt;a href="#unicode">skip down&lt;/a> and read the appendix about it. But here are some quick definitions of terms I&amp;rsquo;ll be using:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Unicode&lt;/strong>: The system of defining all the letters and characters and emoji and so on. Each Unicode entry has a 32-bit number assigned to it.&lt;/li>
&lt;li>&lt;strong>Code point&lt;/strong>: The 32-bit value that indicates a Unicode &amp;ldquo;character&amp;rdquo;.&lt;/li>
&lt;li>&lt;strong>UTF-8 and UTF-16&lt;/strong>: These are the common ways of actually encoding Unicode entries. UTF-8 uses between 1 and 4 single bytes, and UTF-16 uses 1 or 2 double bytes. JavaScript and Windows C++ (&lt;code>wchar_t&lt;/code>) use UTF-16. Almost everything else uses UTF-8.&lt;/li>
&lt;li>&lt;strong>Code unit&lt;/strong>: These are the individual chunks of an encoding &amp;ndash; the single bytes of UTF-8 or the double bytes of UTF-16.&lt;/li>
&lt;/ul>
&lt;p>So a single Unicode code point may be encoded by up to 4 UTF-8 code units (4 bytes total) or 2 UTF-16 code units (4 bytes total).&lt;/p>
&lt;h3 id="limit-the-input">
&lt;a class="heading-anchor" href="#limit-the-input">
###
&lt;/a>
Limit the input
&lt;/h3>
&lt;p>I hadn&amp;rsquo;t been limiting the username and password input fields because it didn&amp;rsquo;t seem necessary, for reasons like:&lt;/p>
&lt;ul>
&lt;li>It&amp;rsquo;s important that the login interface allow at least as many characters as the server will allow in the creation of an account.&lt;/li>
&lt;li>The bytes vs graphemes distinction makes things a little murky.&lt;/li>
&lt;li>If we decided to raise the limit on the server side, it&amp;rsquo;d be nice if the clients just worked.&lt;/li>
&lt;li>If the user enters too many characters&amp;hellip; Then they&amp;rsquo;re entering bad credentials, and that&amp;rsquo;s really up to them.&lt;/li>
&lt;/ul>
&lt;p>But allowing the user to hit the &amp;gt;2020 bytes error is unacceptable, so I needed to add input limiting. The &lt;code>&amp;lt;input&amp;gt;&lt;/code> element&amp;rsquo;s &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength">&lt;code>maxlength&lt;/code> attribute&lt;/a> seemed like an easy-and-sufficient way to do that.&lt;/p>
&lt;p>&lt;code>maxlength&lt;/code> is supposed to limit by UTF-16 code &lt;em>unit&lt;/em>, and does so in modern browsers, which is kind of weird. That means that &amp;ldquo;🍕&amp;rdquo; and &amp;ldquo;𪘀&amp;rdquo; count as &lt;em>two&lt;/em> towards the length. Probably not coincidentally, that&amp;rsquo;s how JS&amp;rsquo;s &lt;code>String.length&lt;/code> works: &lt;code>&amp;quot;🍕&amp;quot;.length === 2&lt;/code>. There&amp;rsquo;s no mention on MDN or CanIUse of IE deviating from this (that I can find), but it does &amp;ndash; &lt;code>maxlength&lt;/code> counts code &lt;em>points&lt;/em>, not code &lt;em>units&lt;/em>. Which is great! It means I can set &lt;code>maxlength=50&lt;/code> and get the expected username limiting &amp;ndash; no custom validators required.&lt;/p>
&lt;p>But it would still be nice to provide more space for input, because of the reasons I had for not limiting in the first place. So let&amp;rsquo;s do a little math:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// We want to be sure we don&amp;#39;t hit the ~2020 limit. Let&amp;#39;s say 1900 is a safe maximum.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75af00">absolute_byte_limit&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1900&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">bytes_per_code_point&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">allowed_code_points&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#75af00">absolute_byte_limit&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#75af00">bytes_per_code_point&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">475&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So we have something like a 475 code point allowance to split between username and password. Let&amp;rsquo;s say 75 for the username and 400 for the password (we won&amp;rsquo;t be staying here, so it doesn&amp;rsquo;t really matter).&lt;/p>
&lt;h3 id="simple-change-quick-test-famous-last-words">
&lt;a class="heading-anchor" href="#simple-change-quick-test-famous-last-words">
###
&lt;/a>
Simple change, quick test (famous last words)
&lt;/h3>
&lt;p>So I use my numbered input of &lt;code>0123456789&lt;/code>, repeated, to fill the max lengths. Works as expected.&lt;/p>
&lt;p>Then I try with big long string of &amp;ldquo;𪘀&amp;rdquo; and hit the &amp;gt;2020 error. Ugh.&lt;/p>
&lt;p>The &lt;code>&amp;lt;input maxlength=&amp;quot;400&amp;quot;&amp;gt;&lt;/code> limiter is working, so that&amp;rsquo;s not the problem.&lt;/p>
&lt;p>Inspecting the incoming URL on the C++ side reveals the problem: I&amp;rsquo;m calling &lt;code>encodeURIComponent&lt;/code> on the query parameters part (after the &lt;code>?&lt;/code>) of the URL. So each &amp;ldquo;𪘀&amp;rdquo; becomes &amp;ldquo;%F0%AA%98%80&amp;rdquo;. That means the 4 bytes of the UTF-8 (or UTF-16) code point becomes 12 bytes &amp;ndash; there are 3 one-byte characters per byte of UTF-8.&lt;/p>
&lt;p>Let&amp;rsquo;s do the math again:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">absolute_byte_limit&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1900&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">bytes_per_code_point&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#75715e">// 4x UTF-8 code units, 3 bytes per code unit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75af00">allowed_code_points&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#75af00">absolute_byte_limit&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#75af00">bytes_per_code_point&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">158.3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So&amp;hellip; 158 allowed code points? But we need to allow at least 50+200 code points for the username+password. Time to advance to the next level of problem.&lt;/p>
&lt;p>(Disclosure: I have the juice to change the username and password limits. But I don&amp;rsquo;t want to and this seems like a weak reason to do so.)&lt;/p>
&lt;h3 id="the-best-encoding-is-no-or-little-encoding">
&lt;a class="heading-anchor" href="#the-best-encoding-is-no-or-little-encoding">
###
&lt;/a>
The best encoding is no (or little) encoding?
&lt;/h3>
&lt;p>The most obvious thing to try to alleviate the encoding bloat is to just remove &lt;code>encodeURIComponent&lt;/code>. And it works fine. It appears that the code points are going through as UTF-16 binary &amp;ndash; taking up the minimum possible bytes &amp;ndash; and both the JS and C++ sides were happy.&lt;/p>
&lt;p>Then I try a space in the password and it automatically gets encoded as &lt;code>%20&lt;/code> (the code point for the space character is &lt;code>U+0020&lt;/code> and so &lt;code>%20&lt;/code> is the URL-escaped UTF-8-encoded version of it).&lt;/p>
&lt;p>That&amp;rsquo;s a bit of a wrinkle, but fine. I could put the URL-decode call back into the C++ code. Except&amp;hellip; what if there happens to also be the percent-and-two-numbers sequence naturally occurring in the password? We&amp;rsquo;ll unintentionally be altering it. For example: If the password is &lt;code>x%41y&lt;/code>, it would get URL-decoded to &lt;code>xAy&lt;/code>.&lt;/p>
&lt;p>After doing some research to satisfy myself that percent-encoding is the only thing going on in URLs, I decide that I only need to percent-encode the percent sign. So the password &lt;code>x y%20z&lt;/code> becomes &lt;code>x%20y%2520z&lt;/code> (&lt;code>%25&lt;/code> being the percent-encoded percent sign) in the URL. URL-decoding will reverse that value properly.&lt;/p>
&lt;p>So, yay? We&amp;rsquo;re back to a reasonable number of bytes. Even a password of 50 percent signs (the only thing getting escaped) will still only bloat to 150 bytes.&lt;/p>
&lt;h3 id="but-then-ie8-strikes">
&lt;a class="heading-anchor" href="#but-then-ie8-strikes">
###
&lt;/a>
But then IE8 strikes
&lt;/h3>
&lt;p>I do all my development on a Windows 10 machine, with IE 11. The installed IE version is what gets used for the web control in the app. IE 11 has a handy developer tool that lets you test in various even-older-IE modes. But it&amp;rsquo;s not always 100% accurate, so sometimes I fire up a &lt;a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/">Windows 7 VM with IE 8, 9, or 10&lt;/a> installed to test for real.&lt;/p>
&lt;p>The simple-ASCII-characters-only test works fine in the Win7+IE8 VM. The test with the maximum count of &amp;ldquo;𪘀&amp;rdquo; does not.&lt;/p>
&lt;p>Again, I inspect the URL coming into the backend (which is a bit harder now, because I don&amp;rsquo;t have a development environment in the VM). And it looks like IE8 is automatically encoding &amp;ldquo;𪘀&amp;rdquo; as &lt;code>\ud869\ude00&lt;/code> (the two-code-unit UTF-16 encoding). Which is &lt;em>again 12 bytes instead of 4&lt;/em>.&lt;/p>
&lt;p>I start getting pretty frustrated at this point.&lt;/p>
&lt;h3 id="when-all-else-fails-base64">
&lt;a class="heading-anchor" href="#when-all-else-fails-base64">
###
&lt;/a>
When all else fails, base64
&lt;/h3>
&lt;p>So how do I get only ASCII characters in the URL, without bloating by a factor of 3x? How about base64-encoding? That gives us ASCII and a size increase of 33%, which is tolerable.&lt;/p>
&lt;p>Let&amp;rsquo;s check the math:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">absolute_byte_limit&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1900&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">bytes_per_code_point&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#75715e">// 2x UTF-16 code units
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75af00">base64_bloat&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1.33&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">allowed_code_points&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#75af00">absolute_byte_limit&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#75af00">bytes_per_code_point&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#75af00">base64_bloat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">357&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That gives us an extra 100 code points to play with above our absolute limit of 50+200. Phew!&lt;/p>
&lt;p>So, I change the encoding to be &lt;code>btoa(JSON.stringify(payload))&lt;/code>, with appropriate decoding on the C++ side. Works as expected on Win10.&lt;/p>
&lt;p>Doesn&amp;rsquo;t work at all on Win7+IE8. Oh right, forgot, there is no &lt;code>btoa&lt;/code> in IE8. But we already have a polyfill for that, so I just swap it in and try again.&lt;/p>
&lt;p>And, again, the &lt;em>URL is still too long&lt;/em>. I&amp;rsquo;m losing my mind a little bit now.&lt;/p>
&lt;h3 id="re-polyfill-json">
&lt;a class="heading-anchor" href="#re-polyfill-json">
###
&lt;/a>
Re-polyfill JSON
&lt;/h3>
&lt;p>After weeping a little and doing some MessageBox-ing and digging, I realize that the culprit now is IE8&amp;rsquo;s &lt;code>JSON.stringify&lt;/code>.&lt;/p>
&lt;p>Here&amp;rsquo;s IE9, IE10, IE11, and every other browser:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">JSON&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#75af00">stringify&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;𪘀&amp;#34;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&amp;gt;&lt;/span> &lt;span style="color:#d88200">&amp;#39;&amp;#34;𪘀&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here&amp;rsquo;s IE8:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">JSON&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#75af00">stringify&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#d88200">&amp;#34;𪘀&amp;#34;&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&amp;gt;&lt;/span> &lt;span style="color:#d88200">&amp;#39;&amp;#34;\ud869\ude00&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Well that&amp;rsquo;s JUST GREAT.&lt;/p>
&lt;p>I think for a few minutes about how encode objects without using JSON, but that&amp;rsquo;s dumb. And then I remember that, until recently, we used a &lt;a href="https://github.com/douglascrockford/JSON-js">JSON polyfill&lt;/a> because we still supported WinXP+IE7 (which doesn&amp;rsquo;t have JSON support). So I try out the polyfill code in the IE8 console and&amp;hellip; it gives the desired output! Oh, thank goodness.&lt;/p>
&lt;p>So I modify the polyfill code to always replace the native JSON and conditionally include it for IE8.&lt;/p>
&lt;p>And test. And it works. Everywhere. For every input.&lt;/p>
&lt;h2 id="do-you-see-the-mistake-i-made">
&lt;a class="heading-anchor" href="#do-you-see-the-mistake-i-made">
##
&lt;/a>
Do you see the mistake I made?
&lt;/h2>
&lt;p>And later I decide that maybe this story would be amusing or educational for someone, so I should write up a blog post. And as I&amp;rsquo;m writing this blog post I realize that I got something wrong. This:&lt;/p>
&lt;blockquote>
&lt;p>it looks like IE8 is automatically encoding &amp;ldquo;𪘀&amp;rdquo; as &lt;code>\ud869\ude00&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>Nope. It was JSON doing that, not &amp;ldquo;automatic encoding&amp;rdquo;. Having encountered the space&amp;ndash;&amp;gt;&lt;code>%20&lt;/code> automatic encoding, I think I was primed to lazily attribute more unexpected behaviour to magic.&lt;/p>
&lt;p>Now, with the JSON polyfill replacement, I could go back to just percent-encoding-percent and regain even more code point space in the URL.&lt;/p>
&lt;p>I don&amp;rsquo;t think I will, though. I can&amp;rsquo;t shake the question: &amp;ldquo;Is there anything besides percent-encoding that &lt;code>InternetCanonicalizeUrl(ICU_DECODE)&lt;/code> (the win32 URL decode function) will try to decode?&amp;rdquo; If there is, then some user&amp;rsquo;s password will be unusable, and it&amp;rsquo;ll be super hard to diagnose. At the bottom of every email we say, &amp;ldquo;Psiphon will never ask you for your password&amp;rdquo;, so we can&amp;rsquo;t possibly figure out what&amp;rsquo;s wrong with it!&lt;/p>
&lt;p>Fuzzing might be able to find other cases? Or maybe there&amp;rsquo;s source code for &lt;code>InternetCanonicalizeUrl&lt;/code> that I can inspect (and hope it&amp;rsquo;s the same across Win 7, 8, 8.1, and 10)? But I already spent &lt;em>way too long&lt;/em> on this and I can&amp;rsquo;t spend any more. Time to move on.&lt;/p>
&lt;h2 id="this-is-an-edited-rendition">
&lt;a class="heading-anchor" href="#this-is-an-edited-rendition">
##
&lt;/a>
This is an edited rendition
&lt;/h2>
&lt;p>This may read like a logical progression of problems, investigations, and (attempted) solutions, but it was so much messier than that. This was my primary task for &lt;em>two days&lt;/em> (not my &lt;em>only&lt;/em> task, but still).&lt;/p>
&lt;p>It was a painful cycle of:&lt;/p>
&lt;ol>
&lt;li>Think everything works.&lt;/li>
&lt;li>Test, expecting success.&lt;/li>
&lt;li>Get weird results.&lt;/li>
&lt;li>Debug, usually in VMs with the &lt;code>alert&lt;/code>-and-&lt;code>MessageBox&lt;/code> version of printfs.&lt;/li>
&lt;li>Search for explanations. Read MSDN pages, Wikipedia pages, and anything else that might make it make sense.&lt;/li>
&lt;li>Think of what to do to avoid the problem. Try stuff. Make it nominally work on Win10+IE11.&lt;/li>
&lt;li>Repeat.&lt;/li>
&lt;/ol>
&lt;p>(You know what didn&amp;rsquo;t help? Running out of disk space while trying to work with VMs.)&lt;/p>
&lt;p>There was also much, &lt;em>much&lt;/em> more profanity than I have allowed here.&lt;/p>
&lt;hr>
&lt;p>&lt;a name="unicode" href="#">&lt;/a>&lt;/p>
&lt;h2 id="appendix-unicode-stuff-as-i-know-it">
&lt;a class="heading-anchor" href="#appendix-unicode-stuff-as-i-know-it">
##
&lt;/a>
Appendix: Unicode stuff, as I know it
&lt;/h2>
&lt;p>I am not a Unicode pro, and quite a bit of what I know I learned during this work. I&amp;rsquo;ll give a quick-and-dirty description so we can be on the same page.&lt;/p>
&lt;p>So, Unicode is a big list of, like, letters and characters and stuff. Each one gets a 32-bit number assigned to it (although there are only 24-bits actually used). &amp;ldquo;A&amp;rdquo; is &lt;code>0x00000041&lt;/code> (65 in decimal), &amp;ldquo;あ&amp;rdquo; is &lt;code>0x00003042&lt;/code> (12354), &amp;ldquo;🍕&amp;rdquo; is &lt;code>0x0001F355&lt;/code> (127829), &amp;ldquo;𪘀&amp;rdquo; is &lt;code>0x0002A600&lt;/code> (173568). These numbers are often written like &lt;code>U+0041&lt;/code>, without so many leading zeros.&lt;/p>
&lt;p>Those 32-bit Unicode numbers are &amp;ldquo;code points&amp;rdquo;. Some represent &amp;ldquo;graphemes&amp;rdquo; (rendered entities), but some are accents and whatnot that are to be combined with other code points.&lt;/p>
&lt;p>(Tangent within a tangent: Some things that you might think of as a single &amp;ldquo;character&amp;rdquo;, like the &amp;ldquo;keycap digit one&amp;rdquo; emoji &amp;ldquo;1️⃣&amp;rdquo;, are actually &amp;ldquo;grapheme clusters&amp;rdquo;. In the case of &amp;ldquo;1️⃣&amp;rdquo;, it&amp;rsquo;s actually a combination of three code points: the usual ASCII number &amp;ldquo;1&amp;rdquo;, the &amp;ldquo;VARIATION SELECTOR-16&amp;rdquo; (&lt;code>U+FE0F&lt;/code>), and the &amp;ldquo;COMBINING ENCLOSING KEYCAP&amp;rdquo; (&lt;code>U+20E3&lt;/code>).)&lt;/p>
&lt;p>So, think of &amp;ldquo;Unicode&amp;rdquo; as an abstract list of code points. Then we need to actually encode those code points.&lt;/p>
&lt;p>The most direct approach is called UTF-32. It uses 32 bits to encode the 32-bit code point. But the vast majority of code points in common use don&amp;rsquo;t need all 32 bits, so this is a pretty inefficient encoding.&lt;/p>
&lt;p>The most common encoding is UTF-8. It uses between one and four 8-bit &amp;ldquo;code units&amp;rdquo; to encode a code point. It has the very nice property of encoding English letters, numbers, and punctuation exactly the same as they are in ASCII. If you&amp;rsquo;re encoding text, use UTF-8.&lt;/p>
&lt;p>But JavaScript and Windows use UTF-16. It uses one or two 16-bit code units to encode a code point. Some quick &lt;a href="https://en.wikipedia.org/wiki/UTF-16#History">Wikipedia reading&lt;/a> suggests that, once upon a time, 16 bits were thought to be enough for Unicode code points. JavaScript and Windows probably adopted that early (UCS2) spec, and then were stuck with it for legacy reasons. UTF-16 is compatible with that old spec, and here we are.&lt;/p></description></item><item><title>The short happy life of the Breached extension</title><link>https://adam-p.ca/blog/2019/05/breached/</link><pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2019/05/breached/</guid><description>&lt;p>In October 2017, Troy Hunt of &lt;a href="https://haveibeenpwned.com/">Have I Been Pwned&lt;/a> held a &lt;a href="https://www.troyhunt.com/do-something-awesome-with-have-i-been-pwned-and-win-a-lenovo-thinkpad/">contest&lt;/a> inviting people to do something cool with the HIBP API. I decided a) that I would kind of like the special edition ThinkPad he was giving away, and b) that I could probably whip something up pretty quickly.&lt;/p>
&lt;p>I decided to create a browser extension that would simply pull HIBP breach information and show a browser notification &amp;ndash; with the ability to view extra info &amp;ndash; when the user visited a site that had been breached. And so was born the &lt;a href="https://github.com/adam-p/breached">Breached extension&lt;/a>. (Spoiler: I didn&amp;rsquo;t win.)&lt;/p>
&lt;blockquote>
&lt;p>For non-technical readers: A &amp;ldquo;breach&amp;rdquo;, in this context, is when a hacker obtains the user database of a website. A breach generally includes email addresses, passwords (in some form), maybe credit cards, and other stuff you don&amp;rsquo;t want a hacker to have. So &amp;ldquo;breach information&amp;rdquo; about a website tells you that a breach occurred, when it happened, what data was stolen, and how much of it. Which is the kind of thing you should know about before using that website!&lt;/p>
&lt;/blockquote>
&lt;p>A month after I released the extension, someone created an issue pointing out that Mozilla &lt;a href="https://github.com/adam-p/breached/issues/5">&amp;ldquo;started working on integrating haveibeenpwned.com warnings into Firefox&amp;rdquo;&lt;/a>. (As I promised there I did (nominally) reach out, but it didn&amp;rsquo;t go anywhere.) A year later that project turned into &lt;a href="https://monitor.firefox.com/">Firefox Monitor&lt;/a>.&lt;/p>
&lt;p>So, Breached is basically redundant on Firefox. In a sense I&amp;rsquo;m bummed, but I&amp;rsquo;m more flattered &amp;ndash; it was obviously a pretty okay idea!&lt;/p>
&lt;p>Monitor has a different &lt;a href="https://blog.mozilla.org/security/2018/11/14/when-does-firefox-alert-for-breached-sites/">notification policy&lt;/a>: They only show alerts for sites that have been breached within the last two months. (If I&amp;rsquo;m reading that right. I think the 12-month part is a one-off and is likely just to increase the number of people that will ever see a notification). Breached&amp;rsquo;s policy is&amp;hellip; just, like, show them all. Because I didn&amp;rsquo;t think about that while coding it. I think Monitor&amp;rsquo;s time-limit is better, since many sites will have sorted themselves out and don&amp;rsquo;t deserve a black mark for all time, so I &lt;a href="https://github.com/adam-p/breached/issues/6">might also add a time limit&lt;/a>. (I don&amp;rsquo;t find the notifications noisy, but maybe I just don&amp;rsquo;t visit enough shady sites.)&lt;/p>
&lt;p>In case you&amp;rsquo;re wondering what Monitor notifications look like, here&amp;rsquo;s one:&lt;/p>
&lt;p class="text-center">
&lt;img src="./img/blog/firefox-monitor-breach.png" alt="Firefox Monitor breach notification"
style="max-width: 600px;">
&lt;/p>
&lt;p>And here is Breached&amp;rsquo;s notification:&lt;/p>
&lt;p class="text-center">
&lt;img src="./img/blog/breached-notification.png" alt="Breached's breach notification"
style="max-width: 400px;">
&lt;/p>
&lt;p>And the additional-detail popup:&lt;/p>
&lt;p class="text-center">
&lt;img src="./img/blog/breached-popup.png" alt="Breached's additional detail popup">
&lt;/p>
&lt;p>Well, at least Breached is still relevant on Chrome! For now&amp;hellip;&lt;/p></description></item><item><title>First Post: someone's last post</title><link>https://adam-p.ca/inco/2017/01/first-post/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://adam-p.ca/inco/2017/01/first-post/</guid><description>&lt;p>I often come across digital and physical interface designs that are either great (coherent) or terrible (incoherent). For some mysterious reason I&amp;rsquo;ve been wanting to capture such interfaces and share them.&lt;/p>
&lt;p>To start, a curious headstone.&lt;/p>
&lt;p>The goal of the design of a headstone is to be read by the living. For a few decades some of the people who read it will have known the deceased, but many won&amp;rsquo;t, and after a while no one will have personally known them. The design of this headstone ensures that it will get more reading-attention than an ordinary headstone. I certainly stood in front of it longer than any other, while figuring out how to decipher and read it.&lt;/p>
&lt;p>It&amp;rsquo;s just the right degree of indecipherable. You can instantly tell that there&amp;rsquo;s something there to read and that it probably won&amp;rsquo;t require you to bust out pen and paper to do frequency analysis or ROT-13. It&amp;rsquo;s just hard enough to keep you standing there for a few minutes, and no harder.&lt;/p>
&lt;p>&lt;img src="./img/inco/headstone.jpg" alt="headstone">&lt;/p></description></item><item><title>Markdown Here: Splitting the Firefox and Thunderbird Extension</title><link>https://adam-p.ca/blog/2016/07/mdh-dividing-firefox-and-thunderbird/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2016/07/mdh-dividing-firefox-and-thunderbird/</guid><description>&lt;p>[This started as notes to myself to help clarify the problem and solution. It&amp;rsquo;s probably more suited to a Github issue than a blog post, and it may get copied into one.]&lt;/p>
&lt;h1 id="the-story-so-far">
&lt;a class="heading-anchor" href="#the-story-so-far">
#
&lt;/a>
The story so far
&lt;/h1>
&lt;p>The Firefox and Thunderbird versions of &lt;a href="https://markdown-here.com/">Markdown Here&lt;/a> both used nearly the same code &amp;ndash; an old-style XUL extension. Tb is only capable of using a XUL extension, while Fx supports at least three extension types: &lt;a href="https://developer.mozilla.org/en-US/Add-ons/Overlay_Extensions/XUL_School">XUL-based&lt;/a>, &lt;a href="https://developer.mozilla.org/en-US/Add-ons/SDK">Add-on SDK&lt;/a> (aka Jetpack, aka jpm), and &lt;a href="https://developer.mozilla.org/en-US/Add-ons/WebExtensions">WebExtensions&lt;/a>. WebExtensions is the newest, and is essentially an implementation of Chrome&amp;rsquo;s extension API.&lt;/p>
&lt;p>I&amp;rsquo;ve kept my eye on WebExtensions because it&amp;rsquo;s tempting to be able to use identical code across the many major browsers: Chrome, Firefox, Opera, and Edge(?). It seemed premature to do any real work towards using it as it&amp;rsquo;s not yet fully released, and there would be no perceived benefit to users (it&amp;rsquo;s a more-locked-down extension API, so there would be an imperceptible sercurity benefit).&lt;/p>
&lt;p>But&amp;hellip; Firefox&amp;rsquo;s multi-process &lt;a href="https://wiki.mozilla.org/Electrolysis">Electrolysis&lt;/a> (E10s) update is nearing release, and &lt;a href="https://github.com/adam-p/markdown-here/issues/207">it breaks MDH&lt;/a>. There are two ways to go about fixing this:&lt;/p>
&lt;ol>
&lt;li>Figure out what&amp;rsquo;s wrong in the XUL extension and correct it.&lt;/li>
&lt;li>Switch to WebExtensions.&lt;/li>
&lt;/ol>
&lt;p>I tried to figure out why E10s is breaking the XUL extension, but without any success. Maybe I could figure it out if I tried longer/harder? Or maybe not.&lt;/p>
&lt;p>I did some testing (and fixing) to make WebExtensions work, and it seems like the best option.&lt;/p>
&lt;h1 id="the-big-problem-splitting-up-fx-and-tb">
&lt;a class="heading-anchor" href="#the-big-problem-splitting-up-fx-and-tb">
#
&lt;/a>
The big problem: Splitting up Fx and Tb
&lt;/h1>
&lt;p>Until now, the Firefox and Thunderbird extensions were literally the same extension &amp;ndash; I upload a single file to Mozilla and check off the &amp;ldquo;Firefox&amp;rdquo; and &amp;ldquo;Thunderbird&amp;rdquo; boxes. There is only one extension ID for both. But Thunderbird only supports XUL extensions, so it&amp;rsquo;ll probably be using the XUL version forever.&lt;/p>
&lt;p>We clearly have a problem: Fx and Tb will have to use fundamentally different extensions, but right now there&amp;rsquo;s only one extension for both. We&amp;rsquo;re going to have to split the userbase. And it&amp;rsquo;s going to be ugly.&lt;/p>
&lt;p>Specifically, it&amp;rsquo;s going to be very ugly for either the Firefox users &lt;em>or&lt;/em> the Thunderbird users. One platform will receive a message saying, &amp;ldquo;If you want Markdown Here to keep working for you, uninstall the one you have and go install this other one.&amp;rdquo; (The other platform will see no difference.) Ugh. That&amp;rsquo;s going to cost us some users for sure.&lt;/p>
&lt;p>According to the &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/markdown-here/statistics/usage/applications/?last=30">Mozilla stats for MDH&lt;/a>, there are two-thirds as many Thunderbird daily users of MDH as Firefox daily users. That makes it somewhat preferable to make life difficult for Tb users rather than Fx users.&lt;/p>
&lt;p>However, I think it&amp;rsquo;s Firefox users who will have to jump through hoops. The XUL extension will still work in Firefox to a sufficient degree to show a message to the user. The WebExtensions extension will not work at all in Thunderbird. So existing Thunderbird users simply cannot be given the WebExtensions version, therefore the WebExtensions version must be the new, separate extension. Therefore it&amp;rsquo;s the Firefox users who must suffer.&lt;/p>
&lt;p>(A couple of caveats: 1. I have asked in the &lt;a href="https://discourse.mozilla-community.org/t/best-way-to-split-thunderbird-and-firefox-users-because-webextensions/9717">Mozilla extension dev forum&lt;/a> for suggestions for how to do this gracefully; so for I&amp;rsquo;ve received one reply, but it&amp;rsquo;s even more painful. 2. I have a terrible feeling that there actually is a graceful way to do this and I&amp;rsquo;m just not seeing it.)&lt;/p>
&lt;h1 id="the-plan-such-as-it-is">
&lt;a class="heading-anchor" href="#the-plan-such-as-it-is">
#
&lt;/a>
The plan, such as it is
&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Get the WebExtensions work done. (Most of the effort now is going to be building the separate versions in a sane way.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Release the brand new WebExtensions version, with a separate ID. (And update the website to point to it, etc.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Release a new XUL version that does nothing but show Firefox users a message telling them what they need to do to upgrade. (And explaining and apologizing profusely.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Watch how many users are lost.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The E10s rollout is supposed to be gradual, so I plan on continuing to support Firefox in the XUL version for the time being, and continuing to show the switch-message when Firefox is detected.&lt;/p>
&lt;p>&lt;strong>Outstanding question:&lt;/strong> Continue using Addons.Mozilla.Org (aka AMO, aka the main Firefox extension site) or self-host. I&amp;rsquo;ve gone through &lt;a href="https://github.com/adam-p/markdown-here/issues/21">ridiculous hassle&lt;/a> getting MDH approved in the past, and I don&amp;rsquo;t want to do it again. Ever. (This is exacerbated by the fact that I&amp;rsquo;m planning on replacing the Markdown rendering library, and I fear push-back from the AMO reviewers for using a lot of third-party code that&amp;rsquo;s not pre-approved.) The downside of self-hosting is that MDH won&amp;rsquo;t show up in AMO searches, which is surely where a lot of users go when looking for a Firefox extension (versus googling).&lt;/p>
&lt;p>(The current Firefox and Thunderbird extension is also used by Pale Moon, which is a Firefox fork, and Postbox and Ice Dove, which are Thunderbird forks. There aren&amp;rsquo;t enough users of them to change any of the rationale, and it &lt;a href="https://forum.palemoon.org/viewtopic.php?t=6660">looks like&lt;/a> Pale Moon &lt;a href="https://forum.palemoon.org/viewtopic.php?t=12216">won&amp;rsquo;t be using&lt;/a> E10s. So there&amp;rsquo;s Firefox, and then everything else.)&lt;/p></description></item><item><title>Android Non-Vulnerability: Steal a Device and Keep it Unlocked</title><link>https://adam-p.ca/blog/2016/05/smart-lock-mock-location/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2016/05/smart-lock-mock-location/</guid><description>&lt;p>While poking around in my Android phone&amp;rsquo;s developer options, I realized that &lt;strong>if you steal a phone that&amp;rsquo;s currently unlocked because it&amp;rsquo;s in a &amp;ldquo;trusted place&amp;rdquo;, then you can force it to remain unlocked forever&lt;/strong>. (And then I got schooled about that not being a problem.)&lt;/p>
&lt;h2 id="security-feature-smart-lock-with-trusted-places">
&lt;a class="heading-anchor" href="#security-feature-smart-lock-with-trusted-places">
##
&lt;/a>
Security Feature: Smart Lock with Trusted Places
&lt;/h2>
&lt;p>&lt;a href="https://support.google.com/nexus/answer/6093922?hl=en">Android&amp;rsquo;s Smart Lock&lt;/a> allows users to configure conditions under which to keep the phone unlocked. One of the conditions is location &amp;ndash; you can set trusted locations where your phone shouldn&amp;rsquo;t prompt for a PIN/pattern/password when unlocking.&lt;/p>
&lt;p>This is a pretty great feature. It&amp;rsquo;s difficult to convince people that the security gained by using a PIN outweighs the inconvenience of constantly entering it. Smart Lock helps mitigate the inconvenience by not requiring the user to constantly enter the PIN at home or at the office.&lt;/p>
&lt;h2 id="developer-feature-mock-location">
&lt;a class="heading-anchor" href="#developer-feature-mock-location">
##
&lt;/a>
Developer Feature: Mock Location
&lt;/h2>
&lt;p>If you&amp;rsquo;re developing a location-aware app, you might want to trick the phone (and your app) into believing that it&amp;rsquo;s somewhere you&amp;rsquo;re not (in a restaurant, near a bus stop, etc.). The Android developer options provide the ability to set a &amp;ldquo;mock location app&amp;rdquo;. This is a separate app that allows you to configure your desired fake location. When the app is set as the mock location app, the phone pretends to be in the location specified by the app.&lt;/p>
&lt;h2 id="trusted-place--mock-location--perma-unlock">
&lt;a class="heading-anchor" href="#trusted-place--mock-location--perma-unlock">
##
&lt;/a>
Trusted Place + Mock Location = Perma-Unlock
&lt;/h2>
&lt;p>So if Eve steals Alice&amp;rsquo;s phone from her desk at work, and wants to keep it unlocked until she has more time to peruse it, she can do this:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install a mock location app. Set it to the current location.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enable Developer Options.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the mock location app in the developer options.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>And then Eve walks away, confident that Alice&amp;rsquo;s phone will remain unlocked.&lt;/p>
&lt;p>Note that none of those steps requires Eve to type in the phone&amp;rsquo;s PIN. If any of them did, this attack would be nullified. (Adding a Smart Lock trusted location does require a PIN, but fooling the phone into thinking that it&amp;rsquo;s always in the current trusted location doesn&amp;rsquo;t.)&lt;/p>
&lt;p>My recommended solution to the Android team: Require a PIN at step 3. If Alice is a developer, there might already be a mock location app installed and the phone will probably already have the developer options enabled. Step 3 seems like the best intervention point.&lt;/p>
&lt;p>I also don&amp;rsquo;t like that Smart Lock (and Android Device Manager) respect the mock location. It seems to me that they should be &amp;ldquo;above&amp;rdquo; that.&lt;/p>
&lt;h3 id="bonus-attack-android-device-manager">
&lt;a class="heading-anchor" href="#bonus-attack-android-device-manager">
###
&lt;/a>
Bonus attack: Android Device Manager
&lt;/h3>
&lt;p>Alice realizes that her phone is gone! She jumps on her computer and checks &lt;a href="https://support.google.com/accounts/answer/3265955?hl=en">Android Device Manager&lt;/a>! Except&amp;hellip; it reports that the phone is still at the office, because it also uses the mock location being reported by the phone.&lt;/p>
&lt;p>Hopefully Alice will do a remote lock (or wipe) anyway, or maybe the location confusion slows her down for a while.&lt;/p>
&lt;h2 id="vulnerability-disclosure">
&lt;a class="heading-anchor" href="#vulnerability-disclosure">
##
&lt;/a>
Vulnerability Disclosure
&lt;/h2>
&lt;p>I filed a security issue with the Android team (&lt;a href="https://code.google.com/p/android/issues/detail?id=204776">#204776&lt;/a>, but it&amp;rsquo;s not publicly visible). The response was that it is &amp;ldquo;working as intended&amp;rdquo;.&lt;/p>
&lt;blockquote>
&lt;p>Once someone has access to an unlocked phone, they are able to do anything with it (attempt to root the device, install other malware, etc).&lt;/p>
&lt;p>We appreciate the report but this is working as intended.&lt;/p>
&lt;/blockquote>
&lt;p>I see what they&amp;rsquo;re saying. In theory, the attacker could enable app side-loading, and then install some kind of data-snarfer service, and then give it sufficient permission to exfiltrate everything it can access. The data-snarfer could run even while the phone is locked.&lt;/p>
&lt;p>Or the attacker could just keep touching the screen to keep it unlocked.&lt;/p>
&lt;p>(Rooting typically requires a bootloader unlock, which wipes the device. But that&amp;rsquo;s irrelevant if rooting isn&amp;rsquo;t necessary to effect an equivalent attack.)&lt;/p>
&lt;p>I&amp;rsquo;d really like to thank the Android team for taking the time to reply to my not-super-exciting bug report.&lt;/p>
&lt;h2 id="grand-conclusion">
&lt;a class="heading-anchor" href="#grand-conclusion">
##
&lt;/a>
Grand Conclusion
&lt;/h2>
&lt;p>There isn&amp;rsquo;t one. The &amp;ldquo;Trusted Place + Mock Location&amp;rdquo; combo isn&amp;rsquo;t a real problem &amp;ndash; it&amp;rsquo;s just a little distasteful. If someone steals your phone and it&amp;rsquo;s unlocked, you&amp;rsquo;d better hope they&amp;rsquo;re only after the hardware.&lt;/p>
&lt;p>This is especially distressing for tablets. Unlike our phone, most of us don&amp;rsquo;t carry our tablet everywhere, so it&amp;rsquo;s much more likely to be stolen from our home. Entering your PIN on your tablet every time is almost as annoying as on your phone, so Smart Lock seems like a good choice. And that means that it&amp;rsquo;s almost certain that your tablet will be stolen unlocked. (If it gets stolen. I have no idea what the likelihood of that is.)&lt;/p>
&lt;hr>
&lt;h2 id="update">
&lt;a class="heading-anchor" href="#update">
##
&lt;/a>
Update
&lt;/h2>
&lt;p>In Android O (a year after I wrote this) Google &lt;a href="https://www.androidpolice.com/2017/06/01/android-o-feature-spotlight-enabling-developer-options-requires-devices-passcode/">added a PIN prompt&lt;/a> when enabling developer options. So, that negates this problem.&lt;/p>
&lt;p>Unless you&amp;rsquo;re already a developer&amp;hellip;&lt;/p></description></item><item><title>Why and How to Use a Contributor License Agreement</title><link>https://adam-p.ca/blog/2015/02/contributor-license-agreement/</link><pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2015/02/contributor-license-agreement/</guid><description>
&lt;h2 id="background-and-motivation">
&lt;a class="heading-anchor" href="#background-and-motivation">
##
&lt;/a>
Background and Motivation
&lt;/h2>
&lt;p>I received a &lt;a href="https://github.com/adam-p/markdown-here/pull/232">pull request&lt;/a> for Markdown Here that was great: it found a bug, fixed it, and included tests for the fix. However, the PR submitter didn&amp;rsquo;t write the tests using the existing framework, so I figured I&amp;rsquo;d massage his test code into the proper form.&lt;/p>
&lt;p>And then I noticed that he included a &lt;a href="https://github.com/adam-p/markdown-here/commit/52cd013413ff4645ed124cef68b5fc9044d65a96#diff-555e8e637d661924e36cdddfba81a23aR9">copyright line&lt;/a> in the test file. It says &amp;ldquo;MIT License&amp;rdquo;, which is the license used for the rest of the project, but that got me thinking about what that might mean&amp;hellip;&lt;/p>
&lt;p>Wikipedia suggests that the &lt;a href="https://en.wikipedia.org/wiki/MIT_License">MIT License&lt;/a> would require me to include his copyright+license notice wherever I use his code. Not a big deal, but annoying. And maybe a slippery slope &amp;ndash; what if I get a bunch more code submissions?&lt;/p>
&lt;p>So I did some research into &amp;ldquo;Contributor License Agreements&amp;rdquo; and found that there are a couple more things to be concerned about:&lt;/p>
&lt;p>If you ever want to change the project license, you have to get the agreement of all contributors. That includes dual-licensing. Good info about that (and CLAs in general), with specific KDE example: &lt;a href="https://julien.ponge.org/blog/in-defense-of-contributor-license-agreements/">&amp;ldquo;In Defense of License Agreements&amp;rdquo;&lt;/a>.&lt;/p>
&lt;p>Patent something something. Contributors retain the patent rights unless explicitly granted in the CLA.&lt;/p>
&lt;p>And just to be clear: Contributors have the copyright on their code &lt;em>by default&lt;/em>, regardless of whether they put the © notice on it. I&amp;rsquo;m not sure about the license.&lt;/p>
&lt;p>So I decided to require MDH contributors to &amp;ldquo;sign&amp;rdquo; a CLA. Seemed kind of irresponsible not to.&lt;/p>
&lt;h2 id="picking-a-cla">
&lt;a class="heading-anchor" href="#picking-a-cla">
##
&lt;/a>
Picking a CLA
&lt;/h2>
&lt;p>Spending your weekend reading CLAs is a drag.&lt;/p>
&lt;p>I decided to use &lt;a href="http://www.harmonyagreements.org/">Harmony Agreements&lt;/a> to &lt;a href="http://selector.harmonyagreements.org/">generate&lt;/a> the agreement. (I chose &amp;ldquo;any license&amp;rdquo; for the &amp;ldquo;outbound license option&amp;rdquo;.) The agreement it provides seems pretty good and pretty standard.&lt;/p>
&lt;p>(Well&amp;hellip; when I first generated a agreement I chose the &amp;ldquo;copyright assignment&amp;rdquo; version instead of &amp;ldquo;copyright license&amp;rdquo;. I even committed it and got the pull-request submitter to sign it. But then I re-read it and realized it was a) not very standard, b) maybe not enforceable, and c) kind of heinous. So I changed to the &amp;ldquo;copyright license&amp;rdquo; form. The difference is something like &amp;ldquo;you&amp;rsquo;re transferring absolute power to me and you lose the ability to use your own code&amp;rdquo; versus &amp;ldquo;you&amp;rsquo;re letting me do whatever I want with your code but it&amp;rsquo;s still yours&amp;rdquo; &amp;ndash; exclusive vs. non-exclusive license, kind of thing.)&lt;/p>
&lt;h2 id="signing">
&lt;a class="heading-anchor" href="#signing">
##
&lt;/a>
&amp;ldquo;Signing&amp;rdquo;
&lt;/h2>
&lt;p>Ugh.&lt;/p>
&lt;p>Some projects &amp;ndash; like Apache &amp;ndash; require you to print out the agreement, sign it, and mail, fax, or scan-and-email it back to them. Another one (I forget which) uses some Adobe e-signing plugin where you draw your signature on the screen. Google requires you to be signed in, but it&amp;rsquo;s just a button press; ditto Twitter (signed in with Twitter, I mean). &lt;a href="https://www.clahub.com/">CLAHub&lt;/a> requires a Github sign-in (with optional typing of &amp;ldquo;I AGREE&amp;rdquo;). I think I also saw some projects that just require a filled-in form.&lt;/p>
&lt;p>CLAHub is really cool. It gives you a nice link for your CLA, collects agreements, and runs a bot that watches your project&amp;rsquo;s PRs, checks against the CLAs, and comments on the PR as to whether the PR-user has agreed yet or not. Except&amp;hellip; there&amp;rsquo;s a notice saying it&amp;rsquo;s not ready for prime-time, the bot is broken, and the blog hasn&amp;rsquo;t been updated in a year. Also, entrusting a (flaky?) third party with the agreements seems dangerous (although they can be downloaded, so blah).&lt;/p>
&lt;p>The article I linked above mentions &amp;ldquo;some [projects] collect agreements through a simple web form (Google Doc is a fine choice)&amp;rdquo;. So I created a Google Form with the CLA and a form for the contributor to provide contact info and indicate agreement. But&amp;hellip;&lt;/p>
&lt;p>Then I started thinking about non-repudiability. So I did a little reading about &lt;a href="https://en.wikipedia.org/wiki/Electronic_signature">electronic signatures&lt;/a> (not to be confused with digital signatures). Which is a horrible rabbit hole. Anyway, it made me seriously doubt that a row in a Google Spreadsheet with someone&amp;rsquo;s maybe-correct address and the words &amp;ldquo;I AGREE&amp;rdquo; really constitutes a legal signature. (Even in the Google and Twitter cases &amp;ndash; how would they prove that they didn&amp;rsquo;t just fiddle some bits to make it look like I signed?)&lt;/p>
&lt;p>And if you&amp;rsquo;re going to do this annoying CLA crap then you might as well hope that it means something, right?&lt;/p>
&lt;p>Then I found &lt;a href="https://github.com/Medium/opensource/blob/master/sign-cla.md">Medium&amp;rsquo;s open source project&lt;/a>. It requires contributors to commit a file along with their pull request stating that they agree to the CLA. That seemed&amp;hellip; totally reasonable. The agreement is in-band with the code. In a way that I can&amp;rsquo;t manipulate without invalidating. And much, much less annoying for the contributor than printing/signing/faxing.&lt;/p>
&lt;p>So that&amp;rsquo;s how I did it. See MDH&amp;rsquo;s &lt;a href="https://github.com/adam-p/markdown-here/blob/master/CONTRIBUTING.md#contributor-license-agreement">CONTRIBUTING.md&lt;/a>. (That&amp;rsquo;s the &lt;a href="https://github.com/blog/1184-contributing-guidelines">filename to use&lt;/a>.)&lt;/p>
&lt;h2 id="backlash-warning">
&lt;a class="heading-anchor" href="#backlash-warning">
##
&lt;/a>
Backlash warning
&lt;/h2>
&lt;p>Doing the CLA read-and-agree dance is more effort than not doing it. And some people are offended at the idea of doing it (see the tweet at the top of the &amp;ldquo;In Defense Of&amp;rdquo; post.) So, it seems unavoidable that a project with a CLA will get fewer contributions than one without &amp;ndash; some people just won&amp;rsquo;t get past that hurdle.&lt;/p>
&lt;p>But it still seems necessary.&lt;/p>
&lt;hr>
&lt;p>[Note: This is actually an email I wrote to my co-workers after going through this CLA exercise with Markdown Here. That&amp;rsquo;s why the tone is a bit informal and &amp;ldquo;blah&amp;rdquo; is used as if it means something.]&lt;/p></description></item><item><title>Test post: Markdown Here in Disqus</title><link>https://adam-p.ca/blog/2013/10/mdh-disqus-test/</link><pubDate>Fri, 18 Oct 2013 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2013/10/mdh-disqus-test/</guid><description>&lt;p>This is just a stub test post to allow me to try out Markdown Here in Disqus comments.&lt;/p>
&lt;p>Right now MDH won&amp;rsquo;t work with Disqus in Chrome because of cross-origin restrictions. See: &lt;a href="https://github.com/adam-p/markdown-here/issues/124">https://github.com/adam-p/markdown-here/issues/124&lt;/a>&lt;/p>
&lt;p>&lt;strong>Update&lt;/strong>: The Disqus edit box is &lt;code>contenteditable&lt;/code>, and MDH will render in it, but all formatting seems to get stripped out when you actually post the comment. Seems like the rich-edit-ness is probably just to support Disqus&amp;rsquo;s add-an-image feature.&lt;/p>
&lt;p>&lt;strong>Final update&lt;/strong>: I&amp;rsquo;m not longer using Disqus, so there&amp;rsquo;s nothing here to try. Sorry!&lt;/p></description></item><item><title>Safari Extensions Gallery: half-baked</title><link>https://adam-p.ca/blog/2013/06/safari-extensions-gallery-half-baked/</link><pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2013/06/safari-extensions-gallery-half-baked/</guid><description>&lt;p>Trying to get &lt;a href="https://markdown-here.com">Markdown Here&lt;/a> listed in the &lt;a href="https://extensions.apple.com">Safari Extensions Gallery&lt;/a> is by far the worst browser extension &amp;ldquo;store&amp;rdquo; experience I&amp;rsquo;ve had so far. Shockingly bad.&lt;/p>
&lt;h2 id="no-hosting">
&lt;a class="heading-anchor" href="#no-hosting">
##
&lt;/a>
No hosting
&lt;/h2>
&lt;p>First of all, but least of all: There&amp;rsquo;s no hosting. Unlike the Chrome and Mozilla stores, the Safari store doesn&amp;rsquo;t host the extension for you &amp;ndash; it&amp;rsquo;s really more of a listing of links to wherever you host your extension files. That&amp;rsquo;s not terrible, but:&lt;/p>
&lt;ul>
&lt;li>It&amp;rsquo;s costing me a little bit of money each month to host them.&lt;/li>
&lt;li>I don&amp;rsquo;t get nice install/usage stats like I do with Chrome and &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/markdown-here/statistics/?last=365">Mozilla&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="no-communication">
&lt;a class="heading-anchor" href="#no-communication">
##
&lt;/a>
No communication
&lt;/h2>
&lt;p>Submitting the extension was basically the same as everywhere else. But this is the confirmation email:&lt;/p>
&lt;blockquote>
&lt;p>Dear Adam Pritchard,
Thank you for submitting your Safari Extension.
Apple reviews all submissions and reserves the right to omit, edit, or reject any submission. Please note you will not receive any further notifications.
We appreciate your interest in Safari.
Sincerely,
Apple Developer&lt;/p>
&lt;/blockquote>
&lt;p>(From &lt;a href="mailto:noreply@adc.apple.com">noreply@adc.apple.com&lt;/a>)&lt;/p>
&lt;p>So&amp;hellip; You&amp;rsquo;re going to review my extension, and I&amp;rsquo;ll never know if it&amp;rsquo;s been accepted or rejected or what? And there&amp;rsquo;s no mechanism for me to get an update?&lt;/p>
&lt;p>Sure enough, 5 weeks has gone by now. There&amp;rsquo;ve been no status update emails, and there&amp;rsquo;s no review status info anywhere on the developer website (that I can find). And I&amp;rsquo;m not the only one &amp;ndash; there are &lt;a href="https://devforums.apple.com/thread/182373?tstart=0">other people&lt;/a> on the forums in the &lt;a href="https://devforums.apple.com/thread/187144?tstart=0">same boat&lt;/a>.&lt;/p>
&lt;p>To be clear, this is not at all what the Chrome and Mozilla extension approval process is like. I&amp;rsquo;ve had my &lt;a href="https://github.com/adam-p/markdown-here/issues/21">fair share of problems&lt;/a> with the Mozilla approval process, but I had a queue number, an IRC channel, and reviewers I could communicate with. (The Chrome store has no apparent approval process, because I&amp;rsquo;m using the standard API. Which is similar to the Safari extension API I&amp;rsquo;m using. So&amp;hellip; why is there any non-negligible review at all?)&lt;/p>
&lt;h2 id="no-search">
&lt;a class="heading-anchor" href="#no-search">
##
&lt;/a>
No search
&lt;/h2>
&lt;p>To top it off, the Safari Extensions Gallery itself&amp;hellip; has no search?!? Let&amp;rsquo;s pick a not-front-page extension at random&amp;hellip; how about the &amp;ldquo;Entertainment&amp;rdquo; category and then the Turboglue extension. (Sorry, there&amp;rsquo;s no way to give you a link to that!). Now try to find it some other way. The search box in the upper-right of that page? &amp;ldquo;No results were found.&amp;rdquo; And&amp;hellip; I can&amp;rsquo;t find another search box. (Unlike Firefox, there&amp;rsquo;s no in-browser extension search.) How about a Google site search? That wouldn&amp;rsquo;t really be an acceptable work-around even if it worked&amp;hellip; but &lt;a href="https://www.google.com/search?q=site%3Aextensions.apple.com+Turboglue">it doesn&amp;rsquo;t anwyay&lt;/a>.&lt;/p>
&lt;p>(Maybe related: Here&amp;rsquo;s a &lt;a href="https://devforums.apple.com/thread/179972">forum post&lt;/a> by a dev who has had his/her extension approved, but can&amp;rsquo;t actually find it in the Gallery.)&lt;/p>
&lt;p>I&amp;rsquo;m not sure how this could be worse. Unfriendly to developers &lt;em>and&lt;/em> unfriendly to users. And it&amp;rsquo;s not like Safari extensions are &lt;em>new&lt;/em> &amp;ndash; they&amp;rsquo;ve been around about the &lt;a href="https://en.wikipedia.org/wiki/Safari_%28web_browser%29#Safari_5">same amount of time&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/Google_Chrome#Chrome_Web_Store">as Chrome extensions&lt;/a>.&lt;/p>
&lt;p>&lt;img src="./img/blog/safari-gallery-new.png" alt="Safari Extensions Gallery still marked as new" title="Safari Extensions Gallery still marked as new">&lt;/p>
&lt;p>(Screen-grabbed from the bottom of &lt;a href="https://developer.apple.com/programs/safari/">this page&lt;/a>. Age of the Gallery derived from &lt;a href="https://lifehacker.com/5598524/whats-useful-in-the-safari-extensions-gallery">this article&lt;/a>.)&lt;/p>
&lt;h2 id="sweet-lemons">
&lt;a class="heading-anchor" href="#sweet-lemons">
##
&lt;/a>
Sweet lemons
&lt;/h2>
&lt;p>Safari extensions are clearly not Apple&amp;rsquo;s primary concern, and maybe that&amp;rsquo;s okay. It&amp;rsquo;s not a hardcore-extension-geek browser like Firefox; their browser isn&amp;rsquo;t also an OS, unlike Chrome; and they have guaranteed, bundled-with-OS market share, like Internet Explorer (I don&amp;rsquo;t know much about IE&amp;rsquo;s extension support, but it&amp;rsquo;s clearly not as robust as Firefox and Chrome). And they do give me a way to provide a &lt;a href="https://markdown-here.com/get.html">Safari extension to my users&lt;/a> and update it automatically.&lt;/p>
&lt;hr>
&lt;h2 id="bonus-whinging">
&lt;a class="heading-anchor" href="#bonus-whinging">
##
&lt;/a>
Bonus whinging
&lt;/h2>
&lt;p>It&amp;rsquo;s necessary to generate and register a signing certificate before you can even start to develop a Safari extension (IIRC &amp;ndash; but definitely before publishing). There&amp;rsquo;s no such stumbling block in Firefox and Chrome. Maybe this is due to the absence of hosting? I&amp;rsquo;m not entirely sure how painful it&amp;rsquo;s going to be to set up a new OS X development machine.&lt;/p>
&lt;p>Check out the ghetto method of opening the Markdown Here options page in Safari. It&amp;rsquo;s probably not &lt;em>just&lt;/em> my dumbness, since I stole the approach from AdBlock.&lt;/p>
&lt;p>&lt;img src="./img/blog/safari-mdh-prefs-checkbox.png" alt="Markdown Here prefs in Safari">&lt;/p>
&lt;hr>
&lt;h2 id="update-accepted-6-months-later">
&lt;a class="heading-anchor" href="#update-accepted-6-months-later">
##
&lt;/a>
Update: Accepted 6 months later
&lt;/h2>
&lt;p>Two days ago (2013-11-04) I received an email indicating that Markdown Here had been accepted into the Safari Extensions Gallery. Phew!&lt;/p>
&lt;p>I think the acceptance makes the whole thing even weirder. If they were just sending submissions directly to the trash I could understand, but&amp;hellip; Complete silence and then acceptance after 6 months? Are they backed up half a year? Is my extension so complex that it took them that long to review? Wha?&lt;/p></description></item><item><title>No One Knows to Click on a Page Action</title><link>https://adam-p.ca/blog/2013/03/pageaction-interaction/</link><pubDate>Sun, 24 Mar 2013 00:00:00 +0000</pubDate><guid>https://adam-p.ca/blog/2013/03/pageaction-interaction/</guid><description>&lt;p>&lt;strong>Page actions&lt;/strong> &amp;ndash; the buttons in a browser&amp;rsquo;s address bar &amp;ndash; are a &lt;strong>surprising UI failure&lt;/strong>.&lt;/p>
&lt;p>When adding a button for a browser extension, a choice must be made whether to make it a &amp;ldquo;page action&amp;rdquo; or a &amp;ldquo;browser action&amp;rdquo; (button on the toolbar). But &lt;strong>browsers have failed to communicate the interactiveness&lt;/strong> of page actions, and &lt;strong>almost no one &amp;ndash; techy or layman &amp;ndash; realizes that they&amp;rsquo;re clickable&lt;/strong>.&lt;/p>
&lt;hr>
&lt;p>To complement the context menu item and hotkey, and to fulfil &lt;a href="https://github.com/adam-p/markdown-here/issues/34">a user feature request&lt;/a>, I decided to add a button to the &lt;a href="https://www.markdown-here.com">&lt;strong>Markdown Here&lt;/strong>&lt;/a> browser extension. It turned out that simply deciding &lt;em>where&lt;/em> to put the button was a big part of the effort&amp;hellip;&lt;/p>
&lt;h2 id="page-action-vs-browser-action">
&lt;a class="heading-anchor" href="#page-action-vs-browser-action">
##
&lt;/a>
Page Action vs. Browser Action
&lt;/h2>
&lt;p>I&amp;rsquo;m going to use the Chrome extension development terminology:&lt;/p>
&lt;dl>
&lt;dt>Page actions...&lt;/dt>
&lt;dd>are the buttons and status indicators located in the address/omni/awesome bar. (&lt;a href="https://developer.chrome.com/extensions/pageAction.html">See &lt;code>pageAction&lt;/code> API info&lt;/a>.)&lt;/dd>
&lt;dt>Browser actions...&lt;/dt>
&lt;dd>are buttons on the browser toolbar. (&lt;a href="https://developer.chrome.com/extensions/browserAction.html">See &lt;code>browserAction&lt;/code> API info&lt;/a>.)&lt;/dd>
&lt;/dl>
&lt;p>&lt;img src="./img/blog/firefox-button.png" alt="Firefox page and browser buttons">&lt;/p>
&lt;p>In the screenshot above you can see the two styles co-existing in Firefox, which suggests there&amp;rsquo;s no real implementation decision to make &amp;ndash; just provide both, and let the user decide which style they like. That&amp;rsquo;s true in Firefox (although there&amp;rsquo;s still the lesser decision of whether or not to add the toolbar button by default), but in Chrome you can either have a page action &lt;em>or&lt;/em> a browser action, not both.&lt;/p>
&lt;p>The choice initially seemed pretty obvious: use a page action. From Chrome&amp;rsquo;s &lt;a href="https://developer.chrome.com/extensions/browserAction.html#tips">documentation for browser actions&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t use browser actions for features that make sense for only a few pages. Use page actions instead.&lt;/p>
&lt;/blockquote>
&lt;p>Markdown Here&amp;rsquo;s button is only applicable to some rich-edit compose elements (email, mostly), so that admonition seems to apply pretty directly. Like many people, I don&amp;rsquo;t like occasional-use buttons cluttering up my toolbar, so I initially implemented the button as a page action.&lt;/p>
&lt;h2 id="apparently-imperceptible-affordance">
&lt;a class="heading-anchor" href="#apparently-imperceptible-affordance">
##
&lt;/a>
Apparently Imperceptible Affordance
&lt;/h2>
&lt;p>&amp;hellip;And then I showed the cool new button to my significant other, who said something along the lines of &amp;ldquo;I can click that?&amp;rdquo; Which is a pretty damning statement, for a button.&lt;/p>
&lt;p>I must admit that I had some suspicions about the obviousness of page actions&amp;rsquo; clickability. I&amp;rsquo;m fairly sure it took me a while to realize I could click them, and I&amp;rsquo;m a) pretty technically savvy, and b) pretty hover-over-everything-that-looks-interesting curious. But what if a user is &lt;em>not&lt;/em> both of those things&amp;hellip;?&lt;/p>
&lt;p>So I asked around. I asked in the &lt;a href="https://groups.google.com/forum/#!topic/markdown-here/NjQRYcD1mgY/discussion">Markdown Here Google Group&lt;/a>, the &lt;a href="https://ux.stackexchange.com/questions/33987/browser-extensions-page-action-or-browser-action">UX StackExchange&lt;/a>, and on &lt;a href="https://plus.google.com/u/0/112228900913862544865/posts/9HbUjid2UvV">Google+&lt;/a>. These are the sorts of responses I got:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;This [is] purely anecdotal, but I work in the web industry, and use [C]hrome everyday, and didn&amp;rsquo;t realise the page actions were clickable. I agree with you that they look more like signifiers than they do clickable buttons.&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;But I agree that they don&amp;rsquo;t function well as buttons, perhaps this is by the design of the icon (not &amp;ldquo;raising&amp;rdquo; the element to give it depth).&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;pageAction in the abstract is a great idea, but I always find its use a little jarring. And I agree it&amp;rsquo;s not button-like at all, more just informational.&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>(Yes, there were some people who knew that page actions are clickable. But the fact that many computer/tech/web/UX-savvy people &lt;em>didn&amp;rsquo;t&lt;/em> know is the more significant observation.)&lt;/p>
&lt;p>I also asked around among people at the office (coders) and among non-programmer friends, and the vast majority of both groups didn&amp;rsquo;t know they could interact with page actions. At best they thought of them as status indicators, and at worst they couldn&amp;rsquo;t remember ever having noticed them before. &lt;em>Ugh&lt;/em>.&lt;/p>
&lt;h3 id="missing-cues">
&lt;a class="heading-anchor" href="#missing-cues">
###
&lt;/a>
Missing Cues
&lt;/h3>
&lt;p>It&amp;rsquo;s hard to blame users for this lack of &lt;a href="https://en.wikipedia.org/wiki/Affordance">affordance&lt;/a> recognition. At least, not yet.&lt;/p>
&lt;p>Page actions do not display any of the typical this-is-a-clickable-thing traits. For the most part, page actions:&lt;/p>
&lt;ul>
&lt;li>are not raised or underlined, like a standard button or a link, so most people won&amp;rsquo;t hover over them, but even if the user does hover, page actions&amp;hellip;&lt;/li>
&lt;li>do not change at all when hovered over &amp;ndash; no outline, no colour change, no raise-up, no clicky-hand mouse cursor.&lt;/li>
&lt;/ul>
&lt;p>Some page actions have a verb-based tooltip if you hover long enough. &lt;em>Some&lt;/em>. &lt;em>If&lt;/em>. &lt;em>Long enough&lt;/em>.&lt;/p>
&lt;p>It&amp;rsquo;s a little shocking how poorly the interactiveness is communicated to the user.&lt;/p>
&lt;h3 id="maybe-our-future-selves-will-get-it">
&lt;a class="heading-anchor" href="#maybe-our-future-selves-will-get-it">
###
&lt;/a>
Maybe our future selves will get it?
&lt;/h3>
&lt;!-- dropping into HTML to float the image, since it's so vertical -->
&lt;a href="./img/blog/windows8-clickable.png">
&lt;img src="./img/blog/windows8-clickable.png" alt="Windows 8 clickable text" class="pull-right" style="max-height: 20em; margin-left: 2em;">
&lt;/a>
&lt;p>Above I coyly dropped &amp;ldquo;At least, not yet.&amp;rdquo; There is a trend in UI design toward everything on-screen being interactive unless explicitly disabled-looking. Windows 8 has gone this way, as has Chrome and, to a slightly lesser extent, Firefox. There&amp;rsquo;s very, very little text or window chrome that&amp;rsquo;s non-interactive.&lt;/p>
&lt;p>But even if you accept the &amp;ldquo;everything is interactive&amp;rdquo; ideal, page actions are still different than most other elements, since there&amp;rsquo;s no hover effect. And page actions are further hampered by the minimalistic design aesthetic that Chrome and Firefox seem to have adopted for them &amp;ndash; a monochrome outline icon that can easily be read as disabled.&lt;/p>
&lt;p>Maybe once users have fully embraced/internalized the idea that there are no extraneous UI elements, they won&amp;rsquo;t need hover effects and raised borders. Maybe there&amp;rsquo;ll be a great awakening to the utility of page actions. But until then&amp;hellip;&lt;/p>
&lt;h2 id="how-to-rescue-page-actions">
&lt;a class="heading-anchor" href="#how-to-rescue-page-actions">
##
&lt;/a>
How to rescue page actions
&lt;/h2>
&lt;p>Page actions need to look less like small, monochrome, passive, static icons. They need some standard button cues, both initially and on hover; they should employ one or more of: raisèd-ness, colour, border, more visual strength.&lt;/p>
&lt;p>(I suspect that even the Chrome-style toolbar buttons &amp;ndash; like the three-line settings button &amp;ndash; are also below most laypeople&amp;rsquo;s threshold to recognize the click affordance. I&amp;rsquo;ve seen that in action in my own family-tech-support experience. Those buttons also lack most historical click cues. But let&amp;rsquo;s tilt at one windmill at a time&amp;hellip;)&lt;/p>
&lt;h3 id="tangent-chrome-needs-to-allow-both-page-and-browser-actions">
&lt;a class="heading-anchor" href="#tangent-chrome-needs-to-allow-both-page-and-browser-actions">
###
&lt;/a>
Tangent: Chrome needs to allow both page and browser actions
&lt;/h3>
&lt;p>Finally, Chrome should allow extensions to provide both page actions and browser actions.&lt;/p>
&lt;p>In the screenshot at the top of this post, you see can that &lt;a href="https://getpocket.com/">Pocket&amp;rsquo;s&lt;/a> Firefox extension uses both button styles: the page action is for saving the current page, while the browser action is for showing your saved pages. Similarly for the bookmarks buttons: page action for bookmarking the page, browser action for viewing bookmarks.&lt;/p>
&lt;p>(Markdown Here also has a button in each place, but it&amp;rsquo;s not as compelling a use case, since it&amp;rsquo;s just a convenience to work around the page action affordance opacity. Both buttons toggle Markdown rendering; the page action only shows when focus is in a valid target; you can hide the toolbar button if you&amp;rsquo;re one of the few page-action-savvy users. But, still, I wish I could provide the same flexibility to my Chrome users that I do to my Firefox users.)&lt;/p>
&lt;p>In Chrome, Pocket only has a browser action (which, oddly enough, acts only like its Firefox page action), and bookmarks only have a page action (and a whole toolbar). I can&amp;rsquo;t think of any reason for Chrome to prevent extensions from providing both, and there are certainly good use cases for allowing them.&lt;/p>
&lt;h2 id="so-its-back-to-a-browser-action">
&lt;a class="heading-anchor" href="#so-its-back-to-a-browser-action">
##
&lt;/a>
So it&amp;rsquo;s back to a browser action
&lt;/h2>
&lt;p>I finally switched the Markdown Here toggle button in Chrome to be a browser action. Even though it clearly, spiritually, should be a page action, I just can&amp;rsquo;t ignore the fact that most users will not recognize it as clickable in that form.&lt;/p>
&lt;p>I have had &lt;a href="https://github.com/adam-p/markdown-here/issues/45">one complaint&lt;/a> about the button location, but the user seemed satisfied that I made the rational choice after I explained it.&lt;/p>
&lt;hr>
&lt;a name="update-20171028"/>
&lt;h2 id="update-2017-10-28">
&lt;a class="heading-anchor" href="#update-2017-10-28">
##
&lt;/a>
Update 2017-10-28
&lt;/h2>
&lt;p>Last year &lt;strong>Chrome turned page actions into browser actions&lt;/strong>. The &lt;a href="https://productforums.google.com/d/msg/chrome/wOUFbsKqPg0/K9FBzJh7BAAJ">description of the change&lt;/a> suggests that this was a security decision. Evil stealth extensions were being installed, so now all extensions have to have toolbar buttons to expose them to users. (FWIW, I don&amp;rsquo;t think this is a good solution to the problem. I&amp;rsquo;m sure the majority of users don&amp;rsquo;t pay much attention to random toolbar buttons.) It makes little sense for page action-centric extensions to have both a sometimes-visible address bar button and an always-visible toolbar button, so the Chrome team did away with the address bar button.&lt;/p>
&lt;p>Firefox hasn&amp;rsquo;t made a similar change. You&amp;rsquo;d think that if there&amp;rsquo;s solid security rationale for one browser, that it&amp;rsquo;d apply to all browsers.&lt;/p>
&lt;p>This makes the documentation for &lt;code>pageAction&lt;/code> pretty confusing. Check out &lt;a href="https://developer.chrome.com/extensions/pageAction">Chrome&amp;rsquo;s&lt;/a> versus &lt;a href="https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/pageAction">Mozilla&amp;rsquo;s&lt;/a> documentation. Chrome&amp;rsquo;s documentation is kind of incoherent now. There seems to be no reason at all to use page actions, but the doc still suggests that you do.&lt;/p>
&lt;p>I felt that page actions were kind of unusable before, but&amp;hellip; this is worse?&lt;/p>
&lt;p>The reason I was looking at this again is because I created another extension, called &lt;a href="https://github.com/adam-p/breached">Breached&lt;/a>, where a page action would, in theory, make the most sense. The button is enabled/shown when the user visits a site that has suffered a breach in the past, exposing user accounts. This is a pretty rare thing (for many people&amp;hellip; who don&amp;rsquo;t use Yahoo Mail), so dedicating a perma-visible toolbar button to it is pretty wasteful. Still, I initially went with a browser action for the reasons given in this post. I even added a notification (shown once per site), so the user could hide the toolbar button and still notice when they visit a breached site.&lt;/p>
&lt;p>Then a &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/breached/reviews/940746/">reviewer&lt;/a> requested that it be a page action. I thought about it again and realized that the notification also helps with the &amp;ldquo;no one knows to click on a page action&amp;rdquo; problem by telling the user they can click on it. And the always-visible button still bugged me (and, let&amp;rsquo;s face it, most users won&amp;rsquo;t know how to hide buttons). So I changed it to a page action. And&amp;hellip; discovered that there&amp;rsquo;s no visible difference in Chrome. Except page actions don&amp;rsquo;t support badge text, which I was using to show the number of breaches.&lt;/p>
&lt;p>Anyway, I&amp;rsquo;m leaving Breached as a page action, for the sake of Firefox users.&lt;/p>
&lt;hr>
&lt;p>Postscript: First blog post ever! Yay! Thanks to &lt;a href="https://caseywatts.github.com/">Casey Watts&lt;/a> for suggesting that I write it.&lt;/p></description></item></channel></rss>